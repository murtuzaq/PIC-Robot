

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 17 14:33:20 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.45
    99                           ; Generated 16/11/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4550 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK0
   134  0014A4                     __pidataBANK0:
   135                           	opt stack 0
   136                           
   137                           ;initializer for IR_Task@prvLevel
   138  0014A4  01                 	db	1
   139                           
   140                           	psect	smallconst
   141  000800                     __psmallconst:
   142                           	opt stack 0
   143  000800  00                 	db	0
   144  000801                     _IRSTATEMACHINE:
   145                           	opt stack 0
   146  000801  A2                 	db	low _ir_end
   147  000802  14                 	db	high _ir_end
   148  000803  01                 	db	1
   149  000804  00                 	db	0
   150  000805  00                 	db	0
   151  000806  00                 	db	0
   152  000807  4E                 	db	low _ir_Begin
   153  000808  13                 	db	high _ir_Begin
   154  000809  01                 	db	1
   155  00080A  02                 	db	2
   156  00080B  00                 	db	0
   157  00080C  00                 	db	0
   158  00080D  7C                 	db	low _ir_bitcollect
   159  00080E  0E                 	db	high _ir_bitcollect
   160  00080F  01                 	db	1
   161  000810  02                 	db	2
   162  000811  03                 	db	3
   163  000812  00                 	db	0
   164  000813  1C                 	db	low _ir_terminate
   165  000814  13                 	db	high _ir_terminate
   166  000815  01                 	db	1
   167  000816  00                 	db	0
   168  000817  00                 	db	0
   169  000818  00                 	db	0
   170  000819                     __end_of_IRSTATEMACHINE:
   171                           	opt stack 0
   172  0000                     _ADCON1bits	set	4033
   173  0000                     _LATE	set	3981
   174  0000                     _LATD	set	3980
   175  0000                     _LATC	set	3979
   176  0000                     _LATB	set	3978
   177  0000                     _LATA	set	3977
   178  0000                     _TRISE	set	3990
   179  0000                     _TRISD	set	3989
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISB	set	3987
   182  0000                     _TRISA	set	3986
   183  0000                     _LATBbits	set	3978
   184  0000                     _LATAbits	set	3977
   185  0000                     _TRISAbits	set	3986
   186  0000                     _PORTBbits	set	3969
   187  0000                     _TRISEbits	set	3990
   188  0000                     _LATEbits	set	3981
   189  0000                     _TRISBbits	set	3987
   190  0000                     _TMR0H	set	4055
   191  0000                     _TMR0L	set	4054
   192  0000                     _TMR1H	set	4047
   193  0000                     _T0CONbits	set	4053
   194  0000                     _RCONbits	set	4048
   195  0000                     _INTCON2bits	set	4081
   196  0000                     _INTCON3bits	set	4080
   197  0000                     _IPR2	set	4002
   198  0000                     _IPR1bits	set	3999
   199  0000                     _PIE2	set	4000
   200  0000                     _PIE1bits	set	3997
   201  0000                     _PIR2	set	4001
   202  0000                     _PIR1bits	set	3998
   203  0000                     _INTCONbits	set	4082
   204  0000                     _OSCCONbits	set	4051
   205                           
   206                           ; #config settings
   207  000819  00                 	db	0	; dummy byte at the end
   208  0000                     
   209                           	psect	cinit
   210  0010B2                     __pcinit:
   211                           	opt stack 0
   212  0010B2                     start_initialization:
   213                           	opt stack 0
   214  0010B2                     __initialization:
   215                           	opt stack 0
   216                           
   217                           ; Initialize objects allocated to BANK0 (1 bytes)
   218                           ; load TBLPTR registers with __pidataBANK0
   219  0010B2  0EA4               	movlw	low __pidataBANK0
   220  0010B4  6EF6               	movwf	tblptrl,c
   221  0010B6  0E14               	movlw	high __pidataBANK0
   222  0010B8  6EF7               	movwf	tblptrh,c
   223  0010BA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   224  0010BC  6EF8               	movwf	tblptru,c
   225  0010BE  0009               	tblrd		*+	;fetch initializer
   226  0010C0  CFF5 F0C9          	movff	tablat,__pdataBANK0
   227                           
   228                           ; Clear objects allocated to BANK0 (76 bytes)
   229  0010C4  EE00  F060         	lfsr	0,__pbssBANK0
   230  0010C8  0E4C               	movlw	76
   231  0010CA                     clear_0:
   232  0010CA  6AEE               	clrf	postinc0,c
   233  0010CC  06E8               	decf	wreg,f,c
   234  0010CE  E1FD               	bnz	clear_0
   235                           
   236                           ; Clear objects allocated to COMRAM (21 bytes)
   237  0010D0  EE00  F02C         	lfsr	0,__pbssCOMRAM
   238  0010D4  0E15               	movlw	21
   239  0010D6                     clear_1:
   240  0010D6  6AEE               	clrf	postinc0,c
   241  0010D8  06E8               	decf	wreg,f,c
   242  0010DA  E1FD               	bnz	clear_1
   243  0010DC                     end_of_initialization:
   244                           	opt stack 0
   245  0010DC                     __end_of__initialization:
   246                           	opt stack 0
   247  0010DC  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   248  0010DE  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   249  0010E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  0010E2  6EF8               	movwf	tblptru,c
   251  0010E4  0100               	movlb	0
   252  0010E6  EFEE  F006         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssCOMRAM
   261  00002C                     __pbssCOMRAM:
   262                           	opt stack 0
   263  00002C                     	ds	4
   264  000030                     	ds	4
   265  000034                     	ds	4
   266  000038                     _timer0ReloadVal:
   267                           	opt stack 0
   268  000038                     	ds	2
   269  00003A                     _k:
   270                           	opt stack 0
   271  00003A                     	ds	2
   272  00003C                     _j:
   273                           	opt stack 0
   274  00003C                     	ds	2
   275  00003E                     _i:
   276                           	opt stack 0
   277  00003E                     	ds	2
   278  000040                     _sema_irdetect:
   279                           	opt stack 0
   280  000040                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           
   288                           	psect	bssBANK0
   289  000060                     __pbssBANK0:
   290                           	opt stack 0
   291  000060                     _Fifo:
   292                           	opt stack 0
   293  000060                     	ds	32
   294  000080                     _IRdata:
   295                           	opt stack 0
   296  000080                     	ds	2
   297  000082                     _irstate:
   298                           	opt stack 0
   299  000082                     	ds	2
   300  000084                     _RunPt:
   301                           	opt stack 0
   302  000084                     	ds	2
   303  000086                     _l:
   304                           	opt stack 0
   305  000086                     	ds	2
   306  000088                     _GetI:
   307                           	opt stack 0
   308  000088                     	ds	1
   309  000089                     _PutI:
   310                           	opt stack 0
   311  000089                     	ds	1
   312  00008A                     _IRdigit:
   313                           	opt stack 0
   314  00008A                     	ds	1
   315  00008B                     CLOCK_Task@STATE_CLOCK:
   316                           	opt stack 0
   317  00008B                     	ds	1
   318  00008C                     _tcbs:
   319                           	opt stack 0
   320  00008C                     	ds	24
   321  0000A4                     _irhandle:
   322                           	opt stack 0
   323  0000A4                     	ds	3
   324  0000A7                     _sema_Task4:
   325                           	opt stack 0
   326  0000A7                     	ds	1
   327  0000A8                     _sema_Task3:
   328                           	opt stack 0
   329  0000A8                     	ds	1
   330  0000A9                     _sema_Task2:
   331                           	opt stack 0
   332  0000A9                     	ds	1
   333  0000AA                     _sema_clock:
   334                           	opt stack 0
   335  0000AA                     	ds	1
   336  0000AB                     _sema_picbot:
   337                           	opt stack 0
   338  0000AB                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           
   346                           	psect	dataBANK0
   347  0000C9                     __pdataBANK0:
   348                           	opt stack 0
   349  0000C9                     IR_Task@prvLevel:
   350                           	opt stack 0
   351  0000C9                     	ds	1
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           
   359                           	psect	cstackBANK0
   360  0000AC                     __pcstackBANK0:
   361                           	opt stack 0
   362  0000AC                     ??_LowISR:
   363                           
   364                           ; 1 bytes @ 0x0
   365  0000AC                     	ds	21
   366  0000C1                     ?_TMR0_ReadTimer:
   367                           	opt stack 0
   368  0000C1                     ?___lwdiv:
   369                           	opt stack 0
   370  0000C1                     OS_AddThreads@func1:
   371                           	opt stack 0
   372  0000C1                     OS_Wait@semaPt:
   373                           	opt stack 0
   374  0000C1                     OS_Signal@semaPt:
   375                           	opt stack 0
   376  0000C1                     OS_Block@semaPt:
   377                           	opt stack 0
   378  0000C1                     Fifo_Put@data:
   379                           	opt stack 0
   380  0000C1                     Fifo_Get@datapt:
   381                           	opt stack 0
   382  0000C1                     ___lwdiv@dividend:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x15
   386  0000C1                     	ds	2
   387  0000C3                     ?_CLOCK_ReadTimer:
   388                           	opt stack 0
   389  0000C3                     OS_AddThreads@func2:
   390                           	opt stack 0
   391  0000C3                     ___lwdiv@divisor:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x17
   395  0000C3                     	ds	2
   396  0000C5                     OS_AddThreads@func3:
   397                           	opt stack 0
   398  0000C5                     OS_Scheduler@PrvRunPt:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x19
   402  0000C5                     	ds	2
   403  0000C7                     OS_Scheduler@sleep:
   404                           	opt stack 0
   405  0000C7                     OS_AddThreads@func4:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x1B
   409  0000C7                     	ds	2
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           
   417                           	psect	cstackCOMRAM
   418  000001                     __pcstackCOMRAM:
   419                           	opt stack 0
   420  000001                     ?_IR_handle:
   421                           	opt stack 0
   422  000001                     ?i2_TMR0_ReadTimer:
   423                           	opt stack 0
   424  000001                     i2OS_Signal@semaPt:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x0
   428  000001                     	ds	2
   429  000003                     ??i2_TMR0_ReadTimer:
   430                           
   431                           ; 1 bytes @ 0x2
   432  000003                     	ds	2
   433  000005                     i2OS_Signal@PrvPt:
   434                           	opt stack 0
   435  000005                     i2TMR0_ReadTimer@readVal:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x4
   439  000005                     	ds	2
   440  000007                     ?i2_CLOCK_ReadTimer:
   441                           	opt stack 0
   442  000007                     i2OS_Signal@pt:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x6
   446  000007                     	ds	2
   447  000009                     ?_CLOCK_Time_Tick:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x8
   451  000009                     	ds	2
   452  00000B                     CLOCK_Time_Tick@tick_time:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0xA
   456  00000B                     	ds	2
   457  00000D                     ??_HighISR:
   458                           
   459                           ; 1 bytes @ 0xC
   460  00000D                     	ds	18
   461  00001F                     ??_TMR0_Init:
   462  00001F                     ??_Fifo_Put:
   463  00001F                     ??_TMR0_ReadTimer:
   464  00001F                     ??_DEBUG_Pin0Toggle:
   465  00001F                     ??_Fifo_Get:
   466  00001F                     Motor_Right_B_1A@dir:
   467                           	opt stack 0
   468  00001F                     Motor_Right_B_1B@dir:
   469                           	opt stack 0
   470  00001F                     Motor_Right_A_1A@dir:
   471                           	opt stack 0
   472  00001F                     Motor_Right_A_1B@dir:
   473                           	opt stack 0
   474  00001F                     Motor_Left_B_1A@dir:
   475                           	opt stack 0
   476  00001F                     Motor_Left_B_1B@dir:
   477                           	opt stack 0
   478  00001F                     Motor_Left_A_1A@dir:
   479                           	opt stack 0
   480  00001F                     Motor_Left_A_1B@dir:
   481                           	opt stack 0
   482  00001F                     ___lwdiv@counter:
   483                           	opt stack 0
   484  00001F                     Fifo_Init@i:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x1E
   488  00001F                     	ds	1
   489  000020                     OS_Wait@ret:
   490                           	opt stack 0
   491  000020                     Wheel_Front_Right@motion:
   492                           	opt stack 0
   493  000020                     Wheel_Front_Left@motion:
   494                           	opt stack 0
   495  000020                     Wheel_Back_Right@motion:
   496                           	opt stack 0
   497  000020                     Wheel_Back_Left@motion:
   498                           	opt stack 0
   499  000020                     ___lwdiv@quotient:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x1F
   503  000020                     	ds	1
   504  000021                     OS_Signal@PrvPt:
   505                           	opt stack 0
   506  000021                     TMR0_ReadTimer@readVal:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x20
   510  000021                     	ds	1
   511  000022                     ??_ir_bitcollect:
   512                           
   513                           ; 1 bytes @ 0x21
   514  000022                     	ds	1
   515  000023                     OS_Signal@pt:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x22
   519  000023                     	ds	2
   520  000025                     ??_PICBOT_Task:
   521  000025                     ir_bitcollect@n:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x24
   525  000025                     	ds	1
   526  000026                     ??_IR_Task:
   527                           
   528                           ; 1 bytes @ 0x25
   529  000026                     	ds	1
   530  000027                     PICBOT_Task@status:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x26
   534  000027                     	ds	1
   535  000028                     PICBOT_Task@command:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x27
   539  000028                     	ds	2
   540  00002A                     
   541                           ; 1 bytes @ 0x29
   542  00002A                     	ds	2
   543  00002C                     tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           
   550                           ; 1 bytes @ 0x2B
   551 ;;
   552 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   553 ;;
   554 ;; *************** function _main *****************
   555 ;; Defined at:
   556 ;;		line 37 in file "main.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;		None
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   570 ;;      Params:         0       0       0       0       0       0       0       0       0
   571 ;;      Locals:         0       0       0       0       0       0       0       0       0
   572 ;;      Temps:          0       0       0       0       0       0       0       0       0
   573 ;;      Totals:         0       0       0       0       0       0       0       0       0
   574 ;;Total ram usage:        0 bytes
   575 ;; Hardware stack levels required when called:   10
   576 ;; This function calls:
   577 ;;		_CLOCK_Enable
   578 ;;		_CONFIG_mcu
   579 ;;		_DEBUG_Pin0Enable
   580 ;;		_INT0_Enable
   581 ;;		_INTERRUPT_Enable
   582 ;;		_IR_Init
   583 ;;		_LED_Enable
   584 ;;		_OS_AddThreads
   585 ;;		_OS_Launch
   586 ;;		_OS_Scheduler
   587 ;;		_Wheel_Init
   588 ;; This function is called by:
   589 ;;		Startup code after reset
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text0
   594  000DDC                     __ptext0:
   595                           	opt stack 0
   596  000DDC                     _main:
   597                           	opt stack 21
   598                           
   599                           ;main.c: 40: CONFIG_mcu();
   600                           
   601                           ;incstack = 0
   602  000DDC  EC71  F009         	call	_CONFIG_mcu	;wreg free
   603                           
   604                           ;main.c: 42: OS_AddThreads( IR_Task,PICBOT_Task,CLOCK_Task,task4);
   605  000DE0  0E04               	movlw	low _IR_Task
   606  000DE2  0100               	movlb	0	; () banked
   607  000DE4  6FC1               	movwf	OS_AddThreads@func1& (0+255),b
   608  000DE6  0E09               	movlw	high _IR_Task
   609  000DE8  6FC2               	movwf	(OS_AddThreads@func1+1)& (0+255),b
   610  000DEA  0ED4               	movlw	low _PICBOT_Task
   611  000DEC  6FC3               	movwf	OS_AddThreads@func2& (0+255),b
   612  000DEE  0E09               	movlw	high _PICBOT_Task
   613  000DF0  6FC4               	movwf	(OS_AddThreads@func2+1)& (0+255),b
   614  000DF2  0E2C               	movlw	low _CLOCK_Task
   615  000DF4  6FC5               	movwf	OS_AddThreads@func3& (0+255),b
   616  000DF6  0E0E               	movlw	high _CLOCK_Task
   617  000DF8  6FC6               	movwf	(OS_AddThreads@func3+1)& (0+255),b
   618  000DFA  0E0A               	movlw	low _task4
   619  000DFC  6FC7               	movwf	OS_AddThreads@func4& (0+255),b
   620  000DFE  0E13               	movlw	high _task4
   621  000E00  6FC8               	movwf	(OS_AddThreads@func4+1)& (0+255),b
   622  000E02  EC2C  F006         	call	_OS_AddThreads	;wreg free
   623                           
   624                           ;main.c: 44: DEBUG_Pin0Enable();
   625  000E06  EC32  F00A         	call	_DEBUG_Pin0Enable	;wreg free
   626                           
   627                           ;main.c: 46: LED_Enable();
   628  000E0A  EC2C  F00A         	call	_LED_Enable	;wreg free
   629                           
   630                           ;main.c: 49: INT0_Enable();
   631  000E0E  EC28  F00A         	call	_INT0_Enable	;wreg free
   632                           
   633                           ;main.c: 51: CLOCK_Enable();
   634  000E12  EC35  F00A         	call	_CLOCK_Enable	;wreg free
   635                           
   636                           ;main.c: 53: INTERRUPT_Enable();
   637  000E16  EC2F  F00A         	call	_INTERRUPT_Enable	;wreg free
   638                           
   639                           ;main.c: 55: IR_Init();
   640  000E1A  ECFE  F009         	call	_IR_Init	;wreg free
   641                           
   642                           ;main.c: 57: Wheel_Init();
   643  000E1E  EC7C  F009         	call	_Wheel_Init	;wreg free
   644                           
   645                           ;main.c: 59: OS_Launch();
   646  000E22  ECC8  F008         	call	_OS_Launch	;wreg free
   647  000E26                     
   648                           ;main.c: 62: {
   649                           ;main.c: 63: OS_Scheduler();
   650  000E26  EC47  F005         	call	_OS_Scheduler	;wreg free
   651  000E2A  D7FD               	goto	l45
   652  000E2C                     __end_of_main:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           
   661 ;; *************** function _Wheel_Init *****************
   662 ;; Defined at:
   663 ;;		line 91 in file "wheel4d.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;		None
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		None
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   677 ;;      Params:         0       0       0       0       0       0       0       0       0
   678 ;;      Locals:         0       0       0       0       0       0       0       0       0
   679 ;;      Temps:          0       0       0       0       0       0       0       0       0
   680 ;;      Totals:         0       0       0       0       0       0       0       0       0
   681 ;;Total ram usage:        0 bytes
   682 ;; Hardware stack levels used:    1
   683 ;; Hardware stack levels required when called:    5
   684 ;; This function calls:
   685 ;;		Nothing
   686 ;; This function is called by:
   687 ;;		_main
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           	psect	text1
   692  0012F8                     __ptext1:
   693                           	opt stack 0
   694  0012F8                     _Wheel_Init:
   695                           	opt stack 25
   696                           
   697                           ;wheel4d.c: 93: TRISAbits.TRISA3 = 0;
   698                           
   699                           ;incstack = 0
   700  0012F8  9692               	bcf	3986,3,c	;volatile
   701                           
   702                           ;wheel4d.c: 94: TRISAbits.TRISA2 = 0;
   703  0012FA  9492               	bcf	3986,2,c	;volatile
   704                           
   705                           ;wheel4d.c: 95: TRISAbits.TRISA1 = 0;
   706  0012FC  9292               	bcf	3986,1,c	;volatile
   707                           
   708                           ;wheel4d.c: 96: TRISAbits.TRISA0 = 0;
   709  0012FE  9092               	bcf	3986,0,c	;volatile
   710                           
   711                           ;wheel4d.c: 98: TRISBbits.TRISB5 = 0;
   712  001300  9A93               	bcf	3987,5,c	;volatile
   713                           
   714                           ;wheel4d.c: 99: TRISBbits.TRISB4 = 0;
   715  001302  9893               	bcf	3987,4,c	;volatile
   716                           
   717                           ;wheel4d.c: 100: TRISBbits.TRISB3 = 0;
   718  001304  9693               	bcf	3987,3,c	;volatile
   719                           
   720                           ;wheel4d.c: 101: TRISBbits.TRISB2 = 0;
   721  001306  9493               	bcf	3987,2,c	;volatile
   722  001308  0012               	return		;funcret
   723  00130A                     __end_of_Wheel_Init:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732 ;; *************** function _OS_Scheduler *****************
   733 ;; Defined at:
   734 ;;		line 76 in file "os.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  PrvRunPt        2   25[BANK0 ] PTR struct tcb
   739 ;;		 -> NULL(0), tcbs(24), 
   740 ;;  sleep           1   27[BANK0 ] unsigned char 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   750 ;;      Params:         0       0       0       0       0       0       0       0       0
   751 ;;      Locals:         0       3       0       0       0       0       0       0       0
   752 ;;      Temps:          2       0       0       0       0       0       0       0       0
   753 ;;      Totals:         2       3       0       0       0       0       0       0       0
   754 ;;Total ram usage:        5 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; Hardware stack levels required when called:    9
   757 ;; This function calls:
   758 ;;		_CLOCK_Task
   759 ;;		_IR_Task
   760 ;;		_PICBOT_Task
   761 ;;		_task4
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text2
   768  000A8E                     __ptext2:
   769                           	opt stack 0
   770  000A8E                     _OS_Scheduler:
   771                           	opt stack 21
   772                           
   773                           ;os.c: 78: tcbType *PrvRunPt;
   774                           ;os.c: 79: uint8_t sleep = 0;
   775                           
   776                           ;incstack = 0
   777  000A8E  0E00               	movlw	0
   778  000A90  0100               	movlb	0	; () banked
   779  000A92  6FC7               	movwf	OS_Scheduler@sleep& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;os.c: 81: PrvRunPt = RunPt;
   783  000A94  C084  F0C5         	movff	_RunPt,OS_Scheduler@PrvRunPt
   784  000A98  C085  F0C6         	movff	_RunPt+1,OS_Scheduler@PrvRunPt+1
   785                           
   786                           ; BSR set to: 0
   787                           ;os.c: 82: RunPt = RunPt->next;
   788  000A9C  EE20 F002          	lfsr	2,2
   789  000AA0  5184               	movf	_RunPt& (0+255),w,b
   790  000AA2  26D9               	addwf	fsr2l,f,c
   791  000AA4  5185               	movf	(_RunPt+1)& (0+255),w,b
   792  000AA6  22DA               	addwfc	fsr2h,f,c
   793  000AA8  CFDE F084          	movff	postinc2,_RunPt
   794  000AAC  CFDD F085          	movff	postdec2,_RunPt+1
   795                           
   796                           ;os.c: 84: while(RunPt->blocked)
   797  000AB0  D01E               	goto	l67
   798  000AB2                     
   799                           ; BSR set to: 0
   800                           ;os.c: 85: {
   801                           ;os.c: 86: RunPt = RunPt->next;
   802                           
   803                           ; BSR set to: 0
   804  000AB2  EE20 F002          	lfsr	2,2
   805  000AB6  5184               	movf	_RunPt& (0+255),w,b
   806  000AB8  26D9               	addwf	fsr2l,f,c
   807  000ABA  5185               	movf	(_RunPt+1)& (0+255),w,b
   808  000ABC  22DA               	addwfc	fsr2h,f,c
   809  000ABE  CFDE F084          	movff	postinc2,_RunPt
   810  000AC2  CFDD F085          	movff	postdec2,_RunPt+1
   811                           
   812                           ; BSR set to: 0
   813                           ;os.c: 88: if (RunPt == PrvRunPt)
   814  000AC6  51C5               	movf	OS_Scheduler@PrvRunPt& (0+255),w,b
   815  000AC8  1984               	xorwf	_RunPt& (0+255),w,b
   816  000ACA  E111               	bnz	l3229
   817  000ACC  51C6               	movf	(OS_Scheduler@PrvRunPt+1)& (0+255),w,b
   818  000ACE  1985               	xorwf	(_RunPt+1)& (0+255),w,b
   819  000AD0  A4D8               	btfss	status,2,c
   820  000AD2  D00D               	goto	l67
   821                           
   822                           ; BSR set to: 0
   823                           ;os.c: 89: {
   824                           ;os.c: 90: if (RunPt->blocked)
   825  000AD4  EE20 F004          	lfsr	2,4
   826  000AD8  5184               	movf	_RunPt& (0+255),w,b
   827  000ADA  26D9               	addwf	fsr2l,f,c
   828  000ADC  5185               	movf	(_RunPt+1)& (0+255),w,b
   829  000ADE  22DA               	addwfc	fsr2h,f,c
   830  000AE0  50DE               	movf	postinc2,w,c
   831  000AE2  10DE               	iorwf	postinc2,w,c
   832  000AE4  B4D8               	btfsc	status,2,c
   833  000AE6  D00D               	goto	u1550
   834                           
   835                           ; BSR set to: 0
   836                           ;os.c: 91: {
   837                           ;os.c: 92: sleep = 1;
   838  000AE8  0E01               	movlw	1
   839  000AEA  6FC7               	movwf	OS_Scheduler@sleep& (0+255),b
   840                           
   841                           ; BSR set to: 0
   842                           ;os.c: 93: }
   843                           ;os.c: 94: break;
   844  000AEC  D00A               	goto	u1550
   845  000AEE                     l67:
   846  000AEE                     l3229:
   847                           
   848                           ; BSR set to: 0
   849  000AEE  EE20 F004          	lfsr	2,4
   850  000AF2  5184               	movf	_RunPt& (0+255),w,b
   851  000AF4  26D9               	addwf	fsr2l,f,c
   852  000AF6  5185               	movf	(_RunPt+1)& (0+255),w,b
   853  000AF8  22DA               	addwfc	fsr2h,f,c
   854  000AFA  50DE               	movf	postinc2,w,c
   855  000AFC  10DE               	iorwf	postinc2,w,c
   856  000AFE  A4D8               	btfss	status,2,c
   857  000B00  D7D8               	goto	l66
   858  000B02                     u1550:
   859                           
   860                           ; BSR set to: 0
   861                           ;os.c: 95: }
   862                           ;os.c: 96: }
   863                           ;os.c: 98: if (!sleep)
   864                           
   865                           ; BSR set to: 0
   866  000B02  51C7               	movf	OS_Scheduler@sleep& (0+255),w,b
   867  000B04  A4D8               	btfss	status,2,c
   868  000B06  0012               	return	
   869                           
   870                           ; BSR set to: 0
   871                           ;os.c: 99: RunPt->func();
   872  000B08  C084  FFD9         	movff	_RunPt,fsr2l
   873  000B0C  C085  FFDA         	movff	_RunPt+1,fsr2h
   874  000B10  D801               	call	u1578
   875  000B12  0012               	return	
   876  000B14                     u1578:
   877  000B14  0005               	push	
   878  000B16  6EFA               	movwf	pclath,c
   879  000B18  50DE               	movf	postinc2,w,c
   880  000B1A  6EFD               	movwf	tosl,c
   881  000B1C  50DE               	movf	postinc2,w,c
   882  000B1E  6EFE               	movwf	tosh,c
   883  000B20  50F8               	movf	tblptru,w,c
   884  000B22  6EFF               	movwf	tosu,c
   885  000B24  50FA               	movf	pclath,w,c
   886  000B26  0012               	return		;indir
   887  000B28                     __end_of_OS_Scheduler:
   888                           	opt stack 0
   889                           tosu	equ	0xFFF
   890                           tosh	equ	0xFFE
   891                           tosl	equ	0xFFD
   892                           pclath	equ	0xFFA
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postinc2	equ	0xFDE
   900                           postdec2	equ	0xFDD
   901                           fsr2h	equ	0xFDA
   902                           fsr2l	equ	0xFD9
   903                           status	equ	0xFD8
   904                           
   905 ;; *************** function _OS_Launch *****************
   906 ;; Defined at:
   907 ;;		line 63 in file "os.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   921 ;;      Params:         0       0       0       0       0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0       0       0       0       0
   924 ;;      Totals:         0       0       0       0       0       0       0       0       0
   925 ;;Total ram usage:        0 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    9
   928 ;; This function calls:
   929 ;;		_CLOCK_Task
   930 ;;		_IR_Task
   931 ;;		_PICBOT_Task
   932 ;;		_task4
   933 ;; This function is called by:
   934 ;;		_main
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text3
   939  001190                     __ptext3:
   940                           	opt stack 0
   941  001190                     _OS_Launch:
   942                           	opt stack 21
   943                           
   944                           ;os.c: 65: RunPt->func();
   945                           
   946                           ;incstack = 0
   947  001190  C084  FFD9         	movff	_RunPt,fsr2l
   948  001194  C085  FFDA         	movff	_RunPt+1,fsr2h
   949  001198  D801               	call	u1528
   950  00119A  0012               	return	
   951  00119C                     u1528:
   952  00119C  0005               	push	
   953  00119E  6EFA               	movwf	pclath,c
   954  0011A0  50DE               	movf	postinc2,w,c
   955  0011A2  6EFD               	movwf	tosl,c
   956  0011A4  50DE               	movf	postinc2,w,c
   957  0011A6  6EFE               	movwf	tosh,c
   958  0011A8  50F8               	movf	tblptru,w,c
   959  0011AA  6EFF               	movwf	tosu,c
   960  0011AC  50FA               	movf	pclath,w,c
   961  0011AE  0012               	return		;indir
   962  0011B0                     __end_of_OS_Launch:
   963                           	opt stack 0
   964                           tosu	equ	0xFFF
   965                           tosh	equ	0xFFE
   966                           tosl	equ	0xFFD
   967                           pclath	equ	0xFFA
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           postinc2	equ	0xFDE
   975                           postdec2	equ	0xFDD
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980 ;; *************** function _CLOCK_Task *****************
   981 ;; Defined at:
   982 ;;		line 12 in file "clock.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   996 ;;      Params:         0       0       0       0       0       0       0       0       0
   997 ;;      Locals:         0       0       0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0
   999 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    8
  1003 ;; This function calls:
  1004 ;;		_CLOCK_ReadTimer
  1005 ;;		_PICBOT_Stop
  1006 ;;		_SEMA_WaitForClock
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;;		_OS_Launch
  1010 ;;		_OS_Scheduler
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text4
  1015  000E2C                     __ptext4:
  1016                           	opt stack 0
  1017  000E2C                     _CLOCK_Task:
  1018                           	opt stack 21
  1019                           
  1020                           ;clock.c: 14: static uint8_t STATE_CLOCK = 0;
  1021                           ;clock.c: 16: switch(STATE_CLOCK)
  1022                           
  1023                           ;incstack = 0
  1024  000E2C  D01E               	goto	l241
  1025  000E2E                     
  1026                           ;clock.c: 19: if(SEMA_WaitForClock())
  1027  000E2E  EC22  F009         	call	_SEMA_WaitForClock	;wreg free
  1028  000E32  0900               	iorlw	0
  1029  000E34  A4D8               	btfss	status,2,c
  1030  000E36  0012               	return	
  1031                           
  1032                           ;clock.c: 22: STATE_CLOCK = 1;
  1033                           
  1034                           ;clock.c: 20: return;
  1035  000E38  0E01               	movlw	1
  1036  000E3A  0100               	movlb	0	; () banked
  1037  000E3C  6F8B               	movwf	CLOCK_Task@STATE_CLOCK& (0+255),b
  1038                           
  1039                           ;clock.c: 23: break;
  1040  000E3E  0012               	return	
  1041  000E40                     l246:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;clock.c: 27: if ( (INTCONbits.TMR0IF == 1) ||
  1045                           ;clock.c: 28: (CLOCK_ReadTimer() > 10000) )
  1046  000E40  B4F2               	btfsc	intcon,2,c	;volatile
  1047  000E42  D009               	goto	u1380
  1048                           
  1049                           ; BSR set to: 0
  1050  000E44  ECF7  F009         	call	_CLOCK_ReadTimer	;wreg free
  1051  000E48  0E11               	movlw	17
  1052  000E4A  0100               	movlb	0	; () banked
  1053  000E4C  5DC3               	subwf	?_CLOCK_ReadTimer& (0+255),w,b
  1054  000E4E  0E27               	movlw	39
  1055  000E50  59C4               	subwfb	(?_CLOCK_ReadTimer+1)& (0+255),w,b
  1056  000E52  A0D8               	btfss	status,0,c
  1057  000E54  0012               	return	
  1058  000E56                     u1380:
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;clock.c: 29: {
  1062                           ;clock.c: 30: INTCONbits.TMR0IF = 0;
  1063  000E56  94F2               	bcf	intcon,2,c	;volatile
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;clock.c: 31: PICBOT_Stop();
  1067  000E58  EC64  F009         	call	_PICBOT_Stop	;wreg free
  1068                           
  1069                           ;clock.c: 32: STATE_CLOCK = 0;
  1070  000E5C  0E00               	movlw	0
  1071  000E5E  0100               	movlb	0	; () banked
  1072  000E60  6F8B               	movwf	CLOCK_Task@STATE_CLOCK& (0+255),b
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;clock.c: 33: }
  1076                           ;clock.c: 34: break;
  1077  000E62  0012               	return	
  1078  000E64                     
  1079                           ; BSR set to: 0
  1080                           ;clock.c: 37: STATE_CLOCK = 0;
  1081                           
  1082                           ; BSR set to: 0
  1083  000E64  0E00               	movlw	0
  1084  000E66  6F8B               	movwf	CLOCK_Task@STATE_CLOCK& (0+255),b
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;clock.c: 40: }
  1088                           
  1089                           ;clock.c: 38: break;
  1090  000E68  0012               	return	
  1091  000E6A                     l241:
  1092                           
  1093                           ; BSR set to: 0
  1094  000E6A  0100               	movlb	0	; () banked
  1095  000E6C  518B               	movf	CLOCK_Task@STATE_CLOCK& (0+255),w,b
  1096                           
  1097                           ; Switch size 1, requested type "space"
  1098                           ; Number of cases is 2, Range of values is 0 to 1
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte            7     4 (average)
  1102                           ;	Chosen strategy is simple_byte
  1103  000E6E  0A00               	xorlw	0	; case 0
  1104  000E70  B4D8               	btfsc	status,2,c
  1105  000E72  D7DD               	goto	l242
  1106  000E74  0A01               	xorlw	1	; case 1
  1107  000E76  B4D8               	btfsc	status,2,c
  1108  000E78  D7E3               	goto	l246
  1109  000E7A  D7F4               	goto	l250
  1110  000E7C                     __end_of_CLOCK_Task:
  1111                           	opt stack 0
  1112                           tosu	equ	0xFFF
  1113                           tosh	equ	0xFFE
  1114                           tosl	equ	0xFFD
  1115                           pclath	equ	0xFFA
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           intcon	equ	0xFF2
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postinc2	equ	0xFDE
  1124                           postdec2	equ	0xFDD
  1125                           fsr2h	equ	0xFDA
  1126                           fsr2l	equ	0xFD9
  1127                           status	equ	0xFD8
  1128                           
  1129 ;; *************** function _PICBOT_Task *****************
  1130 ;; Defined at:
  1131 ;;		line 10 in file "PICBot.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  command         2   39[COMRAM] unsigned int 
  1136 ;;  status          1   38[COMRAM] enum E128
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1146 ;;      Params:         0       0       0       0       0       0       0       0       0
  1147 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1148 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1149 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1150 ;;Total ram usage:        5 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    8
  1153 ;; This function calls:
  1154 ;;		_DEBUG_Pin0Toggle
  1155 ;;		_Fifo_Get
  1156 ;;		_PICBOT_Stop
  1157 ;;		_PICBOT_fwd
  1158 ;;		_PICBOT_lft
  1159 ;;		_PICBOT_rgt
  1160 ;;		_PICBOT_rvs
  1161 ;;		_SEMA_BlockOnPICBot
  1162 ;;		_SEMA_SetClock
  1163 ;;		_SEMA_WaitForPICBot
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;;		_OS_Launch
  1167 ;;		_OS_Scheduler
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  0009D4                     __ptext5:
  1173                           	opt stack 0
  1174  0009D4                     _PICBOT_Task:
  1175                           	opt stack 21
  1176                           
  1177                           ;PICBot.c: 12: uint16_t command;
  1178                           ;PICBot.c: 13: FIFO_STATUS status;
  1179                           ;PICBot.c: 15: if(SEMA_WaitForPICBot())
  1180                           
  1181                           ;incstack = 0
  1182  0009D4  EC06  F009         	call	_SEMA_WaitForPICBot	;wreg free
  1183  0009D8  0900               	iorlw	0
  1184  0009DA  A4D8               	btfss	status,2,c
  1185  0009DC  0012               	return	
  1186                           
  1187                           ;PICBot.c: 18: status = Fifo_Get(&command);
  1188                           
  1189                           ;PICBot.c: 16: return;
  1190  0009DE  0E28               	movlw	low PICBOT_Task@command
  1191  0009E0  0100               	movlb	0	; () banked
  1192  0009E2  6FC1               	movwf	Fifo_Get@datapt& (0+255),b
  1193  0009E4  0E00               	movlw	high PICBOT_Task@command
  1194  0009E6  6FC2               	movwf	(Fifo_Get@datapt+1)& (0+255),b
  1195  0009E8  EC3A  F008         	call	_Fifo_Get	;wreg free
  1196  0009EC  6E27               	movwf	PICBOT_Task@status,c
  1197                           
  1198                           ;PICBot.c: 20: if(status == FIFO_FAIL)
  1199  0009EE  5027               	movf	PICBOT_Task@status,w,c
  1200  0009F0  A4D8               	btfss	status,2,c
  1201  0009F2  D01F               	goto	l501
  1202                           
  1203                           ;PICBot.c: 21: {
  1204                           ;PICBot.c: 23: SEMA_BlockOnPICBot();
  1205  0009F4  EC9F  F009         	call	_SEMA_BlockOnPICBot	;wreg free
  1206                           
  1207                           ;PICBot.c: 24: return;
  1208  0009F8  0012               	return	
  1209  0009FA                     
  1210                           ;PICBot.c: 30: DEBUG_Pin0Toggle();
  1211  0009FA  EC14  F009         	call	_DEBUG_Pin0Toggle	;wreg free
  1212                           
  1213                           ;PICBot.c: 31: PICBOT_fwd();
  1214  0009FE  EC57  F009         	call	_PICBOT_fwd	;wreg free
  1215                           
  1216                           ;PICBot.c: 32: SEMA_SetClock();
  1217  000A02  EC97  F009         	call	_SEMA_SetClock	;wreg free
  1218                           
  1219                           ;PICBot.c: 33: break;
  1220  000A06  0012               	return	
  1221  000A08                     
  1222                           ;PICBot.c: 36: PICBOT_rvs();
  1223  000A08  EC30  F009         	call	_PICBOT_rvs	;wreg free
  1224                           
  1225                           ;PICBot.c: 37: SEMA_SetClock();
  1226  000A0C  EC97  F009         	call	_SEMA_SetClock	;wreg free
  1227                           
  1228                           ;PICBot.c: 38: break;
  1229  000A10  0012               	return	
  1230  000A12                     
  1231                           ;PICBot.c: 41: PICBOT_rgt();
  1232  000A12  EC3D  F009         	call	_PICBOT_rgt	;wreg free
  1233                           
  1234                           ;PICBot.c: 42: SEMA_SetClock();
  1235  000A16  EC97  F009         	call	_SEMA_SetClock	;wreg free
  1236                           
  1237                           ;PICBot.c: 43: break;
  1238  000A1A  0012               	return	
  1239  000A1C                     
  1240                           ;PICBot.c: 46: PICBOT_lft();
  1241  000A1C  EC4A  F009         	call	_PICBOT_lft	;wreg free
  1242                           
  1243                           ;PICBot.c: 47: SEMA_SetClock();
  1244  000A20  EC97  F009         	call	_SEMA_SetClock	;wreg free
  1245                           
  1246                           ;PICBot.c: 48: break;
  1247  000A24  0012               	return	
  1248  000A26                     
  1249                           ;PICBot.c: 51: PICBOT_Stop();
  1250  000A26  EC64  F009         	call	_PICBOT_Stop	;wreg free
  1251                           
  1252                           ;PICBot.c: 52: break;
  1253  000A2A  0012               	return	
  1254  000A2C                     
  1255                           ;PICBot.c: 55: PICBOT_Stop();
  1256  000A2C  EC64  F009         	call	_PICBOT_Stop	;wreg free
  1257                           
  1258                           ;PICBot.c: 57: }
  1259                           
  1260                           ;PICBot.c: 56: break;
  1261  000A30  0012               	return	
  1262  000A32                     l501:
  1263  000A32  C028  F025         	movff	PICBOT_Task@command,??_PICBOT_Task
  1264  000A36  C029  F026         	movff	PICBOT_Task@command+1,??_PICBOT_Task+1
  1265                           
  1266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  1267                           ; Switch size 1, requested type "space"
  1268                           ; Number of cases is 5, Range of values is 97 to 241
  1269                           ; switch strategies available:
  1270                           ; Name         Instructions Cycles
  1271                           ; simple_byte           16     9 (average)
  1272                           ;	Chosen strategy is simple_byte
  1273  000A3A  5026               	movf	??_PICBOT_Task+1,w,c
  1274  000A3C  0A61               	xorlw	97	; case 97
  1275  000A3E  B4D8               	btfsc	status,2,c
  1276  000A40  D00D               	goto	l3403
  1277  000A42  0AA8               	xorlw	168	; case 201
  1278  000A44  B4D8               	btfsc	status,2,c
  1279  000A46  D00F               	goto	l3405
  1280  000A48  0A18               	xorlw	24	; case 209
  1281  000A4A  B4D8               	btfsc	status,2,c
  1282  000A4C  D011               	goto	l3407
  1283  000A4E  0A38               	xorlw	56	; case 233
  1284  000A50  B4D8               	btfsc	status,2,c
  1285  000A52  D013               	goto	l3409
  1286  000A54  0A18               	xorlw	24	; case 241
  1287  000A56  B4D8               	btfsc	status,2,c
  1288  000A58  D015               	goto	l3411
  1289  000A5A  D7E8               	goto	l508
  1290  000A5C                     l3403:
  1291                           
  1292                           ; Switch size 1, requested type "space"
  1293                           ; Number of cases is 1, Range of values is 15 to 15
  1294                           ; switch strategies available:
  1295                           ; Name         Instructions Cycles
  1296                           ; simple_byte            4     3 (average)
  1297                           ;	Chosen strategy is simple_byte
  1298  000A5C  5025               	movf	??_PICBOT_Task,w,c
  1299  000A5E  0A0F               	xorlw	15	; case 15
  1300  000A60  B4D8               	btfsc	status,2,c
  1301  000A62  D7CB               	goto	l502
  1302  000A64  D7E3               	goto	l508
  1303  000A66                     l3405:
  1304                           
  1305                           ; Switch size 1, requested type "space"
  1306                           ; Number of cases is 1, Range of values is 15 to 15
  1307                           ; switch strategies available:
  1308                           ; Name         Instructions Cycles
  1309                           ; simple_byte            4     3 (average)
  1310                           ;	Chosen strategy is simple_byte
  1311  000A66  5025               	movf	??_PICBOT_Task,w,c
  1312  000A68  0A0F               	xorlw	15	; case 15
  1313  000A6A  B4D8               	btfsc	status,2,c
  1314  000A6C  D7D2               	goto	l505
  1315  000A6E  D7DE               	goto	l508
  1316  000A70                     l3407:
  1317                           
  1318                           ; Switch size 1, requested type "space"
  1319                           ; Number of cases is 1, Range of values is 15 to 15
  1320                           ; switch strategies available:
  1321                           ; Name         Instructions Cycles
  1322                           ; simple_byte            4     3 (average)
  1323                           ;	Chosen strategy is simple_byte
  1324  000A70  5025               	movf	??_PICBOT_Task,w,c
  1325  000A72  0A0F               	xorlw	15	; case 15
  1326  000A74  B4D8               	btfsc	status,2,c
  1327  000A76  D7C8               	goto	l504
  1328  000A78  D7D9               	goto	l508
  1329  000A7A                     l3409:
  1330                           
  1331                           ; Switch size 1, requested type "space"
  1332                           ; Number of cases is 1, Range of values is 15 to 15
  1333                           ; switch strategies available:
  1334                           ; Name         Instructions Cycles
  1335                           ; simple_byte            4     3 (average)
  1336                           ;	Chosen strategy is simple_byte
  1337  000A7A  5025               	movf	??_PICBOT_Task,w,c
  1338  000A7C  0A0F               	xorlw	15	; case 15
  1339  000A7E  B4D8               	btfsc	status,2,c
  1340  000A80  D7D2               	goto	l507
  1341  000A82  D7D4               	goto	l508
  1342  000A84                     l3411:
  1343                           
  1344                           ; Switch size 1, requested type "space"
  1345                           ; Number of cases is 1, Range of values is 15 to 15
  1346                           ; switch strategies available:
  1347                           ; Name         Instructions Cycles
  1348                           ; simple_byte            4     3 (average)
  1349                           ;	Chosen strategy is simple_byte
  1350  000A84  5025               	movf	??_PICBOT_Task,w,c
  1351  000A86  0A0F               	xorlw	15	; case 15
  1352  000A88  B4D8               	btfsc	status,2,c
  1353  000A8A  D7C8               	goto	l506
  1354  000A8C  D7CF               	goto	l508
  1355  000A8E                     __end_of_PICBOT_Task:
  1356                           	opt stack 0
  1357                           tosu	equ	0xFFF
  1358                           tosh	equ	0xFFE
  1359                           tosl	equ	0xFFD
  1360                           pclath	equ	0xFFA
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           intcon	equ	0xFF2
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postinc2	equ	0xFDE
  1369                           postdec2	equ	0xFDD
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _IR_Task *****************
  1375 ;; Defined at:
  1376 ;;		line 45 in file "irdetect.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1390 ;;      Params:         0       0       0       0       0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1392 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1393 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    8
  1397 ;; This function calls:
  1398 ;;		_CLOCK_ReadTimer
  1399 ;;		_SEMA_BlockOnIRdetect
  1400 ;;		_ir_Begin
  1401 ;;		_ir_bitcollect
  1402 ;;		_ir_end
  1403 ;;		_ir_terminate
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;;		_OS_Launch
  1407 ;;		_OS_Scheduler
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text6
  1412  000904                     __ptext6:
  1413                           	opt stack 0
  1414  000904                     _IR_Task:
  1415                           	opt stack 21
  1416                           
  1417                           ;irdetect.c: 47: static uint8_t prvLevel = 1;
  1418                           ;irdetect.c: 49: irstate.Input = 0xFF;
  1419                           
  1420                           ;incstack = 0
  1421  000904  0100               	movlb	0	; () banked
  1422  000906  6982               	setf	_irstate& (0+255),b
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;irdetect.c: 51: if ( (irhandle.level == 1) && (CLOCK_ReadTimer() > 400))
  1426  000908  05A6               	decf	(_irhandle+2)& (0+255),w,b
  1427  00090A  A4D8               	btfss	status,2,c
  1428  00090C  D00E               	goto	l304
  1429                           
  1430                           ; BSR set to: 0
  1431  00090E  ECF7  F009         	call	_CLOCK_ReadTimer	;wreg free
  1432  000912  0E91               	movlw	145
  1433  000914  0100               	movlb	0	; () banked
  1434  000916  5DC3               	subwf	?_CLOCK_ReadTimer& (0+255),w,b
  1435  000918  0E01               	movlw	1
  1436  00091A  59C4               	subwfb	(?_CLOCK_ReadTimer+1)& (0+255),w,b
  1437  00091C  A0D8               	btfss	status,0,c
  1438  00091E  D005               	goto	l304
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;irdetect.c: 52: {
  1442                           ;irdetect.c: 53: irstate.Input = 2;
  1443  000920  0E02               	movlw	2
  1444  000922  6F82               	movwf	_irstate& (0+255),b
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;irdetect.c: 54: SEMA_BlockOnIRdetect();
  1448  000924  ECB7  F009         	call	_SEMA_BlockOnIRdetect	;wreg free
  1449                           
  1450                           ;irdetect.c: 56: }
  1451  000928  D020               	goto	l309
  1452  00092A                     l304:
  1453                           
  1454                           ;irdetect.c: 57: else if (!(irhandle.level == prvLevel ))
  1455  00092A  0100               	movlb	0	; () banked
  1456  00092C  51C9               	movf	IR_Task@prvLevel& (0+255),w,b
  1457  00092E  19A6               	xorwf	(_irhandle+2)& (0+255),w,b
  1458  000930  B4D8               	btfsc	status,2,c
  1459  000932  D01B               	goto	l309
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;irdetect.c: 58: {
  1463                           ;irdetect.c: 59: prvLevel = irhandle.level;
  1464  000934  C0A6  F0C9         	movff	_irhandle+2,IR_Task@prvLevel
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;irdetect.c: 61: if( (irhandle.level == 0) && (irhandle.dtime > 300))
  1468  000938  51A6               	movf	(_irhandle+2)& (0+255),w,b
  1469  00093A  A4D8               	btfss	status,2,c
  1470  00093C  D008               	goto	l307
  1471                           
  1472                           ; BSR set to: 0
  1473  00093E  0E2D               	movlw	45
  1474  000940  5DA4               	subwf	_irhandle& (0+255),w,b
  1475  000942  0E01               	movlw	1
  1476  000944  59A5               	subwfb	(_irhandle+1)& (0+255),w,b
  1477  000946  A0D8               	btfss	status,0,c
  1478  000948  D002               	goto	l307
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;irdetect.c: 62: {
  1482                           ;irdetect.c: 64: irstate.Input = 0;
  1483  00094A  0E00               	movlw	0
  1484  00094C  D00D               	goto	L1
  1485  00094E                     l307:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;irdetect.c: 66: else if( (irhandle.dtime > 20) && (irhandle.dtime < 300))
  1489                           
  1490                           ; BSR set to: 0
  1491  00094E  51A5               	movf	(_irhandle+1)& (0+255),w,b
  1492  000950  E104               	bnz	u1440
  1493  000952  0E15               	movlw	21
  1494  000954  5DA4               	subwf	_irhandle& (0+255),w,b
  1495  000956  A0D8               	btfss	status,0,c
  1496  000958  D008               	goto	l309
  1497  00095A                     u1440:
  1498                           
  1499                           ; BSR set to: 0
  1500  00095A  0E2C               	movlw	44
  1501  00095C  5DA4               	subwf	_irhandle& (0+255),w,b
  1502  00095E  0E01               	movlw	1
  1503  000960  59A5               	subwfb	(_irhandle+1)& (0+255),w,b
  1504  000962  B0D8               	btfsc	status,0,c
  1505  000964  D002               	goto	l309
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;irdetect.c: 67: {
  1509                           ;irdetect.c: 68: irstate.Input = 1;
  1510  000966  0E01               	movlw	1
  1511  000968                     L1:
  1512  000968  6F82               	movwf	_irstate& (0+255),b
  1513  00096A                     l309:
  1514                           
  1515                           ;irdetect.c: 69: }
  1516                           ;irdetect.c: 72: }
  1517                           ;irdetect.c: 74: if (irstate.Input != 0xFF)
  1518                           
  1519                           ; BSR set to: 0
  1520                           
  1521                           ; BSR set to: 0
  1522                           
  1523                           ; BSR set to: 0
  1524                           
  1525                           ; BSR set to: 0
  1526  00096A  0100               	movlb	0	; () banked
  1527  00096C  2982               	incf	_irstate& (0+255),w,b
  1528  00096E  B4D8               	btfsc	status,2,c
  1529  000970  0012               	return	
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;irdetect.c: 75: {
  1533                           ;irdetect.c: 76: irstate.state = IRSTATEMACHINE[irstate.state].Next[irstate.Input ];
  1534  000972  5182               	movf	_irstate& (0+255),w,b
  1535  000974  0D01               	mullw	1
  1536  000976  0E02               	movlw	2
  1537  000978  26F3               	addwf	prodl,f,c
  1538  00097A  0E00               	movlw	0
  1539  00097C  22F4               	addwfc	prodh,f,c
  1540  00097E  0E01               	movlw	low _IRSTATEMACHINE
  1541  000980  6E26               	movwf	??_IR_Task& (0+255),c
  1542  000982  0E08               	movlw	high _IRSTATEMACHINE
  1543  000984  6E27               	movwf	(??_IR_Task+1)& (0+255),c
  1544  000986  50F3               	movf	prodl,w,c
  1545  000988  2626               	addwf	??_IR_Task,f,c
  1546  00098A  50F4               	movf	prodh,w,c
  1547  00098C  2227               	addwfc	??_IR_Task+1,f,c
  1548  00098E  5183               	movf	(_irstate+1)& (0+255),w,b
  1549  000990  0D06               	mullw	6
  1550  000992  50F3               	movf	prodl,w,c
  1551  000994  2626               	addwf	??_IR_Task,f,c
  1552  000996  50F4               	movf	prodh,w,c
  1553  000998  2227               	addwfc	??_IR_Task+1,f,c
  1554  00099A  C026  FFF6         	movff	??_IR_Task,tblptrl
  1555  00099E  C027  FFF7         	movff	??_IR_Task+1,tblptrh
  1556  0009A2                     	if	0	;tblptru may be non-zero
  1557  0009A2                     	endif
  1558  0009A2                     	if	0	;tblptru may be non-zero
  1559  0009A2                     	endif
  1560  0009A2  0008               	tblrd		*
  1561  0009A4  CFF5 F083          	movff	tablat,_irstate+1
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;irdetect.c: 78: (IRSTATEMACHINE[irstate.state].Output_Func)();
  1565  0009A8  5183               	movf	(_irstate+1)& (0+255),w,b
  1566  0009AA  0D06               	mullw	6
  1567  0009AC  0E01               	movlw	low _IRSTATEMACHINE
  1568  0009AE  24F3               	addwf	prodl,w,c
  1569  0009B0  6EF6               	movwf	tblptrl,c
  1570  0009B2  0E08               	movlw	high _IRSTATEMACHINE
  1571  0009B4  20F4               	addwfc	prodh,w,c
  1572  0009B6  6EF7               	movwf	tblptrh,c
  1573  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  1574  0009B8                     	endif
  1575  0009B8  D801               	call	u1478
  1576  0009BA  0012               	return	
  1577  0009BC                     u1478:
  1578  0009BC  0005               	push	
  1579  0009BE  6EFA               	movwf	pclath,c
  1580  0009C0  0009               	tblrd		*+
  1581  0009C2  50F5               	movf	tablat,w,c
  1582  0009C4  6EFD               	movwf	tosl,c
  1583  0009C6  0009               	tblrd		*+
  1584  0009C8  50F5               	movf	tablat,w,c
  1585  0009CA  6EFE               	movwf	tosh,c
  1586  0009CC  50F8               	movf	tblptru,w,c
  1587  0009CE  6EFF               	movwf	tosu,c
  1588  0009D0  50FA               	movf	pclath,w,c
  1589  0009D2  0012               	return		;indir
  1590  0009D4                     __end_of_IR_Task:
  1591                           	opt stack 0
  1592                           tosu	equ	0xFFF
  1593                           tosh	equ	0xFFE
  1594                           tosl	equ	0xFFD
  1595                           pclath	equ	0xFFA
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           intcon	equ	0xFF2
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _task4 *****************
  1612 ;; Defined at:
  1613 ;;		line 68 in file "main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    7
  1634 ;; This function calls:
  1635 ;;		_SEMA_WaitForTask4
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;;		_OS_Launch
  1639 ;;		_OS_Scheduler
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text7
  1644  00130A                     __ptext7:
  1645                           	opt stack 0
  1646  00130A                     _task4:
  1647                           	opt stack 22
  1648                           
  1649                           ;main.c: 71: if(SEMA_WaitForTask4())
  1650                           
  1651                           ;incstack = 0
  1652  00130A  ECF8  F008         	call	_SEMA_WaitForTask4	;wreg free
  1653  00130E  0900               	iorlw	0
  1654  001310  A4D8               	btfss	status,2,c
  1655  001312  0012               	return	
  1656                           
  1657                           ;main.c: 74: l++;
  1658                           
  1659                           ;main.c: 72: return;
  1660  001314  0100               	movlb	0	; () banked
  1661  001316  4B86               	infsnz	_l& (0+255),f,b
  1662  001318  2B87               	incf	(_l+1)& (0+255),f,b
  1663  00131A  0012               	return		;funcret
  1664  00131C                     __end_of_task4:
  1665                           	opt stack 0
  1666                           tosu	equ	0xFFF
  1667                           tosh	equ	0xFFE
  1668                           tosl	equ	0xFFD
  1669                           pclath	equ	0xFFA
  1670                           tblptru	equ	0xFF8
  1671                           tblptrh	equ	0xFF7
  1672                           tblptrl	equ	0xFF6
  1673                           tablat	equ	0xFF5
  1674                           prodh	equ	0xFF4
  1675                           prodl	equ	0xFF3
  1676                           intcon	equ	0xFF2
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           postinc2	equ	0xFDE
  1680                           postdec2	equ	0xFDD
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _SEMA_WaitForTask4 *****************
  1686 ;; Defined at:
  1687 ;;		line 108 in file "sema.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      unsigned char 
  1694 ;; Registers used:
  1695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0
  1702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1704 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1705 ;;Total ram usage:        0 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    6
  1708 ;; This function calls:
  1709 ;;		_OS_Wait
  1710 ;; This function is called by:
  1711 ;;		_task4
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text8
  1716  0011F0                     __ptext8:
  1717                           	opt stack 0
  1718  0011F0                     _SEMA_WaitForTask4:
  1719                           	opt stack 22
  1720                           
  1721                           ;sema.c: 110: if(OS_Wait(&sema_Task4))
  1722                           
  1723                           ;incstack = 0
  1724  0011F0  0EA7               	movlw	low _sema_Task4
  1725  0011F2  0100               	movlb	0	; () banked
  1726  0011F4  6FC1               	movwf	OS_Wait@semaPt& (0+255),b
  1727  0011F6  0E00               	movlw	high _sema_Task4
  1728  0011F8  6FC2               	movwf	(OS_Wait@semaPt+1)& (0+255),b
  1729  0011FA  EC66  F007         	call	_OS_Wait	;wreg free
  1730  0011FE  0900               	iorlw	0
  1731  001200  B4D8               	btfsc	status,2,c
  1732  001202  D002               	goto	l440
  1733                           
  1734                           ;sema.c: 111: return(1);
  1735  001204  0E01               	movlw	1
  1736  001206  0012               	return	
  1737  001208                     l440:
  1738                           
  1739                           ;sema.c: 112: else
  1740                           ;sema.c: 113: return(0);
  1741  001208  0E00               	movlw	0
  1742  00120A  0012               	return	
  1743  00120C                     __end_of_SEMA_WaitForTask4:
  1744                           	opt stack 0
  1745                           tosu	equ	0xFFF
  1746                           tosh	equ	0xFFE
  1747                           tosl	equ	0xFFD
  1748                           pclath	equ	0xFFA
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           intcon	equ	0xFF2
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           postinc2	equ	0xFDE
  1759                           postdec2	equ	0xFDD
  1760                           fsr2h	equ	0xFDA
  1761                           fsr2l	equ	0xFD9
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _SEMA_WaitForPICBot *****************
  1765 ;; Defined at:
  1766 ;;		line 35 in file "sema.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      unsigned char 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1780 ;;      Params:         0       0       0       0       0       0       0       0       0
  1781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    6
  1787 ;; This function calls:
  1788 ;;		_OS_Wait
  1789 ;; This function is called by:
  1790 ;;		_PICBOT_Task
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text9
  1795  00120C                     __ptext9:
  1796                           	opt stack 0
  1797  00120C                     _SEMA_WaitForPICBot:
  1798                           	opt stack 22
  1799                           
  1800                           ;sema.c: 37: if(OS_Wait(&sema_picbot))
  1801                           
  1802                           ;incstack = 0
  1803  00120C  0EAB               	movlw	low _sema_picbot
  1804  00120E  0100               	movlb	0	; () banked
  1805  001210  6FC1               	movwf	OS_Wait@semaPt& (0+255),b
  1806  001212  0E00               	movlw	high _sema_picbot
  1807  001214  6FC2               	movwf	(OS_Wait@semaPt+1)& (0+255),b
  1808  001216  EC66  F007         	call	_OS_Wait	;wreg free
  1809  00121A  0900               	iorlw	0
  1810  00121C  B4D8               	btfsc	status,2,c
  1811  00121E  D002               	goto	l396
  1812                           
  1813                           ;sema.c: 38: return(1);
  1814  001220  0E01               	movlw	1
  1815  001222  0012               	return	
  1816  001224                     l396:
  1817                           
  1818                           ;sema.c: 39: else
  1819                           ;sema.c: 40: return(0);
  1820  001224  0E00               	movlw	0
  1821  001226  0012               	return	
  1822  001228                     __end_of_SEMA_WaitForPICBot:
  1823                           	opt stack 0
  1824                           tosu	equ	0xFFF
  1825                           tosh	equ	0xFFE
  1826                           tosl	equ	0xFFD
  1827                           pclath	equ	0xFFA
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _SEMA_SetClock *****************
  1844 ;; Defined at:
  1845 ;;		line 48 in file "sema.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1862 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1863 ;;Total ram usage:        0 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    6
  1866 ;; This function calls:
  1867 ;;		_OS_Signal
  1868 ;; This function is called by:
  1869 ;;		_PICBOT_Task
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text10
  1874  00132E                     __ptext10:
  1875                           	opt stack 0
  1876  00132E                     _SEMA_SetClock:
  1877                           	opt stack 22
  1878                           
  1879                           ;sema.c: 50: OS_Signal(&sema_clock);
  1880                           
  1881                           ;incstack = 0
  1882  00132E  0EAA               	movlw	low _sema_clock
  1883  001330  0100               	movlb	0	; () banked
  1884  001332  6FC1               	movwf	OS_Signal@semaPt& (0+255),b
  1885  001334  0E00               	movlw	high _sema_clock
  1886  001336  6FC2               	movwf	(OS_Signal@semaPt+1)& (0+255),b
  1887  001338  EC94  F005         	call	_OS_Signal	;wreg free
  1888  00133C  0012               	return		;funcret
  1889  00133E                     __end_of_SEMA_SetClock:
  1890                           	opt stack 0
  1891                           tosu	equ	0xFFF
  1892                           tosh	equ	0xFFE
  1893                           tosl	equ	0xFFD
  1894                           pclath	equ	0xFFA
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           intcon	equ	0xFF2
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           postinc2	equ	0xFDE
  1905                           postdec2	equ	0xFDD
  1906                           fsr2h	equ	0xFDA
  1907                           fsr2l	equ	0xFD9
  1908                           status	equ	0xFD8
  1909                           
  1910 ;; *************** function _SEMA_BlockOnPICBot *****************
  1911 ;; Defined at:
  1912 ;;		line 43 in file "sema.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0
  1927 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1929 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1930 ;;Total ram usage:        0 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    6
  1933 ;; This function calls:
  1934 ;;		_OS_Block
  1935 ;; This function is called by:
  1936 ;;		_PICBOT_Task
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text11
  1941  00133E                     __ptext11:
  1942                           	opt stack 0
  1943  00133E                     _SEMA_BlockOnPICBot:
  1944                           	opt stack 22
  1945                           
  1946                           ;sema.c: 45: OS_Block(&sema_picbot);
  1947                           
  1948                           ;incstack = 0
  1949  00133E  0EAB               	movlw	low _sema_picbot
  1950  001340  0100               	movlb	0	; () banked
  1951  001342  6FC1               	movwf	OS_Block@semaPt& (0+255),b
  1952  001344  0E00               	movlw	high _sema_picbot
  1953  001346  6FC2               	movwf	(OS_Block@semaPt+1)& (0+255),b
  1954  001348  ECA4  F008         	call	_OS_Block	;wreg free
  1955  00134C  0012               	return		;funcret
  1956  00134E                     __end_of_SEMA_BlockOnPICBot:
  1957                           	opt stack 0
  1958                           tosu	equ	0xFFF
  1959                           tosh	equ	0xFFE
  1960                           tosl	equ	0xFFD
  1961                           pclath	equ	0xFFA
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           prodh	equ	0xFF4
  1967                           prodl	equ	0xFF3
  1968                           intcon	equ	0xFF2
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           postinc2	equ	0xFDE
  1972                           postdec2	equ	0xFDD
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _PICBOT_rvs *****************
  1978 ;; Defined at:
  1979 ;;		line 77 in file "PICBot.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1996 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1997 ;;Total ram usage:        0 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    7
  2000 ;; This function calls:
  2001 ;;		_Wheel_Back_Left
  2002 ;;		_Wheel_Back_Right
  2003 ;;		_Wheel_Front_Left
  2004 ;;		_Wheel_Front_Right
  2005 ;; This function is called by:
  2006 ;;		_PICBOT_Task
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text12
  2011  001260                     __ptext12:
  2012                           	opt stack 0
  2013  001260                     _PICBOT_rvs:
  2014                           	opt stack 21
  2015                           
  2016                           ;PICBot.c: 80: Wheel_Front_Right(reverse);
  2017                           
  2018                           ;incstack = 0
  2019  001260  0E02               	movlw	2
  2020  001262  ECB2  F007         	call	_Wheel_Front_Right
  2021                           
  2022                           ;PICBot.c: 81: Wheel_Back_Right(reverse);
  2023  001266  0E02               	movlw	2
  2024  001268  ECF6  F007         	call	_Wheel_Back_Right
  2025                           
  2026                           ;PICBot.c: 82: Wheel_Front_Left(reverse);
  2027  00126C  0E02               	movlw	2
  2028  00126E  ECD4  F007         	call	_Wheel_Front_Left
  2029                           
  2030                           ;PICBot.c: 83: Wheel_Back_Left(reverse);
  2031  001272  0E02               	movlw	2
  2032  001274  EC18  F008         	call	_Wheel_Back_Left
  2033  001278  0012               	return		;funcret
  2034  00127A                     __end_of_PICBOT_rvs:
  2035                           	opt stack 0
  2036                           tosu	equ	0xFFF
  2037                           tosh	equ	0xFFE
  2038                           tosl	equ	0xFFD
  2039                           pclath	equ	0xFFA
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           intcon	equ	0xFF2
  2047                           postinc0	equ	0xFEE
  2048                           wreg	equ	0xFE8
  2049                           postinc2	equ	0xFDE
  2050                           postdec2	equ	0xFDD
  2051                           fsr2h	equ	0xFDA
  2052                           fsr2l	equ	0xFD9
  2053                           status	equ	0xFD8
  2054                           
  2055 ;; *************** function _PICBOT_rgt *****************
  2056 ;; Defined at:
  2057 ;;		line 94 in file "PICBot.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;		None
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0
  2072 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2074 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2075 ;;Total ram usage:        0 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    7
  2078 ;; This function calls:
  2079 ;;		_Wheel_Back_Left
  2080 ;;		_Wheel_Back_Right
  2081 ;;		_Wheel_Front_Left
  2082 ;;		_Wheel_Front_Right
  2083 ;; This function is called by:
  2084 ;;		_PICBOT_Task
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text13
  2089  00127A                     __ptext13:
  2090                           	opt stack 0
  2091  00127A                     _PICBOT_rgt:
  2092                           	opt stack 21
  2093                           
  2094                           ;PICBot.c: 96: Wheel_Front_Right(stop);
  2095                           
  2096                           ;incstack = 0
  2097  00127A  0E00               	movlw	0
  2098  00127C  ECB2  F007         	call	_Wheel_Front_Right
  2099                           
  2100                           ;PICBot.c: 97: Wheel_Back_Right(reverse);
  2101  001280  0E02               	movlw	2
  2102  001282  ECF6  F007         	call	_Wheel_Back_Right
  2103                           
  2104                           ;PICBot.c: 98: Wheel_Front_Left(forward);
  2105  001286  0E01               	movlw	1
  2106  001288  ECD4  F007         	call	_Wheel_Front_Left
  2107                           
  2108                           ;PICBot.c: 99: Wheel_Back_Left(forward);
  2109  00128C  0E01               	movlw	1
  2110  00128E  EC18  F008         	call	_Wheel_Back_Left
  2111  001292  0012               	return		;funcret
  2112  001294                     __end_of_PICBOT_rgt:
  2113                           	opt stack 0
  2114                           tosu	equ	0xFFF
  2115                           tosh	equ	0xFFE
  2116                           tosl	equ	0xFFD
  2117                           pclath	equ	0xFFA
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           intcon	equ	0xFF2
  2125                           postinc0	equ	0xFEE
  2126                           wreg	equ	0xFE8
  2127                           postinc2	equ	0xFDE
  2128                           postdec2	equ	0xFDD
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _PICBOT_lft *****************
  2134 ;; Defined at:
  2135 ;;		line 86 in file "PICBot.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    7
  2156 ;; This function calls:
  2157 ;;		_Wheel_Back_Left
  2158 ;;		_Wheel_Back_Right
  2159 ;;		_Wheel_Front_Left
  2160 ;;		_Wheel_Front_Right
  2161 ;; This function is called by:
  2162 ;;		_PICBOT_Task
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text14
  2167  001294                     __ptext14:
  2168                           	opt stack 0
  2169  001294                     _PICBOT_lft:
  2170                           	opt stack 21
  2171                           
  2172                           ;PICBot.c: 88: Wheel_Front_Right(forward);
  2173                           
  2174                           ;incstack = 0
  2175  001294  0E01               	movlw	1
  2176  001296  ECB2  F007         	call	_Wheel_Front_Right
  2177                           
  2178                           ;PICBot.c: 89: Wheel_Back_Right(forward);
  2179  00129A  0E01               	movlw	1
  2180  00129C  ECF6  F007         	call	_Wheel_Back_Right
  2181                           
  2182                           ;PICBot.c: 90: Wheel_Front_Left(stop);
  2183  0012A0  0E00               	movlw	0
  2184  0012A2  ECD4  F007         	call	_Wheel_Front_Left
  2185                           
  2186                           ;PICBot.c: 91: Wheel_Back_Left(reverse);
  2187  0012A6  0E02               	movlw	2
  2188  0012A8  EC18  F008         	call	_Wheel_Back_Left
  2189  0012AC  0012               	return		;funcret
  2190  0012AE                     __end_of_PICBOT_lft:
  2191                           	opt stack 0
  2192                           tosu	equ	0xFFF
  2193                           tosh	equ	0xFFE
  2194                           tosl	equ	0xFFD
  2195                           pclath	equ	0xFFA
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           postinc2	equ	0xFDE
  2206                           postdec2	equ	0xFDD
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _PICBOT_fwd *****************
  2212 ;; Defined at:
  2213 ;;		line 69 in file "PICBot.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;		None
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2227 ;;      Params:         0       0       0       0       0       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2230 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2231 ;;Total ram usage:        0 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    7
  2234 ;; This function calls:
  2235 ;;		_Wheel_Back_Left
  2236 ;;		_Wheel_Back_Right
  2237 ;;		_Wheel_Front_Left
  2238 ;;		_Wheel_Front_Right
  2239 ;; This function is called by:
  2240 ;;		_PICBOT_Task
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text15
  2245  0012AE                     __ptext15:
  2246                           	opt stack 0
  2247  0012AE                     _PICBOT_fwd:
  2248                           	opt stack 21
  2249                           
  2250                           ;PICBot.c: 71: Wheel_Front_Right(forward);
  2251                           
  2252                           ;incstack = 0
  2253  0012AE  0E01               	movlw	1
  2254  0012B0  ECB2  F007         	call	_Wheel_Front_Right
  2255                           
  2256                           ;PICBot.c: 72: Wheel_Back_Right(forward);
  2257  0012B4  0E01               	movlw	1
  2258  0012B6  ECF6  F007         	call	_Wheel_Back_Right
  2259                           
  2260                           ;PICBot.c: 73: Wheel_Front_Left(forward);
  2261  0012BA  0E01               	movlw	1
  2262  0012BC  ECD4  F007         	call	_Wheel_Front_Left
  2263                           
  2264                           ;PICBot.c: 74: Wheel_Back_Left(forward);
  2265  0012C0  0E01               	movlw	1
  2266  0012C2  EC18  F008         	call	_Wheel_Back_Left
  2267  0012C6  0012               	return		;funcret
  2268  0012C8                     __end_of_PICBOT_fwd:
  2269                           	opt stack 0
  2270                           tosu	equ	0xFFF
  2271                           tosh	equ	0xFFE
  2272                           tosl	equ	0xFFD
  2273                           pclath	equ	0xFFA
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _Fifo_Get *****************
  2290 ;; Defined at:
  2291 ;;		line 35 in file "sw_fifo.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  datapt          2   21[BANK0 ] PTR unsigned int 
  2294 ;;		 -> PICBOT_Task@command(2), 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      enum E29
  2299 ;; Registers used:
  2300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2306 ;;      Params:         0       2       0       0       0       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2308 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2309 ;;      Totals:         2       2       0       0       0       0       0       0       0
  2310 ;;Total ram usage:        4 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    5
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_PICBOT_Task
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text16
  2321  001074                     __ptext16:
  2322                           	opt stack 0
  2323  001074                     _Fifo_Get:
  2324                           	opt stack 23
  2325                           
  2326                           ;sw_fifo.c: 37: if(PutI == GetI ){
  2327                           
  2328                           ;incstack = 0
  2329  001074  0100               	movlb	0	; () banked
  2330  001076  5188               	movf	_GetI& (0+255),w,b
  2331  001078  1989               	xorwf	_PutI& (0+255),w,b
  2332  00107A  A4D8               	btfss	status,2,c
  2333  00107C  D002               	goto	l463
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;sw_fifo.c: 38: return(FIFO_FAIL);
  2337  00107E  0E00               	movlw	0
  2338                           
  2339                           ; BSR set to: 0
  2340  001080  0012               	return	
  2341  001082                     l463:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;sw_fifo.c: 39: }
  2345                           ;sw_fifo.c: 40: *datapt = Fifo[GetI&(16-1)];
  2346                           
  2347                           ; BSR set to: 0
  2348  001082  5188               	movf	_GetI& (0+255),w,b
  2349  001084  0B0F               	andlw	15
  2350  001086  6E1F               	movwf	??_Fifo_Get& (0+255),c
  2351  001088  6A20               	clrf	(??_Fifo_Get+1)& (0+255),c
  2352  00108A  90D8               	bcf	status,0,c
  2353  00108C  361F               	rlcf	??_Fifo_Get,f,c
  2354  00108E  3620               	rlcf	??_Fifo_Get+1,f,c
  2355  001090  0E60               	movlw	low _Fifo
  2356  001092  241F               	addwf	??_Fifo_Get,w,c
  2357  001094  6ED9               	movwf	fsr2l,c
  2358  001096  0E00               	movlw	high _Fifo
  2359  001098  2020               	addwfc	??_Fifo_Get+1,w,c
  2360  00109A  6EDA               	movwf	fsr2h,c
  2361  00109C  C0C1  FFE1         	movff	Fifo_Get@datapt,fsr1l
  2362  0010A0  C0C2  FFE2         	movff	Fifo_Get@datapt+1,fsr1h
  2363  0010A4  CFDE FFE6          	movff	postinc2,postinc1
  2364  0010A8  CFDD FFE5          	movff	postdec2,postdec1
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;sw_fifo.c: 41: GetI++;
  2368  0010AC  2B88               	incf	_GetI& (0+255),f,b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;sw_fifo.c: 42: return(FIFO_SUCCESS);
  2372  0010AE  0E01               	movlw	1
  2373  0010B0  0012               	return	
  2374  0010B2                     __end_of_Fifo_Get:
  2375                           	opt stack 0
  2376                           tosu	equ	0xFFF
  2377                           tosh	equ	0xFFE
  2378                           tosl	equ	0xFFD
  2379                           pclath	equ	0xFFA
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postinc1	equ	0xFE6
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           postinc2	equ	0xFDE
  2394                           postdec2	equ	0xFDD
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _DEBUG_Pin0Toggle *****************
  2400 ;; Defined at:
  2401 ;;		line 23 in file "debug.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0
  2416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2417 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2418 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2419 ;;Total ram usage:        1 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_PICBOT_Task
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text17
  2430  001228                     __ptext17:
  2431                           	opt stack 0
  2432  001228                     _DEBUG_Pin0Toggle:
  2433                           	opt stack 23
  2434                           
  2435                           ;debug.c: 25: LATEbits.LATE1 = ~LATEbits.LATE1;
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;incstack = 0
  2439  001228  A28D               	btfss	3981,1,c	;volatile
  2440  00122A  D002               	goto	u1270
  2441  00122C  0E01               	movlw	1
  2442  00122E  D001               	goto	u1276
  2443  001230                     u1270:
  2444  001230  0E00               	movlw	0
  2445  001232                     u1276:
  2446  001232  0AFF               	xorlw	255
  2447  001234  6E1F               	movwf	??_DEBUG_Pin0Toggle& (0+255),c
  2448  001236  461F               	rlncf	??_DEBUG_Pin0Toggle,f,c
  2449  001238  508D               	movf	3981,w,c	;volatile
  2450  00123A  181F               	xorwf	??_DEBUG_Pin0Toggle,w,c
  2451  00123C  0BFD               	andlw	-3
  2452  00123E  181F               	xorwf	??_DEBUG_Pin0Toggle,w,c
  2453  001240  6E8D               	movwf	3981,c	;volatile
  2454  001242  0012               	return		;funcret
  2455  001244                     __end_of_DEBUG_Pin0Toggle:
  2456                           	opt stack 0
  2457                           tosu	equ	0xFFF
  2458                           tosh	equ	0xFFE
  2459                           tosl	equ	0xFFD
  2460                           pclath	equ	0xFFA
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postinc1	equ	0xFE6
  2471                           postdec1	equ	0xFE5
  2472                           fsr1h	equ	0xFE2
  2473                           fsr1l	equ	0xFE1
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _ir_bitcollect *****************
  2481 ;; Defined at:
  2482 ;;		line 93 in file "irdetect.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  n               1   36[COMRAM] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2496 ;;      Params:         0       0       0       0       0       0       0       0       0
  2497 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2498 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2499 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2500 ;;Total ram usage:        4 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    6
  2503 ;; This function calls:
  2504 ;;		___lwdiv
  2505 ;; This function is called by:
  2506 ;;		_IR_Task
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text18
  2511  000E7C                     __ptext18:
  2512                           	opt stack 0
  2513  000E7C                     _ir_bitcollect:
  2514                           	opt stack 22
  2515                           
  2516                           ;irdetect.c: 95: uint8_t n;
  2517                           ;irdetect.c: 97: n = irhandle.dtime/26;
  2518                           
  2519                           ;incstack = 0
  2520  000E7C  C0A4  F0C1         	movff	_irhandle,___lwdiv@dividend
  2521  000E80  C0A5  F0C2         	movff	_irhandle+1,___lwdiv@dividend+1
  2522  000E84  0E00               	movlw	0
  2523  000E86  0100               	movlb	0	; () banked
  2524  000E88  6FC4               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2525  000E8A  0E1A               	movlw	26
  2526  000E8C  6FC3               	movwf	___lwdiv@divisor& (0+255),b
  2527  000E8E  ECC4  F006         	call	___lwdiv	;wreg free
  2528  000E92  0100               	movlb	0	; () banked
  2529  000E94  51C1               	movf	?___lwdiv& (0+255),w,b
  2530  000E96  6E25               	movwf	ir_bitcollect@n,c
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;irdetect.c: 99: if ( (n > 1) && (IRdigit < 16) )
  2534  000E98  0E01               	movlw	1
  2535  000E9A  6425               	cpfsgt	ir_bitcollect@n,c
  2536  000E9C  D015               	goto	l320
  2537                           
  2538                           ; BSR set to: 0
  2539  000E9E  0E10               	movlw	16
  2540  000EA0  618A               	cpfslt	_IRdigit& (0+255),b
  2541  000EA2  D012               	goto	l320
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;irdetect.c: 100: {
  2545                           ;irdetect.c: 101: IRdata |= (1 << IRdigit);
  2546  000EA4  C08A  F022         	movff	_IRdigit,??_ir_bitcollect
  2547  000EA8  0E01               	movlw	1
  2548  000EAA  6E23               	movwf	(??_ir_bitcollect+1)& (0+255),c
  2549  000EAC  0E00               	movlw	0
  2550  000EAE  6E24               	movwf	(??_ir_bitcollect+2)& (0+255),c
  2551  000EB0  2A22               	incf	??_ir_bitcollect,f,c
  2552  000EB2  D003               	goto	u1314
  2553  000EB4                     u1315:
  2554  000EB4  90D8               	bcf	status,0,c
  2555  000EB6  3623               	rlcf	??_ir_bitcollect+1,f,c
  2556  000EB8  3624               	rlcf	??_ir_bitcollect+2,f,c
  2557  000EBA                     u1314:
  2558  000EBA  2E22               	decfsz	??_ir_bitcollect,f,c
  2559  000EBC  D7FB               	goto	u1315
  2560  000EBE  5023               	movf	??_ir_bitcollect+1,w,c
  2561  000EC0  0100               	movlb	0	; () banked
  2562  000EC2  1380               	iorwf	_IRdata& (0+255),f,b
  2563  000EC4  5024               	movf	??_ir_bitcollect+2,w,c
  2564  000EC6  1381               	iorwf	(_IRdata+1)& (0+255),f,b
  2565  000EC8                     l320:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;irdetect.c: 102: }
  2569                           ;irdetect.c: 104: IRdigit++;
  2570                           
  2571                           ; BSR set to: 0
  2572  000EC8  2B8A               	incf	_IRdigit& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575  000ECA  0012               	return		;funcret
  2576  000ECC                     __end_of_ir_bitcollect:
  2577                           	opt stack 0
  2578                           tosu	equ	0xFFF
  2579                           tosh	equ	0xFFE
  2580                           tosl	equ	0xFFD
  2581                           pclath	equ	0xFFA
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc1	equ	0xFE6
  2592                           postdec1	equ	0xFE5
  2593                           fsr1h	equ	0xFE2
  2594                           fsr1l	equ	0xFE1
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _ir_Begin *****************
  2602 ;; Defined at:
  2603 ;;		line 88 in file "irdetect.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2617 ;;      Params:         0       0       0       0       0       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2620 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2621 ;;Total ram usage:        0 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    5
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_IR_Task
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text19
  2632  00134E                     __ptext19:
  2633                           	opt stack 0
  2634  00134E                     _ir_Begin:
  2635                           	opt stack 23
  2636                           
  2637                           ;irdetect.c: 90: IRdata = 0;
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;incstack = 0
  2641  00134E  0E00               	movlw	0
  2642  001350  0100               	movlb	0	; () banked
  2643  001352  6F81               	movwf	(_IRdata+1)& (0+255),b
  2644  001354  0E00               	movlw	0
  2645  001356  6F80               	movwf	_IRdata& (0+255),b
  2646                           
  2647                           ;irdetect.c: 91: IRdigit = 0;
  2648  001358  0E00               	movlw	0
  2649  00135A  6F8A               	movwf	_IRdigit& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652  00135C  0012               	return		;funcret
  2653  00135E                     __end_of_ir_Begin:
  2654                           	opt stack 0
  2655                           tosu	equ	0xFFF
  2656                           tosh	equ	0xFFE
  2657                           tosl	equ	0xFFD
  2658                           pclath	equ	0xFFA
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           postinc0	equ	0xFEE
  2667                           wreg	equ	0xFE8
  2668                           postinc1	equ	0xFE6
  2669                           postdec1	equ	0xFE5
  2670                           fsr1h	equ	0xFE2
  2671                           fsr1l	equ	0xFE1
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           fsr2h	equ	0xFDA
  2675                           fsr2l	equ	0xFD9
  2676                           status	equ	0xFD8
  2677                           
  2678 ;; *************** function _ir_end *****************
  2679 ;; Defined at:
  2680 ;;		line 83 in file "irdetect.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		None
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2694 ;;      Params:         0       0       0       0       0       0       0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2697 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2698 ;;Total ram usage:        0 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    5
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_IR_Task
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text20
  2709  0014A2                     __ptext20:
  2710                           	opt stack 0
  2711  0014A2                     _ir_end:
  2712                           	opt stack 23
  2713                           
  2714                           ;irdetect.c: 86: return;
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;incstack = 0
  2718  0014A2  0012               	return		;funcret
  2719  0014A4                     __end_of_ir_end:
  2720                           	opt stack 0
  2721                           tosu	equ	0xFFF
  2722                           tosh	equ	0xFFE
  2723                           tosl	equ	0xFFD
  2724                           pclath	equ	0xFFA
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postinc1	equ	0xFE6
  2735                           postdec1	equ	0xFE5
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _ir_terminate *****************
  2745 ;; Defined at:
  2746 ;;		line 109 in file "irdetect.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    7
  2767 ;; This function calls:
  2768 ;;		_Fifo_Put
  2769 ;;		_SEMA_SetPICBot
  2770 ;; This function is called by:
  2771 ;;		_IR_Task
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text21
  2776  00131C                     __ptext21:
  2777                           	opt stack 0
  2778  00131C                     _ir_terminate:
  2779                           	opt stack 21
  2780                           
  2781                           ;irdetect.c: 112: Fifo_Put(IRdata);
  2782                           
  2783                           ;incstack = 0
  2784  00131C  C080  F0C1         	movff	_IRdata,Fifo_Put@data
  2785  001320  C081  F0C2         	movff	_IRdata+1,Fifo_Put@data+1
  2786  001324  EC96  F006         	call	_Fifo_Put	;wreg free
  2787                           
  2788                           ;irdetect.c: 113: SEMA_SetPICBot();
  2789  001328  ECAF  F009         	call	_SEMA_SetPICBot	;wreg free
  2790  00132C  0012               	return		;funcret
  2791  00132E                     __end_of_ir_terminate:
  2792                           	opt stack 0
  2793                           tosu	equ	0xFFF
  2794                           tosh	equ	0xFFE
  2795                           tosl	equ	0xFFD
  2796                           pclath	equ	0xFFA
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postinc1	equ	0xFE6
  2807                           postdec1	equ	0xFE5
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           postinc2	equ	0xFDE
  2811                           postdec2	equ	0xFDD
  2812                           fsr2h	equ	0xFDA
  2813                           fsr2l	equ	0xFD9
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _SEMA_SetPICBot *****************
  2817 ;; Defined at:
  2818 ;;		line 30 in file "sema.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;		None
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2832 ;;      Params:         0       0       0       0       0       0       0       0       0
  2833 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2835 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2836 ;;Total ram usage:        0 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    6
  2839 ;; This function calls:
  2840 ;;		_OS_Signal
  2841 ;; This function is called by:
  2842 ;;		_ir_terminate
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text22
  2847  00135E                     __ptext22:
  2848                           	opt stack 0
  2849  00135E                     _SEMA_SetPICBot:
  2850                           	opt stack 21
  2851                           
  2852                           ;sema.c: 32: OS_Signal(&sema_picbot);
  2853                           
  2854                           ;incstack = 0
  2855  00135E  0EAB               	movlw	low _sema_picbot
  2856  001360  0100               	movlb	0	; () banked
  2857  001362  6FC1               	movwf	OS_Signal@semaPt& (0+255),b
  2858  001364  0E00               	movlw	high _sema_picbot
  2859  001366  6FC2               	movwf	(OS_Signal@semaPt+1)& (0+255),b
  2860  001368  EC94  F005         	call	_OS_Signal	;wreg free
  2861  00136C  0012               	return		;funcret
  2862  00136E                     __end_of_SEMA_SetPICBot:
  2863                           	opt stack 0
  2864                           tosu	equ	0xFFF
  2865                           tosh	equ	0xFFE
  2866                           tosl	equ	0xFFD
  2867                           pclath	equ	0xFFA
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postinc1	equ	0xFE6
  2878                           postdec1	equ	0xFE5
  2879                           fsr1h	equ	0xFE2
  2880                           fsr1l	equ	0xFE1
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _OS_Signal *****************
  2888 ;; Defined at:
  2889 ;;		line 143 in file "os.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  semaPt          2   21[BANK0 ] PTR char 
  2892 ;;		 -> sema_Task4(1), sema_Task3(1), sema_Task2(1), sema_clock(1), 
  2893 ;;		 -> sema_picbot(1), sema_irdetect(1), 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  pt              2   34[COMRAM] PTR struct tcb
  2896 ;;		 -> tcbs(24), 
  2897 ;;  PrvPt           2   32[COMRAM] PTR struct tcb
  2898 ;;		 -> NULL(0), tcbs(24), 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2908 ;;      Params:         0       2       0       0       0       0       0       0       0
  2909 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2910 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2911 ;;      Totals:         6       2       0       0       0       0       0       0       0
  2912 ;;Total ram usage:        8 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    5
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_SEMA_SetPICBot
  2919 ;;		_SEMA_SetClock
  2920 ;;		_SEMA_SetTask2
  2921 ;;		_SEMA_SetTask3
  2922 ;;		_SEMA_SetTask4
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text23
  2927  000B28                     __ptext23:
  2928                           	opt stack 0
  2929  000B28                     _OS_Signal:
  2930                           	opt stack 22
  2931                           
  2932                           ;os.c: 145: tcbType *pt;
  2933                           ;os.c: 146: tcbType *PrvPt;
  2934                           ;os.c: 152: PrvPt = RunPt;
  2935                           
  2936                           ;incstack = 0
  2937  000B28  C084  F021         	movff	_RunPt,OS_Signal@PrvPt
  2938  000B2C  C085  F022         	movff	_RunPt+1,OS_Signal@PrvPt+1
  2939                           
  2940                           ;os.c: 154: pt = RunPt->next;
  2941  000B30  0100               	movlb	0	; () banked
  2942  000B32  EE20 F002          	lfsr	2,2
  2943  000B36  5184               	movf	_RunPt& (0+255),w,b
  2944  000B38  26D9               	addwf	fsr2l,f,c
  2945  000B3A  5185               	movf	(_RunPt+1)& (0+255),w,b
  2946  000B3C  22DA               	addwfc	fsr2h,f,c
  2947  000B3E  CFDE F023          	movff	postinc2,OS_Signal@pt
  2948  000B42  CFDD F024          	movff	postdec2,OS_Signal@pt+1
  2949                           
  2950                           ;os.c: 156: while(!(pt->blocked == semaPt))
  2951  000B46  D01E               	goto	l83
  2952  000B48                     l2725:
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;os.c: 157: {
  2956                           ;os.c: 160: pt= pt->next;
  2957  000B48  EE20 F002          	lfsr	2,2
  2958  000B4C  5023               	movf	OS_Signal@pt,w,c
  2959  000B4E  26D9               	addwf	fsr2l,f,c
  2960  000B50  5024               	movf	OS_Signal@pt+1,w,c
  2961  000B52  22DA               	addwfc	fsr2h,f,c
  2962  000B54  CFDE F023          	movff	postinc2,OS_Signal@pt
  2963  000B58  CFDD F024          	movff	postdec2,OS_Signal@pt+1
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;os.c: 162: if (pt == PrvPt)
  2967  000B5C  5021               	movf	OS_Signal@PrvPt,w,c
  2968  000B5E  1823               	xorwf	OS_Signal@pt,w,c
  2969  000B60  E111               	bnz	l2733
  2970  000B62  5022               	movf	OS_Signal@PrvPt+1,w,c
  2971  000B64  1824               	xorwf	OS_Signal@pt+1,w,c
  2972  000B66  A4D8               	btfss	status,2,c
  2973  000B68  D00D               	goto	l83
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;os.c: 163: {
  2977                           ;os.c: 164: if(!(pt->blocked == semaPt))
  2978  000B6A  EE20 F004          	lfsr	2,4
  2979  000B6E  5023               	movf	OS_Signal@pt,w,c
  2980  000B70  26D9               	addwf	fsr2l,f,c
  2981  000B72  5024               	movf	OS_Signal@pt+1,w,c
  2982  000B74  22DA               	addwfc	fsr2h,f,c
  2983  000B76  51C1               	movf	OS_Signal@semaPt& (0+255),w,b
  2984  000B78  18DE               	xorwf	postinc2,w,c
  2985  000B7A  E111               	bnz	l2735
  2986  000B7C  51C2               	movf	(OS_Signal@semaPt+1)& (0+255),w,b
  2987  000B7E  18DE               	xorwf	postinc2,w,c
  2988  000B80  A4D8               	btfss	status,2,c
  2989  000B82  D00D               	goto	u1120
  2990  000B84                     l83:
  2991  000B84                     l2733:
  2992                           
  2993                           ; BSR set to: 0
  2994  000B84  EE20 F004          	lfsr	2,4
  2995  000B88  5023               	movf	OS_Signal@pt,w,c
  2996  000B8A  26D9               	addwf	fsr2l,f,c
  2997  000B8C  5024               	movf	OS_Signal@pt+1,w,c
  2998  000B8E  22DA               	addwfc	fsr2h,f,c
  2999  000B90  51C1               	movf	OS_Signal@semaPt& (0+255),w,b
  3000  000B92  18DE               	xorwf	postinc2,w,c
  3001  000B94  E1D9               	bnz	l2725
  3002  000B96  51C2               	movf	(OS_Signal@semaPt+1)& (0+255),w,b
  3003  000B98  18DE               	xorwf	postinc2,w,c
  3004  000B9A  A4D8               	btfss	status,2,c
  3005  000B9C  D7D5               	goto	l81
  3006  000B9E                     u1120:
  3007  000B9E                     l2735:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;os.c: 168: }
  3011                           ;os.c: 169: }
  3012                           ;os.c: 170: }
  3013                           ;os.c: 171: pt->blocked = 0;
  3014  000B9E  EE20 F004          	lfsr	2,4
  3015  000BA2  5023               	movf	OS_Signal@pt,w,c
  3016  000BA4  26D9               	addwf	fsr2l,f,c
  3017  000BA6  5024               	movf	OS_Signal@pt+1,w,c
  3018  000BA8  22DA               	addwfc	fsr2h,f,c
  3019  000BAA  0E00               	movlw	0
  3020  000BAC  6EDE               	movwf	postinc2,c
  3021  000BAE  0E00               	movlw	0
  3022  000BB0  6EDD               	movwf	postdec2,c
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;os.c: 174: *semaPt = 1;
  3026  000BB2  C0C1  FFD9         	movff	OS_Signal@semaPt,fsr2l
  3027  000BB6  C0C2  FFDA         	movff	OS_Signal@semaPt+1,fsr2h
  3028  000BBA  0E01               	movlw	1
  3029  000BBC  6EDF               	movwf	indf2,c
  3030  000BBE  0012               	return	
  3031  000BC0                     __end_of_OS_Signal:
  3032                           	opt stack 0
  3033                           tosu	equ	0xFFF
  3034                           tosh	equ	0xFFE
  3035                           tosl	equ	0xFFD
  3036                           pclath	equ	0xFFA
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           intcon	equ	0xFF2
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postinc1	equ	0xFE6
  3047                           postdec1	equ	0xFE5
  3048                           fsr1h	equ	0xFE2
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _Fifo_Put *****************
  3058 ;; Defined at:
  3059 ;;		line 23 in file "sw_fifo.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  data            2   21[BANK0 ] unsigned int 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      enum E3852
  3066 ;; Registers used:
  3067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3073 ;;      Params:         0       2       0       0       0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3075 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3076 ;;      Totals:         6       2       0       0       0       0       0       0       0
  3077 ;;Total ram usage:        8 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    5
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_ir_terminate
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text24
  3088  000D2C                     __ptext24:
  3089                           	opt stack 0
  3090  000D2C                     _Fifo_Put:
  3091                           	opt stack 22
  3092                           
  3093                           ;sw_fifo.c: 25: if((PutI-GetI) & ~(16-1))
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;incstack = 0
  3097  000D2C  0EF0               	movlw	240
  3098  000D2E  6E1F               	movwf	??_Fifo_Put& (0+255),c
  3099  000D30  0EFF               	movlw	255
  3100  000D32  6E20               	movwf	(??_Fifo_Put+1)& (0+255),c
  3101  000D34  0100               	movlb	0	; () banked
  3102  000D36  5188               	movf	_GetI& (0+255),w,b
  3103  000D38  6E21               	movwf	(??_Fifo_Put+2)& (0+255),c
  3104  000D3A  6A22               	clrf	(??_Fifo_Put+3)& (0+255),c
  3105  000D3C  1E21               	comf	??_Fifo_Put+2,f,c
  3106  000D3E  1E22               	comf	??_Fifo_Put+3,f,c
  3107  000D40  4A21               	infsnz	??_Fifo_Put+2,f,c
  3108  000D42  2A22               	incf	??_Fifo_Put+3,f,c
  3109  000D44  5189               	movf	_PutI& (0+255),w,b
  3110  000D46  6E23               	movwf	(??_Fifo_Put+4)& (0+255),c
  3111  000D48  6A24               	clrf	(??_Fifo_Put+5)& (0+255),c
  3112  000D4A  5021               	movf	??_Fifo_Put+2,w,c
  3113  000D4C  2623               	addwf	??_Fifo_Put+4,f,c
  3114  000D4E  5022               	movf	??_Fifo_Put+3,w,c
  3115  000D50  2224               	addwfc	??_Fifo_Put+5,f,c
  3116  000D52  501F               	movf	??_Fifo_Put,w,c
  3117  000D54  1623               	andwf	??_Fifo_Put+4,f,c
  3118  000D56  5020               	movf	??_Fifo_Put+1,w,c
  3119  000D58  1624               	andwf	??_Fifo_Put+5,f,c
  3120  000D5A  5023               	movf	??_Fifo_Put+4,w,c
  3121  000D5C  1024               	iorwf	??_Fifo_Put+5,w,c
  3122  000D5E  A4D8               	btfss	status,2,c
  3123  000D60  0012               	return	
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;sw_fifo.c: 28: }
  3127                           ;sw_fifo.c: 29: Fifo[PutI&(16-1)] = data;
  3128                           
  3129                           ; BSR set to: 0
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;sw_fifo.c: 26: {
  3133                           ;sw_fifo.c: 27: return(FIFO_FAIL);
  3134                           ;	Return value of _Fifo_Put is never used
  3135  000D62  5189               	movf	_PutI& (0+255),w,b
  3136  000D64  0B0F               	andlw	15
  3137  000D66  6E1F               	movwf	??_Fifo_Put& (0+255),c
  3138  000D68  6A20               	clrf	(??_Fifo_Put+1)& (0+255),c
  3139  000D6A  90D8               	bcf	status,0,c
  3140  000D6C  361F               	rlcf	??_Fifo_Put,f,c
  3141  000D6E  3620               	rlcf	??_Fifo_Put+1,f,c
  3142  000D70  0E60               	movlw	low _Fifo
  3143  000D72  241F               	addwf	??_Fifo_Put,w,c
  3144  000D74  6ED9               	movwf	fsr2l,c
  3145  000D76  0E00               	movlw	high _Fifo
  3146  000D78  2020               	addwfc	??_Fifo_Put+1,w,c
  3147  000D7A  6EDA               	movwf	fsr2h,c
  3148  000D7C  C0C1  FFDE         	movff	Fifo_Put@data,postinc2
  3149  000D80  C0C2  FFDD         	movff	Fifo_Put@data+1,postdec2
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;sw_fifo.c: 30: PutI++;
  3153  000D84  2B89               	incf	_PutI& (0+255),f,b
  3154  000D86  0012               	return	
  3155  000D88                     __end_of_Fifo_Put:
  3156                           	opt stack 0
  3157                           tosu	equ	0xFFF
  3158                           tosh	equ	0xFFE
  3159                           tosl	equ	0xFFD
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postinc1	equ	0xFE6
  3171                           postdec1	equ	0xFE5
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function ___lwdiv *****************
  3182 ;; Defined at:
  3183 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  dividend        2   21[BANK0 ] unsigned int 
  3186 ;;  divisor         2   23[BANK0 ] unsigned int 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  quotient        2   31[COMRAM] unsigned int 
  3189 ;;  counter         1   30[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  2   21[BANK0 ] unsigned int 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3199 ;;      Params:         0       4       0       0       0       0       0       0       0
  3200 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3202 ;;      Totals:         3       4       0       0       0       0       0       0       0
  3203 ;;Total ram usage:        7 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    5
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_ir_bitcollect
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text25
  3214  000D88                     __ptext25:
  3215                           	opt stack 0
  3216  000D88                     ___lwdiv:
  3217                           	opt stack 22
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;incstack = 0
  3221  000D88  0E00               	movlw	0
  3222  000D8A  6E21               	movwf	___lwdiv@quotient+1,c
  3223  000D8C  0E00               	movlw	0
  3224  000D8E  6E20               	movwf	___lwdiv@quotient,c
  3225  000D90  0100               	movlb	0	; () banked
  3226  000D92  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  3227  000D94  11C4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3228  000D96  B4D8               	btfsc	status,2,c
  3229  000D98  D01C               	goto	l1040
  3230                           
  3231                           ; BSR set to: 0
  3232  000D9A  0E01               	movlw	1
  3233  000D9C  6E1F               	movwf	___lwdiv@counter,c
  3234  000D9E  D004               	goto	l1035
  3235  000DA0                     
  3236                           ; BSR set to: 0
  3237                           
  3238                           ; BSR set to: 0
  3239  000DA0  90D8               	bcf	status,0,c
  3240  000DA2  37C3               	rlcf	___lwdiv@divisor& (0+255),f,b
  3241  000DA4  37C4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3242  000DA6  2A1F               	incf	___lwdiv@counter,f,c
  3243  000DA8                     l1035:
  3244                           
  3245                           ; BSR set to: 0
  3246                           
  3247                           ; BSR set to: 0
  3248  000DA8  AFC4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3249  000DAA  D7FA               	goto	l1036
  3250  000DAC                     u1240:
  3251                           
  3252                           ; BSR set to: 0
  3253                           
  3254                           ; BSR set to: 0
  3255                           
  3256                           ; BSR set to: 0
  3257  000DAC  90D8               	bcf	status,0,c
  3258  000DAE  3620               	rlcf	___lwdiv@quotient,f,c
  3259  000DB0  3621               	rlcf	___lwdiv@quotient+1,f,c
  3260                           
  3261                           ; BSR set to: 0
  3262  000DB2  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  3263  000DB4  5DC1               	subwf	___lwdiv@dividend& (0+255),w,b
  3264  000DB6  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3265  000DB8  59C2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3266  000DBA  A0D8               	btfss	status,0,c
  3267  000DBC  D005               	goto	l1039
  3268                           
  3269                           ; BSR set to: 0
  3270  000DBE  51C3               	movf	___lwdiv@divisor& (0+255),w,b
  3271  000DC0  5FC1               	subwf	___lwdiv@dividend& (0+255),f,b
  3272  000DC2  51C4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3273  000DC4  5BC2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3274                           
  3275                           ; BSR set to: 0
  3276  000DC6  8020               	bsf	___lwdiv@quotient,0,c
  3277  000DC8                     l1039:
  3278                           
  3279                           ; BSR set to: 0
  3280                           
  3281                           ; BSR set to: 0
  3282  000DC8  90D8               	bcf	status,0,c
  3283  000DCA  33C4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3284  000DCC  33C3               	rrcf	___lwdiv@divisor& (0+255),f,b
  3285                           
  3286                           ; BSR set to: 0
  3287  000DCE  2E1F               	decfsz	___lwdiv@counter,f,c
  3288  000DD0  D7ED               	goto	u1240
  3289  000DD2                     l1040:
  3290                           
  3291                           ; BSR set to: 0
  3292                           
  3293                           ; BSR set to: 0
  3294  000DD2  C020  F0C1         	movff	___lwdiv@quotient,?___lwdiv
  3295  000DD6  C021  F0C2         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3296                           
  3297                           ; BSR set to: 0
  3298  000DDA  0012               	return		;funcret
  3299  000DDC                     __end_of___lwdiv:
  3300                           	opt stack 0
  3301                           tosu	equ	0xFFF
  3302                           tosh	equ	0xFFE
  3303                           tosl	equ	0xFFD
  3304                           pclath	equ	0xFFA
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           prodh	equ	0xFF4
  3310                           prodl	equ	0xFF3
  3311                           intcon	equ	0xFF2
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postinc1	equ	0xFE6
  3315                           postdec1	equ	0xFE5
  3316                           fsr1h	equ	0xFE2
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           postdec2	equ	0xFDD
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function _SEMA_BlockOnIRdetect *****************
  3326 ;; Defined at:
  3327 ;;		line 25 in file "sema.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;		None
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3341 ;;      Params:         0       0       0       0       0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3344 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3345 ;;Total ram usage:        0 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    6
  3348 ;; This function calls:
  3349 ;;		_OS_Block
  3350 ;; This function is called by:
  3351 ;;		_IR_Task
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text26
  3356  00136E                     __ptext26:
  3357                           	opt stack 0
  3358  00136E                     _SEMA_BlockOnIRdetect:
  3359                           	opt stack 22
  3360                           
  3361                           ;sema.c: 27: OS_Block(&sema_picbot);
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;incstack = 0
  3365  00136E  0EAB               	movlw	low _sema_picbot
  3366  001370  0100               	movlb	0	; () banked
  3367  001372  6FC1               	movwf	OS_Block@semaPt& (0+255),b
  3368  001374  0E00               	movlw	high _sema_picbot
  3369  001376  6FC2               	movwf	(OS_Block@semaPt+1)& (0+255),b
  3370  001378  ECA4  F008         	call	_OS_Block	;wreg free
  3371  00137C  0012               	return		;funcret
  3372  00137E                     __end_of_SEMA_BlockOnIRdetect:
  3373                           	opt stack 0
  3374                           tosu	equ	0xFFF
  3375                           tosh	equ	0xFFE
  3376                           tosl	equ	0xFFD
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postinc1	equ	0xFE6
  3388                           postdec1	equ	0xFE5
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _OS_Block *****************
  3399 ;; Defined at:
  3400 ;;		line 186 in file "os.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  semaPt          2   21[BANK0 ] PTR char 
  3403 ;;		 -> sema_Task4(1), sema_Task3(1), sema_Task2(1), sema_clock(1), 
  3404 ;;		 -> sema_picbot(1), 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3416 ;;      Params:         0       2       0       0       0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3419 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3420 ;;Total ram usage:        2 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    5
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_SEMA_BlockOnIRdetect
  3427 ;;		_SEMA_BlockOnPICBot
  3428 ;;		_SEMA_BlockOnClock
  3429 ;;		_SEMA_BlockOnTask2
  3430 ;;		_SEMA_BlockOnTask3
  3431 ;;		_SEMA_BlockOnTask4
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text27
  3436  001148                     __ptext27:
  3437                           	opt stack 0
  3438  001148                     _OS_Block:
  3439                           	opt stack 22
  3440                           
  3441                           ;os.c: 189: (*semaPt) = -1;
  3442                           
  3443                           ;incstack = 0
  3444  001148  C0C1  FFD9         	movff	OS_Block@semaPt,fsr2l
  3445  00114C  C0C2  FFDA         	movff	OS_Block@semaPt+1,fsr2h
  3446  001150  0EFF               	movlw	255
  3447  001152  6EDF               	movwf	indf2,c
  3448                           
  3449                           ;os.c: 190: RunPt->blocked = semaPt;
  3450  001154  0100               	movlb	0	; () banked
  3451  001156  EE20 F004          	lfsr	2,4
  3452  00115A  5184               	movf	_RunPt& (0+255),w,b
  3453  00115C  26D9               	addwf	fsr2l,f,c
  3454  00115E  5185               	movf	(_RunPt+1)& (0+255),w,b
  3455  001160  22DA               	addwfc	fsr2h,f,c
  3456  001162  C0C1  FFDE         	movff	OS_Block@semaPt,postinc2
  3457  001166  C0C2  FFDD         	movff	OS_Block@semaPt+1,postdec2
  3458                           
  3459                           ; BSR set to: 0
  3460  00116A  0012               	return		;funcret
  3461  00116C                     __end_of_OS_Block:
  3462                           	opt stack 0
  3463                           tosu	equ	0xFFF
  3464                           tosh	equ	0xFFE
  3465                           tosl	equ	0xFFD
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postinc1	equ	0xFE6
  3477                           postdec1	equ	0xFE5
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _SEMA_WaitForClock *****************
  3488 ;; Defined at:
  3489 ;;		line 53 in file "sema.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      unsigned char 
  3496 ;; Registers used:
  3497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3503 ;;      Params:         0       0       0       0       0       0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3506 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3507 ;;Total ram usage:        0 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    6
  3510 ;; This function calls:
  3511 ;;		_OS_Wait
  3512 ;; This function is called by:
  3513 ;;		_CLOCK_Task
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text28
  3518  001244                     __ptext28:
  3519                           	opt stack 0
  3520  001244                     _SEMA_WaitForClock:
  3521                           	opt stack 22
  3522                           
  3523                           ;sema.c: 55: if(OS_Wait(&sema_clock))
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;incstack = 0
  3527  001244  0EAA               	movlw	low _sema_clock
  3528  001246  0100               	movlb	0	; () banked
  3529  001248  6FC1               	movwf	OS_Wait@semaPt& (0+255),b
  3530  00124A  0E00               	movlw	high _sema_clock
  3531  00124C  6FC2               	movwf	(OS_Wait@semaPt+1)& (0+255),b
  3532  00124E  EC66  F007         	call	_OS_Wait	;wreg free
  3533  001252  0900               	iorlw	0
  3534  001254  B4D8               	btfsc	status,2,c
  3535  001256  D002               	goto	l407
  3536                           
  3537                           ;sema.c: 56: return(1);
  3538  001258  0E01               	movlw	1
  3539  00125A  0012               	return	
  3540  00125C                     l407:
  3541                           
  3542                           ;sema.c: 57: else
  3543                           ;sema.c: 58: return(0);
  3544  00125C  0E00               	movlw	0
  3545  00125E  0012               	return	
  3546  001260                     __end_of_SEMA_WaitForClock:
  3547                           	opt stack 0
  3548                           tosu	equ	0xFFF
  3549                           tosh	equ	0xFFE
  3550                           tosl	equ	0xFFD
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           postinc1	equ	0xFE6
  3562                           postdec1	equ	0xFE5
  3563                           fsr1h	equ	0xFE2
  3564                           fsr1l	equ	0xFE1
  3565                           indf2	equ	0xFDF
  3566                           postinc2	equ	0xFDE
  3567                           postdec2	equ	0xFDD
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _OS_Wait *****************
  3573 ;; Defined at:
  3574 ;;		line 114 in file "os.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  semaPt          2   21[BANK0 ] PTR char 
  3577 ;;		 -> sema_Task4(1), sema_Task3(1), sema_Task2(1), sema_clock(1), 
  3578 ;;		 -> sema_picbot(1), sema_irdetect(1), 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  ret             1   31[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      unsigned char 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3590 ;;      Params:         0       2       0       0       0       0       0       0       0
  3591 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3592 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3593 ;;      Totals:         2       2       0       0       0       0       0       0       0
  3594 ;;Total ram usage:        4 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    5
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_SEMA_WaitForPICBot
  3601 ;;		_SEMA_WaitForClock
  3602 ;;		_SEMA_WaitForTask4
  3603 ;;		_SEMA_WaitForIRdetect
  3604 ;;		_SEMA_WaitForTask2
  3605 ;;		_SEMA_WaitForTask3
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text29
  3610  000ECC                     __ptext29:
  3611                           	opt stack 0
  3612  000ECC                     _OS_Wait:
  3613                           	opt stack 22
  3614                           
  3615                           ;os.c: 116: uint8_t ret;
  3616                           ;os.c: 118: if (*semaPt > 0)
  3617                           
  3618                           ;incstack = 0
  3619  000ECC  C0C1  FFD9         	movff	OS_Wait@semaPt,fsr2l
  3620  000ED0  C0C2  FFDA         	movff	OS_Wait@semaPt+1,fsr2h
  3621  000ED4  50DF               	movf	indf2,w,c
  3622  000ED6  0A80               	xorlw	128
  3623  000ED8  0F7F               	addlw	-129
  3624  000EDA  A0D8               	btfss	status,0,c
  3625  000EDC  D008               	goto	l75
  3626                           
  3627                           ;os.c: 119: {
  3628                           ;os.c: 120: (*semaPt) = 0;
  3629  000EDE  C0C1  FFD9         	movff	OS_Wait@semaPt,fsr2l
  3630  000EE2  C0C2  FFDA         	movff	OS_Wait@semaPt+1,fsr2h
  3631  000EE6  0E00               	movlw	0
  3632  000EE8  6EDF               	movwf	indf2,c
  3633                           
  3634                           ;os.c: 121: ret = 0;
  3635  000EEA  0E00               	movlw	0
  3636  000EEC  D012               	goto	L2
  3637  000EEE                     l75:
  3638                           
  3639                           ;os.c: 123: else
  3640                           ;os.c: 124: {
  3641                           ;os.c: 125: RunPt->blocked = semaPt;
  3642  000EEE  0100               	movlb	0	; () banked
  3643  000EF0  EE20 F004          	lfsr	2,4
  3644  000EF4  5184               	movf	_RunPt& (0+255),w,b
  3645  000EF6  26D9               	addwf	fsr2l,f,c
  3646  000EF8  5185               	movf	(_RunPt+1)& (0+255),w,b
  3647  000EFA  22DA               	addwfc	fsr2h,f,c
  3648  000EFC  C0C1  FFDE         	movff	OS_Wait@semaPt,postinc2
  3649  000F00  C0C2  FFDD         	movff	OS_Wait@semaPt+1,postdec2
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;os.c: 126: (*semaPt) = -1;
  3653  000F04  C0C1  FFD9         	movff	OS_Wait@semaPt,fsr2l
  3654  000F08  C0C2  FFDA         	movff	OS_Wait@semaPt+1,fsr2h
  3655  000F0C  0EFF               	movlw	255
  3656  000F0E  6EDF               	movwf	indf2,c
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;os.c: 127: ret = 1;
  3660  000F10  0E01               	movlw	1
  3661  000F12                     L2:
  3662  000F12  6E20               	movwf	OS_Wait@ret,c
  3663                           
  3664                           ;os.c: 128: }
  3665                           ;os.c: 130: return(ret);
  3666                           
  3667                           ; BSR set to: 0
  3668  000F14  5020               	movf	OS_Wait@ret,w,c
  3669  000F16  0012               	return	
  3670  000F18                     __end_of_OS_Wait:
  3671                           	opt stack 0
  3672                           tosu	equ	0xFFF
  3673                           tosh	equ	0xFFE
  3674                           tosl	equ	0xFFD
  3675                           pclath	equ	0xFFA
  3676                           tblptru	equ	0xFF8
  3677                           tblptrh	equ	0xFF7
  3678                           tblptrl	equ	0xFF6
  3679                           tablat	equ	0xFF5
  3680                           prodh	equ	0xFF4
  3681                           prodl	equ	0xFF3
  3682                           intcon	equ	0xFF2
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           postinc1	equ	0xFE6
  3686                           postdec1	equ	0xFE5
  3687                           fsr1h	equ	0xFE2
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _PICBOT_Stop *****************
  3697 ;; Defined at:
  3698 ;;		line 61 in file "PICBot.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3712 ;;      Params:         0       0       0       0       0       0       0       0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3715 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3716 ;;Total ram usage:        0 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    7
  3719 ;; This function calls:
  3720 ;;		_Wheel_Back_Left
  3721 ;;		_Wheel_Back_Right
  3722 ;;		_Wheel_Front_Left
  3723 ;;		_Wheel_Front_Right
  3724 ;; This function is called by:
  3725 ;;		_CLOCK_Task
  3726 ;;		_PICBOT_Task
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text30
  3731  0012C8                     __ptext30:
  3732                           	opt stack 0
  3733  0012C8                     _PICBOT_Stop:
  3734                           	opt stack 21
  3735                           
  3736                           ;PICBot.c: 63: Wheel_Front_Right(stop);
  3737                           
  3738                           ;incstack = 0
  3739  0012C8  0E00               	movlw	0
  3740  0012CA  ECB2  F007         	call	_Wheel_Front_Right
  3741                           
  3742                           ;PICBot.c: 64: Wheel_Back_Right(stop);
  3743  0012CE  0E00               	movlw	0
  3744  0012D0  ECF6  F007         	call	_Wheel_Back_Right
  3745                           
  3746                           ;PICBot.c: 65: Wheel_Front_Left(stop);
  3747  0012D4  0E00               	movlw	0
  3748  0012D6  ECD4  F007         	call	_Wheel_Front_Left
  3749                           
  3750                           ;PICBot.c: 66: Wheel_Back_Left(stop);
  3751  0012DA  0E00               	movlw	0
  3752  0012DC  EC18  F008         	call	_Wheel_Back_Left
  3753  0012E0  0012               	return		;funcret
  3754  0012E2                     __end_of_PICBOT_Stop:
  3755                           	opt stack 0
  3756                           tosu	equ	0xFFF
  3757                           tosh	equ	0xFFE
  3758                           tosl	equ	0xFFD
  3759                           pclath	equ	0xFFA
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           intcon	equ	0xFF2
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           postinc1	equ	0xFE6
  3770                           postdec1	equ	0xFE5
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780 ;; *************** function _Wheel_Front_Right *****************
  3781 ;; Defined at:
  3782 ;;		line 4 in file "wheel4d.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  motion          1    wreg     enum E1
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  motion          1   31[COMRAM] enum E1
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3796 ;;      Params:         0       0       0       0       0       0       0       0       0
  3797 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    6
  3803 ;; This function calls:
  3804 ;;		_Motor_Right_B_1A
  3805 ;;		_Motor_Right_B_1B
  3806 ;; This function is called by:
  3807 ;;		_PICBOT_Stop
  3808 ;;		_PICBOT_fwd
  3809 ;;		_PICBOT_rvs
  3810 ;;		_PICBOT_lft
  3811 ;;		_PICBOT_rgt
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text31
  3816  000F64                     __ptext31:
  3817                           	opt stack 0
  3818  000F64                     _Wheel_Front_Right:
  3819                           	opt stack 21
  3820                           
  3821                           ;incstack = 0
  3822                           ;Wheel_Front_Right@motion stored from wreg
  3823  000F64  6E20               	movwf	Wheel_Front_Right@motion,c
  3824                           
  3825                           ;wheel4d.c: 6: switch(motion)
  3826  000F66  D015               	goto	l550
  3827  000F68                     
  3828                           ;wheel4d.c: 9: Motor_Right_B_1A(0);
  3829  000F68  0E00               	movlw	0
  3830  000F6A  ECC6  F009         	call	_Motor_Right_B_1A
  3831                           
  3832                           ;wheel4d.c: 10: Motor_Right_B_1B(0);
  3833  000F6E  0E00               	movlw	0
  3834  000F70  ECBF  F009         	call	_Motor_Right_B_1B
  3835                           
  3836                           ;wheel4d.c: 11: break;
  3837  000F74  0012               	return	
  3838  000F76                     
  3839                           ;wheel4d.c: 14: Motor_Right_B_1A(0);
  3840  000F76  0E00               	movlw	0
  3841  000F78  ECC6  F009         	call	_Motor_Right_B_1A
  3842                           
  3843                           ;wheel4d.c: 15: Motor_Right_B_1B(1);
  3844  000F7C  0E01               	movlw	1
  3845  000F7E  ECBF  F009         	call	_Motor_Right_B_1B
  3846                           
  3847                           ;wheel4d.c: 16: break;
  3848  000F82  0012               	return	
  3849  000F84                     
  3850                           ;wheel4d.c: 19: Motor_Right_B_1A(1);
  3851  000F84  0E01               	movlw	1
  3852  000F86  ECC6  F009         	call	_Motor_Right_B_1A
  3853                           
  3854                           ;wheel4d.c: 20: Motor_Right_B_1B(0);
  3855  000F8A  0E00               	movlw	0
  3856  000F8C  ECBF  F009         	call	_Motor_Right_B_1B
  3857                           
  3858                           ;wheel4d.c: 22: }
  3859                           
  3860                           ;wheel4d.c: 21: break;
  3861  000F90  0012               	return	
  3862  000F92                     l550:
  3863  000F92  5020               	movf	Wheel_Front_Right@motion,w,c
  3864                           
  3865                           ; Switch size 1, requested type "space"
  3866                           ; Number of cases is 3, Range of values is 0 to 2
  3867                           ; switch strategies available:
  3868                           ; Name         Instructions Cycles
  3869                           ; simple_byte           10     6 (average)
  3870                           ;	Chosen strategy is simple_byte
  3871  000F94  0A00               	xorlw	0	; case 0
  3872  000F96  B4D8               	btfsc	status,2,c
  3873  000F98  D7E7               	goto	l551
  3874  000F9A  0A01               	xorlw	1	; case 1
  3875  000F9C  B4D8               	btfsc	status,2,c
  3876  000F9E  D7EB               	goto	l553
  3877  000FA0  0A03               	xorlw	3	; case 2
  3878  000FA2  A4D8               	btfss	status,2,c
  3879  000FA4  0012               	return	
  3880  000FA6  D7EE               	goto	l554
  3881  000FA8                     __end_of_Wheel_Front_Right:
  3882                           	opt stack 0
  3883                           tosu	equ	0xFFF
  3884                           tosh	equ	0xFFE
  3885                           tosl	equ	0xFFD
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           postinc1	equ	0xFE6
  3897                           postdec1	equ	0xFE5
  3898                           fsr1h	equ	0xFE2
  3899                           fsr1l	equ	0xFE1
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function _Motor_Right_B_1B *****************
  3908 ;; Defined at:
  3909 ;;		line 108 in file "wheel4d.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  dir             1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  dir             1   30[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3923 ;;      Params:         0       0       0       0       0       0       0       0       0
  3924 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3926 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3927 ;;Total ram usage:        1 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    5
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_Wheel_Front_Right
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text32
  3938  00137E                     __ptext32:
  3939                           	opt stack 0
  3940  00137E                     _Motor_Right_B_1B:
  3941                           	opt stack 21
  3942                           
  3943                           ;incstack = 0
  3944                           ;Motor_Right_B_1B@dir stored from wreg
  3945  00137E  6E1F               	movwf	Motor_Right_B_1B@dir,c
  3946                           
  3947                           ;wheel4d.c: 110: LATAbits.LATA2 = dir;
  3948  001380  B01F               	btfsc	Motor_Right_B_1B@dir,0,c
  3949  001382  D002               	bra	u1145
  3950  001384  9489               	bcf	3977,2,c	;volatile
  3951  001386  D001               	bra	u1146
  3952  001388                     u1145:
  3953  001388  8489               	bsf	3977,2,c	;volatile
  3954  00138A                     u1146:
  3955  00138A  0012               	return		;funcret
  3956  00138C                     __end_of_Motor_Right_B_1B:
  3957                           	opt stack 0
  3958                           tosu	equ	0xFFF
  3959                           tosh	equ	0xFFE
  3960                           tosl	equ	0xFFD
  3961                           pclath	equ	0xFFA
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           intcon	equ	0xFF2
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           postinc1	equ	0xFE6
  3972                           postdec1	equ	0xFE5
  3973                           fsr1h	equ	0xFE2
  3974                           fsr1l	equ	0xFE1
  3975                           indf2	equ	0xFDF
  3976                           postinc2	equ	0xFDE
  3977                           postdec2	equ	0xFDD
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982 ;; *************** function _Motor_Right_B_1A *****************
  3983 ;; Defined at:
  3984 ;;		line 103 in file "wheel4d.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  dir             1    wreg     unsigned char 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  dir             1   30[COMRAM] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0
  3999 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4001 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4002 ;;Total ram usage:        1 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    5
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_Wheel_Front_Right
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text33
  4013  00138C                     __ptext33:
  4014                           	opt stack 0
  4015  00138C                     _Motor_Right_B_1A:
  4016                           	opt stack 21
  4017                           
  4018                           ;incstack = 0
  4019                           ;Motor_Right_B_1A@dir stored from wreg
  4020  00138C  6E1F               	movwf	Motor_Right_B_1A@dir,c
  4021                           
  4022                           ;wheel4d.c: 105: LATAbits.LATA3 = dir;
  4023  00138E  B01F               	btfsc	Motor_Right_B_1A@dir,0,c
  4024  001390  D002               	bra	u1135
  4025  001392  9689               	bcf	3977,3,c	;volatile
  4026  001394  D001               	bra	u1136
  4027  001396                     u1135:
  4028  001396  8689               	bsf	3977,3,c	;volatile
  4029  001398                     u1136:
  4030  001398  0012               	return		;funcret
  4031  00139A                     __end_of_Motor_Right_B_1A:
  4032                           	opt stack 0
  4033                           tosu	equ	0xFFF
  4034                           tosh	equ	0xFFE
  4035                           tosl	equ	0xFFD
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postinc1	equ	0xFE6
  4047                           postdec1	equ	0xFE5
  4048                           fsr1h	equ	0xFE2
  4049                           fsr1l	equ	0xFE1
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _Wheel_Front_Left *****************
  4058 ;; Defined at:
  4059 ;;		line 25 in file "wheel4d.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  motion          1    wreg     enum E1
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  motion          1   31[COMRAM] enum E1
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0
  4074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4076 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    6
  4080 ;; This function calls:
  4081 ;;		_Motor_Left_A_1A
  4082 ;;		_Motor_Left_A_1B
  4083 ;; This function is called by:
  4084 ;;		_PICBOT_Stop
  4085 ;;		_PICBOT_fwd
  4086 ;;		_PICBOT_rvs
  4087 ;;		_PICBOT_lft
  4088 ;;		_PICBOT_rgt
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text34
  4093  000FA8                     __ptext34:
  4094                           	opt stack 0
  4095  000FA8                     _Wheel_Front_Left:
  4096                           	opt stack 21
  4097                           
  4098                           ;incstack = 0
  4099                           ;Wheel_Front_Left@motion stored from wreg
  4100  000FA8  6E20               	movwf	Wheel_Front_Left@motion,c
  4101                           
  4102                           ;wheel4d.c: 27: switch(motion)
  4103  000FAA  D015               	goto	l558
  4104  000FAC                     
  4105                           ;wheel4d.c: 30: Motor_Left_A_1A(0);
  4106  000FAC  0E00               	movlw	0
  4107  000FAE  ECD4  F009         	call	_Motor_Left_A_1A
  4108                           
  4109                           ;wheel4d.c: 31: Motor_Left_A_1B(0);
  4110  000FB2  0E00               	movlw	0
  4111  000FB4  ECCD  F009         	call	_Motor_Left_A_1B
  4112                           
  4113                           ;wheel4d.c: 32: break;
  4114  000FB8  0012               	return	
  4115  000FBA                     
  4116                           ;wheel4d.c: 35: Motor_Left_A_1A(0);
  4117  000FBA  0E00               	movlw	0
  4118  000FBC  ECD4  F009         	call	_Motor_Left_A_1A
  4119                           
  4120                           ;wheel4d.c: 36: Motor_Left_A_1B(1);
  4121  000FC0  0E01               	movlw	1
  4122  000FC2  ECCD  F009         	call	_Motor_Left_A_1B
  4123                           
  4124                           ;wheel4d.c: 37: break;
  4125  000FC6  0012               	return	
  4126  000FC8                     
  4127                           ;wheel4d.c: 40: Motor_Left_A_1A(1);
  4128  000FC8  0E01               	movlw	1
  4129  000FCA  ECD4  F009         	call	_Motor_Left_A_1A
  4130                           
  4131                           ;wheel4d.c: 41: Motor_Left_A_1B(0);
  4132  000FCE  0E00               	movlw	0
  4133  000FD0  ECCD  F009         	call	_Motor_Left_A_1B
  4134                           
  4135                           ;wheel4d.c: 43: }
  4136                           
  4137                           ;wheel4d.c: 42: break;
  4138  000FD4  0012               	return	
  4139  000FD6                     l558:
  4140  000FD6  5020               	movf	Wheel_Front_Left@motion,w,c
  4141                           
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 3, Range of values is 0 to 2
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte           10     6 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148  000FD8  0A00               	xorlw	0	; case 0
  4149  000FDA  B4D8               	btfsc	status,2,c
  4150  000FDC  D7E7               	goto	l559
  4151  000FDE  0A01               	xorlw	1	; case 1
  4152  000FE0  B4D8               	btfsc	status,2,c
  4153  000FE2  D7EB               	goto	l561
  4154  000FE4  0A03               	xorlw	3	; case 2
  4155  000FE6  A4D8               	btfss	status,2,c
  4156  000FE8  0012               	return	
  4157  000FEA  D7EE               	goto	l562
  4158  000FEC                     __end_of_Wheel_Front_Left:
  4159                           	opt stack 0
  4160                           tosu	equ	0xFFF
  4161                           tosh	equ	0xFFE
  4162                           tosl	equ	0xFFD
  4163                           pclath	equ	0xFFA
  4164                           tblptru	equ	0xFF8
  4165                           tblptrh	equ	0xFF7
  4166                           tblptrl	equ	0xFF6
  4167                           tablat	equ	0xFF5
  4168                           prodh	equ	0xFF4
  4169                           prodl	equ	0xFF3
  4170                           intcon	equ	0xFF2
  4171                           postinc0	equ	0xFEE
  4172                           wreg	equ	0xFE8
  4173                           postinc1	equ	0xFE6
  4174                           postdec1	equ	0xFE5
  4175                           fsr1h	equ	0xFE2
  4176                           fsr1l	equ	0xFE1
  4177                           indf2	equ	0xFDF
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function _Motor_Left_A_1B *****************
  4185 ;; Defined at:
  4186 ;;		line 138 in file "wheel4d.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  dir             1    wreg     unsigned char 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  dir             1   30[COMRAM] unsigned char 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0
  4201 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4203 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4204 ;;Total ram usage:        1 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    5
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_Wheel_Front_Left
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text35
  4215  00139A                     __ptext35:
  4216                           	opt stack 0
  4217  00139A                     _Motor_Left_A_1B:
  4218                           	opt stack 21
  4219                           
  4220                           ;incstack = 0
  4221                           ;Motor_Left_A_1B@dir stored from wreg
  4222  00139A  6E1F               	movwf	Motor_Left_A_1B@dir,c
  4223                           
  4224                           ;wheel4d.c: 140: LATBbits.LATB2 = dir;
  4225  00139C  B01F               	btfsc	Motor_Left_A_1B@dir,0,c
  4226  00139E  D002               	bra	u1165
  4227  0013A0  948A               	bcf	3978,2,c	;volatile
  4228  0013A2  D001               	bra	u1166
  4229  0013A4                     u1165:
  4230  0013A4  848A               	bsf	3978,2,c	;volatile
  4231  0013A6                     u1166:
  4232  0013A6  0012               	return		;funcret
  4233  0013A8                     __end_of_Motor_Left_A_1B:
  4234                           	opt stack 0
  4235                           tosu	equ	0xFFF
  4236                           tosh	equ	0xFFE
  4237                           tosl	equ	0xFFD
  4238                           pclath	equ	0xFFA
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           postinc1	equ	0xFE6
  4249                           postdec1	equ	0xFE5
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function _Motor_Left_A_1A *****************
  4260 ;; Defined at:
  4261 ;;		line 133 in file "wheel4d.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  dir             1    wreg     unsigned char 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  dir             1   30[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4275 ;;      Params:         0       0       0       0       0       0       0       0       0
  4276 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4278 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4279 ;;Total ram usage:        1 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    5
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_Wheel_Front_Left
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text36
  4290  0013A8                     __ptext36:
  4291                           	opt stack 0
  4292  0013A8                     _Motor_Left_A_1A:
  4293                           	opt stack 21
  4294                           
  4295                           ;incstack = 0
  4296                           ;Motor_Left_A_1A@dir stored from wreg
  4297  0013A8  6E1F               	movwf	Motor_Left_A_1A@dir,c
  4298                           
  4299                           ;wheel4d.c: 135: LATBbits.LATB3 = dir;
  4300  0013AA  B01F               	btfsc	Motor_Left_A_1A@dir,0,c
  4301  0013AC  D002               	bra	u1155
  4302  0013AE  968A               	bcf	3978,3,c	;volatile
  4303  0013B0  D001               	bra	u1156
  4304  0013B2                     u1155:
  4305  0013B2  868A               	bsf	3978,3,c	;volatile
  4306  0013B4                     u1156:
  4307  0013B4  0012               	return		;funcret
  4308  0013B6                     __end_of_Motor_Left_A_1A:
  4309                           	opt stack 0
  4310                           tosu	equ	0xFFF
  4311                           tosh	equ	0xFFE
  4312                           tosl	equ	0xFFD
  4313                           pclath	equ	0xFFA
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           postinc1	equ	0xFE6
  4324                           postdec1	equ	0xFE5
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _Wheel_Back_Right *****************
  4335 ;; Defined at:
  4336 ;;		line 47 in file "wheel4d.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  motion          1    wreg     enum E1
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  motion          1   31[COMRAM] enum E1
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4350 ;;      Params:         0       0       0       0       0       0       0       0       0
  4351 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4353 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    6
  4357 ;; This function calls:
  4358 ;;		_Motor_Right_A_1A
  4359 ;;		_Motor_Right_A_1B
  4360 ;; This function is called by:
  4361 ;;		_PICBOT_Stop
  4362 ;;		_PICBOT_fwd
  4363 ;;		_PICBOT_rvs
  4364 ;;		_PICBOT_lft
  4365 ;;		_PICBOT_rgt
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text37
  4370  000FEC                     __ptext37:
  4371                           	opt stack 0
  4372  000FEC                     _Wheel_Back_Right:
  4373                           	opt stack 21
  4374                           
  4375                           ;incstack = 0
  4376                           ;Wheel_Back_Right@motion stored from wreg
  4377  000FEC  6E20               	movwf	Wheel_Back_Right@motion,c
  4378                           
  4379                           ;wheel4d.c: 49: switch(motion)
  4380  000FEE  D015               	goto	l566
  4381  000FF0                     
  4382                           ;wheel4d.c: 52: Motor_Right_A_1A(0);
  4383  000FF0  0E00               	movlw	0
  4384  000FF2  ECE2  F009         	call	_Motor_Right_A_1A
  4385                           
  4386                           ;wheel4d.c: 53: Motor_Right_A_1B(0);
  4387  000FF6  0E00               	movlw	0
  4388  000FF8  ECDB  F009         	call	_Motor_Right_A_1B
  4389                           
  4390                           ;wheel4d.c: 54: break;
  4391  000FFC  0012               	return	
  4392  000FFE                     
  4393                           ;wheel4d.c: 57: Motor_Right_A_1A(0);
  4394  000FFE  0E00               	movlw	0
  4395  001000  ECE2  F009         	call	_Motor_Right_A_1A
  4396                           
  4397                           ;wheel4d.c: 58: Motor_Right_A_1B(1);
  4398  001004  0E01               	movlw	1
  4399  001006  ECDB  F009         	call	_Motor_Right_A_1B
  4400                           
  4401                           ;wheel4d.c: 59: break;
  4402  00100A  0012               	return	
  4403  00100C                     
  4404                           ;wheel4d.c: 62: Motor_Right_A_1A(1);
  4405  00100C  0E01               	movlw	1
  4406  00100E  ECE2  F009         	call	_Motor_Right_A_1A
  4407                           
  4408                           ;wheel4d.c: 63: Motor_Right_A_1B(0);
  4409  001012  0E00               	movlw	0
  4410  001014  ECDB  F009         	call	_Motor_Right_A_1B
  4411                           
  4412                           ;wheel4d.c: 65: }
  4413                           
  4414                           ;wheel4d.c: 64: break;
  4415  001018  0012               	return	
  4416  00101A                     l566:
  4417  00101A  5020               	movf	Wheel_Back_Right@motion,w,c
  4418                           
  4419                           ; Switch size 1, requested type "space"
  4420                           ; Number of cases is 3, Range of values is 0 to 2
  4421                           ; switch strategies available:
  4422                           ; Name         Instructions Cycles
  4423                           ; simple_byte           10     6 (average)
  4424                           ;	Chosen strategy is simple_byte
  4425  00101C  0A00               	xorlw	0	; case 0
  4426  00101E  B4D8               	btfsc	status,2,c
  4427  001020  D7E7               	goto	l567
  4428  001022  0A01               	xorlw	1	; case 1
  4429  001024  B4D8               	btfsc	status,2,c
  4430  001026  D7EB               	goto	l569
  4431  001028  0A03               	xorlw	3	; case 2
  4432  00102A  A4D8               	btfss	status,2,c
  4433  00102C  0012               	return	
  4434  00102E  D7EE               	goto	l570
  4435  001030                     __end_of_Wheel_Back_Right:
  4436                           	opt stack 0
  4437                           tosu	equ	0xFFF
  4438                           tosh	equ	0xFFE
  4439                           tosl	equ	0xFFD
  4440                           pclath	equ	0xFFA
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postinc1	equ	0xFE6
  4451                           postdec1	equ	0xFE5
  4452                           fsr1h	equ	0xFE2
  4453                           fsr1l	equ	0xFE1
  4454                           indf2	equ	0xFDF
  4455                           postinc2	equ	0xFDE
  4456                           postdec2	equ	0xFDD
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _Motor_Right_A_1B *****************
  4462 ;; Defined at:
  4463 ;;		line 118 in file "wheel4d.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  dir             1    wreg     unsigned char 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  dir             1   30[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0
  4478 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4480 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4481 ;;Total ram usage:        1 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    5
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_Wheel_Back_Right
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text38
  4492  0013B6                     __ptext38:
  4493                           	opt stack 0
  4494  0013B6                     _Motor_Right_A_1B:
  4495                           	opt stack 21
  4496                           
  4497                           ;incstack = 0
  4498                           ;Motor_Right_A_1B@dir stored from wreg
  4499  0013B6  6E1F               	movwf	Motor_Right_A_1B@dir,c
  4500                           
  4501                           ;wheel4d.c: 120: LATAbits.LATA0 = dir;
  4502  0013B8  B01F               	btfsc	Motor_Right_A_1B@dir,0,c
  4503  0013BA  D002               	bra	u1185
  4504  0013BC  9089               	bcf	3977,0,c	;volatile
  4505  0013BE  D001               	bra	u1186
  4506  0013C0                     u1185:
  4507  0013C0  8089               	bsf	3977,0,c	;volatile
  4508  0013C2                     u1186:
  4509  0013C2  0012               	return		;funcret
  4510  0013C4                     __end_of_Motor_Right_A_1B:
  4511                           	opt stack 0
  4512                           tosu	equ	0xFFF
  4513                           tosh	equ	0xFFE
  4514                           tosl	equ	0xFFD
  4515                           pclath	equ	0xFFA
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           postinc1	equ	0xFE6
  4526                           postdec1	equ	0xFE5
  4527                           fsr1h	equ	0xFE2
  4528                           fsr1l	equ	0xFE1
  4529                           indf2	equ	0xFDF
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _Motor_Right_A_1A *****************
  4537 ;; Defined at:
  4538 ;;		line 113 in file "wheel4d.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  dir             1    wreg     unsigned char 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  dir             1   30[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4552 ;;      Params:         0       0       0       0       0       0       0       0       0
  4553 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4555 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4556 ;;Total ram usage:        1 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    5
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_Wheel_Back_Right
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text39
  4567  0013C4                     __ptext39:
  4568                           	opt stack 0
  4569  0013C4                     _Motor_Right_A_1A:
  4570                           	opt stack 21
  4571                           
  4572                           ;incstack = 0
  4573                           ;Motor_Right_A_1A@dir stored from wreg
  4574  0013C4  6E1F               	movwf	Motor_Right_A_1A@dir,c
  4575                           
  4576                           ;wheel4d.c: 115: LATAbits.LATA1 = dir;
  4577  0013C6  B01F               	btfsc	Motor_Right_A_1A@dir,0,c
  4578  0013C8  D002               	bra	u1175
  4579  0013CA  9289               	bcf	3977,1,c	;volatile
  4580  0013CC  D001               	bra	u1176
  4581  0013CE                     u1175:
  4582  0013CE  8289               	bsf	3977,1,c	;volatile
  4583  0013D0                     u1176:
  4584  0013D0  0012               	return		;funcret
  4585  0013D2                     __end_of_Motor_Right_A_1A:
  4586                           	opt stack 0
  4587                           tosu	equ	0xFFF
  4588                           tosh	equ	0xFFE
  4589                           tosl	equ	0xFFD
  4590                           pclath	equ	0xFFA
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           postinc1	equ	0xFE6
  4601                           postdec1	equ	0xFE5
  4602                           fsr1h	equ	0xFE2
  4603                           fsr1l	equ	0xFE1
  4604                           indf2	equ	0xFDF
  4605                           postinc2	equ	0xFDE
  4606                           postdec2	equ	0xFDD
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _Wheel_Back_Left *****************
  4612 ;; Defined at:
  4613 ;;		line 69 in file "wheel4d.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  motion          1    wreg     enum E1
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  motion          1   31[COMRAM] enum E1
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4627 ;;      Params:         0       0       0       0       0       0       0       0       0
  4628 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4630 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    6
  4634 ;; This function calls:
  4635 ;;		_Motor_Left_B_1A
  4636 ;;		_Motor_Left_B_1B
  4637 ;; This function is called by:
  4638 ;;		_PICBOT_Stop
  4639 ;;		_PICBOT_fwd
  4640 ;;		_PICBOT_rvs
  4641 ;;		_PICBOT_lft
  4642 ;;		_PICBOT_rgt
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text40
  4647  001030                     __ptext40:
  4648                           	opt stack 0
  4649  001030                     _Wheel_Back_Left:
  4650                           	opt stack 21
  4651                           
  4652                           ;incstack = 0
  4653                           ;Wheel_Back_Left@motion stored from wreg
  4654  001030  6E20               	movwf	Wheel_Back_Left@motion,c
  4655                           
  4656                           ;wheel4d.c: 71: switch(motion)
  4657  001032  D015               	goto	l574
  4658  001034                     
  4659                           ;wheel4d.c: 74: Motor_Left_B_1A(0);
  4660  001034  0E00               	movlw	0
  4661  001036  ECF0  F009         	call	_Motor_Left_B_1A
  4662                           
  4663                           ;wheel4d.c: 75: Motor_Left_B_1B(0);
  4664  00103A  0E00               	movlw	0
  4665  00103C  ECE9  F009         	call	_Motor_Left_B_1B
  4666                           
  4667                           ;wheel4d.c: 76: break;
  4668  001040  0012               	return	
  4669  001042                     
  4670                           ;wheel4d.c: 79: Motor_Left_B_1A(0);
  4671  001042  0E00               	movlw	0
  4672  001044  ECF0  F009         	call	_Motor_Left_B_1A
  4673                           
  4674                           ;wheel4d.c: 80: Motor_Left_B_1B(1);
  4675  001048  0E01               	movlw	1
  4676  00104A  ECE9  F009         	call	_Motor_Left_B_1B
  4677                           
  4678                           ;wheel4d.c: 81: break;
  4679  00104E  0012               	return	
  4680  001050                     
  4681                           ;wheel4d.c: 84: Motor_Left_B_1A(1);
  4682  001050  0E01               	movlw	1
  4683  001052  ECF0  F009         	call	_Motor_Left_B_1A
  4684                           
  4685                           ;wheel4d.c: 85: Motor_Left_B_1B(0);
  4686  001056  0E00               	movlw	0
  4687  001058  ECE9  F009         	call	_Motor_Left_B_1B
  4688                           
  4689                           ;wheel4d.c: 87: }
  4690                           
  4691                           ;wheel4d.c: 86: break;
  4692  00105C  0012               	return	
  4693  00105E                     l574:
  4694  00105E  5020               	movf	Wheel_Back_Left@motion,w,c
  4695                           
  4696                           ; Switch size 1, requested type "space"
  4697                           ; Number of cases is 3, Range of values is 0 to 2
  4698                           ; switch strategies available:
  4699                           ; Name         Instructions Cycles
  4700                           ; simple_byte           10     6 (average)
  4701                           ;	Chosen strategy is simple_byte
  4702  001060  0A00               	xorlw	0	; case 0
  4703  001062  B4D8               	btfsc	status,2,c
  4704  001064  D7E7               	goto	l575
  4705  001066  0A01               	xorlw	1	; case 1
  4706  001068  B4D8               	btfsc	status,2,c
  4707  00106A  D7EB               	goto	l577
  4708  00106C  0A03               	xorlw	3	; case 2
  4709  00106E  A4D8               	btfss	status,2,c
  4710  001070  0012               	return	
  4711  001072  D7EE               	goto	l578
  4712  001074                     __end_of_Wheel_Back_Left:
  4713                           	opt stack 0
  4714                           tosu	equ	0xFFF
  4715                           tosh	equ	0xFFE
  4716                           tosl	equ	0xFFD
  4717                           pclath	equ	0xFFA
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postinc1	equ	0xFE6
  4728                           postdec1	equ	0xFE5
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _Motor_Left_B_1B *****************
  4739 ;; Defined at:
  4740 ;;		line 128 in file "wheel4d.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  dir             1    wreg     unsigned char 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  dir             1   30[COMRAM] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0
  4755 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4757 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4758 ;;Total ram usage:        1 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    5
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_Wheel_Back_Left
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text41
  4769  0013D2                     __ptext41:
  4770                           	opt stack 0
  4771  0013D2                     _Motor_Left_B_1B:
  4772                           	opt stack 21
  4773                           
  4774                           ;incstack = 0
  4775                           ;Motor_Left_B_1B@dir stored from wreg
  4776  0013D2  6E1F               	movwf	Motor_Left_B_1B@dir,c
  4777                           
  4778                           ;wheel4d.c: 130: LATBbits.LATB4 = dir;
  4779  0013D4  B01F               	btfsc	Motor_Left_B_1B@dir,0,c
  4780  0013D6  D002               	bra	u1205
  4781  0013D8  988A               	bcf	3978,4,c	;volatile
  4782  0013DA  D001               	bra	u1206
  4783  0013DC                     u1205:
  4784  0013DC  888A               	bsf	3978,4,c	;volatile
  4785  0013DE                     u1206:
  4786  0013DE  0012               	return		;funcret
  4787  0013E0                     __end_of_Motor_Left_B_1B:
  4788                           	opt stack 0
  4789                           tosu	equ	0xFFF
  4790                           tosh	equ	0xFFE
  4791                           tosl	equ	0xFFD
  4792                           pclath	equ	0xFFA
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postinc1	equ	0xFE6
  4803                           postdec1	equ	0xFE5
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           indf2	equ	0xFDF
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _Motor_Left_B_1A *****************
  4814 ;; Defined at:
  4815 ;;		line 123 in file "wheel4d.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  dir             1    wreg     unsigned char 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  dir             1   30[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0
  4830 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4832 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4833 ;;Total ram usage:        1 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    5
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_Wheel_Back_Left
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text42
  4844  0013E0                     __ptext42:
  4845                           	opt stack 0
  4846  0013E0                     _Motor_Left_B_1A:
  4847                           	opt stack 21
  4848                           
  4849                           ;incstack = 0
  4850                           ;Motor_Left_B_1A@dir stored from wreg
  4851  0013E0  6E1F               	movwf	Motor_Left_B_1A@dir,c
  4852                           
  4853                           ;wheel4d.c: 125: LATBbits.LATB5 = dir;
  4854  0013E2  B01F               	btfsc	Motor_Left_B_1A@dir,0,c
  4855  0013E4  D002               	bra	u1195
  4856  0013E6  9A8A               	bcf	3978,5,c	;volatile
  4857  0013E8  D001               	bra	u1196
  4858  0013EA                     u1195:
  4859  0013EA  8A8A               	bsf	3978,5,c	;volatile
  4860  0013EC                     u1196:
  4861  0013EC  0012               	return		;funcret
  4862  0013EE                     __end_of_Motor_Left_B_1A:
  4863                           	opt stack 0
  4864                           tosu	equ	0xFFF
  4865                           tosh	equ	0xFFE
  4866                           tosl	equ	0xFFD
  4867                           pclath	equ	0xFFA
  4868                           tblptru	equ	0xFF8
  4869                           tblptrh	equ	0xFF7
  4870                           tblptrl	equ	0xFF6
  4871                           tablat	equ	0xFF5
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           postinc1	equ	0xFE6
  4878                           postdec1	equ	0xFE5
  4879                           fsr1h	equ	0xFE2
  4880                           fsr1l	equ	0xFE1
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           postdec2	equ	0xFDD
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _CLOCK_ReadTimer *****************
  4889 ;; Defined at:
  4890 ;;		line 58 in file "clock.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  2   23[BANK0 ] unsigned int 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4904 ;;      Params:         0       2       0       0       0       0       0       0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4907 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4908 ;;Total ram usage:        2 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    6
  4911 ;; This function calls:
  4912 ;;		_TMR0_ReadTimer
  4913 ;; This function is called by:
  4914 ;;		_CLOCK_Task
  4915 ;;		_IR_Task
  4916 ;;		_CLOCK_Time_100us
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text43
  4921  0013EE                     __ptext43:
  4922                           	opt stack 0
  4923  0013EE                     _CLOCK_ReadTimer:
  4924                           	opt stack 22
  4925                           
  4926                           ;clock.c: 60: return(TMR0_ReadTimer());
  4927                           
  4928                           ;incstack = 0
  4929  0013EE  ECD8  F008         	call	_TMR0_ReadTimer	;wreg free
  4930  0013F2  C0C1  F0C3         	movff	?_TMR0_ReadTimer,?_CLOCK_ReadTimer
  4931  0013F6  C0C2  F0C4         	movff	?_TMR0_ReadTimer+1,?_CLOCK_ReadTimer+1
  4932  0013FA  0012               	return	
  4933  0013FC                     __end_of_CLOCK_ReadTimer:
  4934                           	opt stack 0
  4935                           tosu	equ	0xFFF
  4936                           tosh	equ	0xFFE
  4937                           tosl	equ	0xFFD
  4938                           pclath	equ	0xFFA
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           postinc1	equ	0xFE6
  4949                           postdec1	equ	0xFE5
  4950                           fsr1h	equ	0xFE2
  4951                           fsr1l	equ	0xFE1
  4952                           indf2	equ	0xFDF
  4953                           postinc2	equ	0xFDE
  4954                           postdec2	equ	0xFDD
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _TMR0_ReadTimer *****************
  4960 ;; Defined at:
  4961 ;;		line 42 in file "mcu_tmr0.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  readVal         2   32[COMRAM] unsigned int 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2   21[BANK0 ] unsigned int 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4975 ;;      Params:         0       2       0       0       0       0       0       0       0
  4976 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4977 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4978 ;;      Totals:         4       2       0       0       0       0       0       0       0
  4979 ;;Total ram usage:        6 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    5
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_CLOCK_ReadTimer
  4986 ;;		_CLOCK_ReadTimer_100us
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text44
  4991  0011B0                     __ptext44:
  4992                           	opt stack 0
  4993  0011B0                     _TMR0_ReadTimer:
  4994                           	opt stack 22
  4995                           
  4996                           ;mcu_tmr0.c: 44: uint16_t readVal;
  4997                           ;mcu_tmr0.c: 46: readVal = (TMR0H << 8) | TMR0L;
  4998                           
  4999                           ;incstack = 0
  5000  0011B0  50D6               	movf	4054,w,c	;volatile
  5001  0011B2  CFD7 F01F          	movff	4055,??_TMR0_ReadTimer	;volatile
  5002  0011B6  6A20               	clrf	(??_TMR0_ReadTimer+1)& (0+255),c
  5003  0011B8  C01F  F020         	movff	??_TMR0_ReadTimer,??_TMR0_ReadTimer+1
  5004  0011BC  6A1F               	clrf	??_TMR0_ReadTimer,c
  5005  0011BE  101F               	iorwf	??_TMR0_ReadTimer,w,c
  5006  0011C0  6E21               	movwf	TMR0_ReadTimer@readVal,c
  5007  0011C2  5020               	movf	??_TMR0_ReadTimer+1,w,c
  5008  0011C4  6E22               	movwf	TMR0_ReadTimer@readVal+1,c
  5009                           
  5010                           ;mcu_tmr0.c: 48: return readVal;
  5011  0011C6  C021  F0C1         	movff	TMR0_ReadTimer@readVal,?_TMR0_ReadTimer
  5012  0011CA  C022  F0C2         	movff	TMR0_ReadTimer@readVal+1,?_TMR0_ReadTimer+1
  5013  0011CE  0012               	return	
  5014  0011D0                     __end_of_TMR0_ReadTimer:
  5015                           	opt stack 0
  5016                           tosu	equ	0xFFF
  5017                           tosh	equ	0xFFE
  5018                           tosl	equ	0xFFD
  5019                           pclath	equ	0xFFA
  5020                           tblptru	equ	0xFF8
  5021                           tblptrh	equ	0xFF7
  5022                           tblptrl	equ	0xFF6
  5023                           tablat	equ	0xFF5
  5024                           prodh	equ	0xFF4
  5025                           prodl	equ	0xFF3
  5026                           intcon	equ	0xFF2
  5027                           postinc0	equ	0xFEE
  5028                           wreg	equ	0xFE8
  5029                           postinc1	equ	0xFE6
  5030                           postdec1	equ	0xFE5
  5031                           fsr1h	equ	0xFE2
  5032                           fsr1l	equ	0xFE1
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function _OS_AddThreads *****************
  5041 ;; Defined at:
  5042 ;;		line 37 in file "os.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  func1           2   21[BANK0 ] PTR FTN()void 
  5045 ;;		 -> IR_Task(1), 
  5046 ;;  func2           2   23[BANK0 ] PTR FTN()void 
  5047 ;;		 -> PICBOT_Task(1), 
  5048 ;;  func3           2   25[BANK0 ] PTR FTN()void 
  5049 ;;		 -> CLOCK_Task(1), 
  5050 ;;  func4           2   27[BANK0 ] PTR FTN()void 
  5051 ;;		 -> task4(1), 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;		None
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5063 ;;      Params:         0       8       0       0       0       0       0       0       0
  5064 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5066 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5067 ;;Total ram usage:        8 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    5
  5070 ;; This function calls:
  5071 ;;		Nothing
  5072 ;; This function is called by:
  5073 ;;		_main
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text45
  5078  000C58                     __ptext45:
  5079                           	opt stack 0
  5080  000C58                     _OS_AddThreads:
  5081                           	opt stack 25
  5082                           
  5083                           ;os.c: 42: tcbs[0].func = func1;
  5084                           
  5085                           ;incstack = 0
  5086  000C58  C0C1  F08C         	movff	OS_AddThreads@func1,_tcbs
  5087  000C5C  C0C2  F08D         	movff	OS_AddThreads@func1+1,_tcbs+1
  5088                           
  5089                           ;os.c: 43: tcbs[1].func = func2;
  5090  000C60  C0C3  F092         	movff	OS_AddThreads@func2,_tcbs+6
  5091  000C64  C0C4  F093         	movff	OS_AddThreads@func2+1,_tcbs+7
  5092                           
  5093                           ;os.c: 44: tcbs[2].func = func3;
  5094  000C68  C0C5  F098         	movff	OS_AddThreads@func3,_tcbs+12
  5095  000C6C  C0C6  F099         	movff	OS_AddThreads@func3+1,_tcbs+13
  5096                           
  5097                           ;os.c: 45: tcbs[3].func = func4;
  5098  000C70  C0C7  F09E         	movff	OS_AddThreads@func4,_tcbs+18
  5099  000C74  C0C8  F09F         	movff	OS_AddThreads@func4+1,_tcbs+19
  5100                           
  5101                           ;os.c: 47: tcbs[0].next = &tcbs[1];
  5102  000C78  0E92               	movlw	low (_tcbs+6)
  5103  000C7A  0100               	movlb	0	; () banked
  5104  000C7C  6F8E               	movwf	(_tcbs+2)& (0+255),b
  5105  000C7E  0E00               	movlw	high (_tcbs+6)
  5106  000C80  6F8F               	movwf	(_tcbs+3)& (0+255),b
  5107                           
  5108                           ;os.c: 48: tcbs[1].next = &tcbs[2];
  5109  000C82  0E98               	movlw	low (_tcbs+12)
  5110  000C84  6F94               	movwf	(_tcbs+8)& (0+255),b
  5111  000C86  0E00               	movlw	high (_tcbs+12)
  5112  000C88  6F95               	movwf	(_tcbs+9)& (0+255),b
  5113                           
  5114                           ;os.c: 49: tcbs[2].next = &tcbs[3];
  5115  000C8A  0E9E               	movlw	low (_tcbs+18)
  5116  000C8C  6F9A               	movwf	(_tcbs+14)& (0+255),b
  5117  000C8E  0E00               	movlw	high (_tcbs+18)
  5118  000C90  6F9B               	movwf	(_tcbs+15)& (0+255),b
  5119                           
  5120                           ;os.c: 50: tcbs[3].next = &tcbs[0];
  5121  000C92  0E8C               	movlw	low _tcbs
  5122  000C94  6FA0               	movwf	(_tcbs+20)& (0+255),b
  5123  000C96  0E00               	movlw	high _tcbs
  5124  000C98  6FA1               	movwf	(_tcbs+21)& (0+255),b
  5125                           
  5126                           ;os.c: 52: tcbs[0].blocked = 0;
  5127  000C9A  0E00               	movlw	0
  5128  000C9C  6F90               	movwf	(_tcbs+4)& (0+255),b
  5129  000C9E  0E00               	movlw	0
  5130  000CA0  6F91               	movwf	(_tcbs+5)& (0+255),b
  5131                           
  5132                           ;os.c: 53: tcbs[1].blocked = 0;
  5133  000CA2  0E00               	movlw	0
  5134  000CA4  6F96               	movwf	(_tcbs+10)& (0+255),b
  5135  000CA6  0E00               	movlw	0
  5136  000CA8  6F97               	movwf	(_tcbs+11)& (0+255),b
  5137                           
  5138                           ;os.c: 54: tcbs[2].blocked = 0;
  5139  000CAA  0E00               	movlw	0
  5140  000CAC  6F9C               	movwf	(_tcbs+16)& (0+255),b
  5141  000CAE  0E00               	movlw	0
  5142  000CB0  6F9D               	movwf	(_tcbs+17)& (0+255),b
  5143                           
  5144                           ;os.c: 55: tcbs[3].blocked = 0;
  5145  000CB2  0E00               	movlw	0
  5146  000CB4  6FA2               	movwf	(_tcbs+22)& (0+255),b
  5147  000CB6  0E00               	movlw	0
  5148  000CB8  6FA3               	movwf	(_tcbs+23)& (0+255),b
  5149                           
  5150                           ;os.c: 57: RunPt = &tcbs[0];
  5151  000CBA  0E8C               	movlw	low _tcbs
  5152  000CBC  6F84               	movwf	_RunPt& (0+255),b
  5153  000CBE  0E00               	movlw	high _tcbs
  5154  000CC0  6F85               	movwf	(_RunPt+1)& (0+255),b
  5155                           
  5156                           ; BSR set to: 0
  5157  000CC2  0012               	return		;funcret
  5158  000CC4                     __end_of_OS_AddThreads:
  5159                           	opt stack 0
  5160                           tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           pclath	equ	0xFFA
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           postinc1	equ	0xFE6
  5174                           postdec1	equ	0xFE5
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _LED_Enable *****************
  5185 ;; Defined at:
  5186 ;;		line 4 in file "led.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		None
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0
  5201 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5203 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5204 ;;Total ram usage:        0 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    5
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_main
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text46
  5215  001458                     __ptext46:
  5216                           	opt stack 0
  5217  001458                     _LED_Enable:
  5218                           	opt stack 25
  5219                           
  5220                           ;led.c: 6: LATEbits.LATE2 = 0;
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;incstack = 0
  5224  001458  948D               	bcf	3981,2,c	;volatile
  5225                           
  5226                           ;led.c: 7: TRISEbits.TRISE2 = 0;
  5227  00145A  9496               	bcf	3990,2,c	;volatile
  5228  00145C  0012               	return		;funcret
  5229  00145E                     __end_of_LED_Enable:
  5230                           	opt stack 0
  5231                           tosu	equ	0xFFF
  5232                           tosh	equ	0xFFE
  5233                           tosl	equ	0xFFD
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postinc1	equ	0xFE6
  5245                           postdec1	equ	0xFE5
  5246                           fsr1h	equ	0xFE2
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _IR_Init *****************
  5256 ;; Defined at:
  5257 ;;		line 123 in file "irdetect.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5275 ;;Total ram usage:        0 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    6
  5278 ;; This function calls:
  5279 ;;		_Fifo_Init
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text47
  5286  0013FC                     __ptext47:
  5287                           	opt stack 0
  5288  0013FC                     _IR_Init:
  5289                           	opt stack 24
  5290                           
  5291                           ;irdetect.c: 125: irstate.state = 0;
  5292                           
  5293                           ;incstack = 0
  5294  0013FC  0E00               	movlw	0
  5295  0013FE  0100               	movlb	0	; () banked
  5296  001400  6F83               	movwf	(_irstate+1)& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;irdetect.c: 126: irstate.Input = 0xFF;
  5300  001402  6982               	setf	_irstate& (0+255),b
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;irdetect.c: 127: Fifo_Init();
  5304  001404  EC8C  F007         	call	_Fifo_Init	;wreg free
  5305  001408  0012               	return		;funcret
  5306  00140A                     __end_of_IR_Init:
  5307                           	opt stack 0
  5308                           tosu	equ	0xFFF
  5309                           tosh	equ	0xFFE
  5310                           tosl	equ	0xFFD
  5311                           pclath	equ	0xFFA
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           postinc1	equ	0xFE6
  5322                           postdec1	equ	0xFE5
  5323                           fsr1h	equ	0xFE2
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           fsr2h	equ	0xFDA
  5329                           fsr2l	equ	0xFD9
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function _Fifo_Init *****************
  5333 ;; Defined at:
  5334 ;;		line 10 in file "sw_fifo.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  i               2   30[COMRAM] int 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0
  5349 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5351 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    5
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_IR_Init
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text48
  5363  000F18                     __ptext48:
  5364                           	opt stack 0
  5365  000F18                     _Fifo_Init:
  5366                           	opt stack 24
  5367                           
  5368                           ;sw_fifo.c: 12: int i = 0;
  5369                           
  5370                           ;incstack = 0
  5371  000F18  0E00               	movlw	0
  5372  000F1A  6E20               	movwf	Fifo_Init@i+1,c
  5373  000F1C  0E00               	movlw	0
  5374  000F1E  6E1F               	movwf	Fifo_Init@i,c
  5375                           
  5376                           ;sw_fifo.c: 14: for (i = 0; i < 16; i++)
  5377  000F20  0E00               	movlw	0
  5378  000F22  6E20               	movwf	Fifo_Init@i+1,c
  5379  000F24  0E00               	movlw	0
  5380  000F26  6E1F               	movwf	Fifo_Init@i,c
  5381  000F28                     l3119:
  5382  000F28  BE20               	btfsc	Fifo_Init@i+1,7,c
  5383  000F2A  D006               	goto	l454
  5384  000F2C  5020               	movf	Fifo_Init@i+1,w,c
  5385  000F2E  E114               	bnz	l3129
  5386  000F30  0E10               	movlw	16
  5387  000F32  5C1F               	subwf	Fifo_Init@i,w,c
  5388  000F34  B0D8               	btfsc	status,0,c
  5389  000F36  D010               	goto	u1490
  5390  000F38                     l454:
  5391                           
  5392                           ;sw_fifo.c: 15: {
  5393                           ;sw_fifo.c: 16: Fifo[i] = 0;
  5394  000F38  90D8               	bcf	status,0,c
  5395  000F3A  341F               	rlcf	Fifo_Init@i,w,c
  5396  000F3C  6ED9               	movwf	fsr2l,c
  5397  000F3E  3420               	rlcf	Fifo_Init@i+1,w,c
  5398  000F40  6EDA               	movwf	fsr2h,c
  5399  000F42  0E60               	movlw	low _Fifo
  5400  000F44  26D9               	addwf	fsr2l,f,c
  5401  000F46  0E00               	movlw	high _Fifo
  5402  000F48  22DA               	addwfc	fsr2h,f,c
  5403  000F4A  0E00               	movlw	0
  5404  000F4C  6EDE               	movwf	postinc2,c
  5405  000F4E  0E00               	movlw	0
  5406  000F50  6EDD               	movwf	postdec2,c
  5407  000F52  4A1F               	infsnz	Fifo_Init@i,f,c
  5408  000F54  2A20               	incf	Fifo_Init@i+1,f,c
  5409  000F56  D7E8               	goto	l3119
  5410  000F58                     u1490:
  5411  000F58                     l3129:
  5412                           
  5413                           ;sw_fifo.c: 17: }
  5414                           ;sw_fifo.c: 19: PutI = GetI = 0;
  5415  000F58  0E00               	movlw	0
  5416  000F5A  0100               	movlb	0	; () banked
  5417  000F5C  6F88               	movwf	_GetI& (0+255),b
  5418  000F5E  C088  F089         	movff	_GetI,_PutI
  5419                           
  5420                           ; BSR set to: 0
  5421  000F62  0012               	return		;funcret
  5422  000F64                     __end_of_Fifo_Init:
  5423                           	opt stack 0
  5424                           tosu	equ	0xFFF
  5425                           tosh	equ	0xFFE
  5426                           tosl	equ	0xFFD
  5427                           pclath	equ	0xFFA
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           postinc1	equ	0xFE6
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _INTERRUPT_Enable *****************
  5449 ;; Defined at:
  5450 ;;		line 8 in file "mcu_interrupt.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		None
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    5
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text49
  5479  00145E                     __ptext49:
  5480                           	opt stack 0
  5481  00145E                     _INTERRUPT_Enable:
  5482                           	opt stack 25
  5483                           
  5484                           ;mcu_interrupt.c: 10: INTCONbits.GIE = 1;
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;incstack = 0
  5488  00145E  8EF2               	bsf	intcon,7,c	;volatile
  5489                           
  5490                           ;mcu_interrupt.c: 11: INTCONbits.PEIE = 1;
  5491  001460  8CF2               	bsf	intcon,6,c	;volatile
  5492  001462  0012               	return		;funcret
  5493  001464                     __end_of_INTERRUPT_Enable:
  5494                           	opt stack 0
  5495                           tosu	equ	0xFFF
  5496                           tosh	equ	0xFFE
  5497                           tosl	equ	0xFFD
  5498                           pclath	equ	0xFFA
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodh	equ	0xFF4
  5504                           prodl	equ	0xFF3
  5505                           intcon	equ	0xFF2
  5506                           postinc0	equ	0xFEE
  5507                           wreg	equ	0xFE8
  5508                           postinc1	equ	0xFE6
  5509                           postdec1	equ	0xFE5
  5510                           fsr1h	equ	0xFE2
  5511                           fsr1l	equ	0xFE1
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _INT0_Enable *****************
  5520 ;; Defined at:
  5521 ;;		line 14 in file "mcu_int0.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		None
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5538 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5539 ;;Total ram usage:        0 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    5
  5542 ;; This function calls:
  5543 ;;		Nothing
  5544 ;; This function is called by:
  5545 ;;		_main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text50
  5550  001450                     __ptext50:
  5551                           	opt stack 0
  5552  001450                     _INT0_Enable:
  5553                           	opt stack 25
  5554                           
  5555                           ;mcu_int0.c: 16: TRISBbits.TRISB0 = 1;
  5556                           
  5557                           ;incstack = 0
  5558  001450  8093               	bsf	3987,0,c	;volatile
  5559                           
  5560                           ;mcu_int0.c: 17: INTCONbits.INT0IF = 0;
  5561  001452  92F2               	bcf	intcon,1,c	;volatile
  5562                           
  5563                           ;mcu_int0.c: 18: INTCONbits.INT0IE = 1;
  5564  001454  88F2               	bsf	intcon,4,c	;volatile
  5565  001456  0012               	return		;funcret
  5566  001458                     __end_of_INT0_Enable:
  5567                           	opt stack 0
  5568                           tosu	equ	0xFFF
  5569                           tosh	equ	0xFFE
  5570                           tosl	equ	0xFFD
  5571                           pclath	equ	0xFFA
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           postinc0	equ	0xFEE
  5580                           wreg	equ	0xFE8
  5581                           postinc1	equ	0xFE6
  5582                           postdec1	equ	0xFE5
  5583                           fsr1h	equ	0xFE2
  5584                           fsr1l	equ	0xFE1
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _DEBUG_Pin0Enable *****************
  5593 ;; Defined at:
  5594 ;;		line 6 in file "debug.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;		None
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		None
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5608 ;;      Params:         0       0       0       0       0       0       0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5611 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5612 ;;Total ram usage:        0 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; Hardware stack levels required when called:    5
  5615 ;; This function calls:
  5616 ;;		Nothing
  5617 ;; This function is called by:
  5618 ;;		_main
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text51
  5623  001464                     __ptext51:
  5624                           	opt stack 0
  5625  001464                     _DEBUG_Pin0Enable:
  5626                           	opt stack 25
  5627                           
  5628                           ;debug.c: 8: LATEbits.LATE1 = 0;
  5629                           
  5630                           ;incstack = 0
  5631  001464  928D               	bcf	3981,1,c	;volatile
  5632                           
  5633                           ;debug.c: 9: TRISEbits.TRISE1 = 0;
  5634  001466  9296               	bcf	3990,1,c	;volatile
  5635  001468  0012               	return		;funcret
  5636  00146A                     __end_of_DEBUG_Pin0Enable:
  5637                           	opt stack 0
  5638                           tosu	equ	0xFFF
  5639                           tosh	equ	0xFFE
  5640                           tosl	equ	0xFFD
  5641                           pclath	equ	0xFFA
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           postinc1	equ	0xFE6
  5652                           postdec1	equ	0xFE5
  5653                           fsr1h	equ	0xFE2
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _CONFIG_mcu *****************
  5663 ;; Defined at:
  5664 ;;		line 10 in file "mcu_config.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;		None
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5678 ;;      Params:         0       0       0       0       0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5682 ;;Total ram usage:        0 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    7
  5685 ;; This function calls:
  5686 ;;		_INT0_Init
  5687 ;;		_INTERRUPT_Init
  5688 ;;		_OSCILLATOR_Init
  5689 ;;		_PORTS_Init
  5690 ;;		_TMR0_Init
  5691 ;; This function is called by:
  5692 ;;		_main
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text52
  5697  0012E2                     __ptext52:
  5698                           	opt stack 0
  5699  0012E2                     _CONFIG_mcu:
  5700                           	opt stack 23
  5701                           
  5702                           ;mcu_config.c: 12: OSCILLATOR_Init();
  5703                           
  5704                           ;incstack = 0
  5705  0012E2  EC13  F00A         	call	_OSCILLATOR_Init	;wreg free
  5706                           
  5707                           ;mcu_config.c: 14: PORTS_Init();
  5708  0012E6  EC90  F008         	call	_PORTS_Init	;wreg free
  5709                           
  5710                           ;mcu_config.c: 16: INTERRUPT_Init();
  5711  0012EA  EC62  F006         	call	_INTERRUPT_Init	;wreg free
  5712                           
  5713                           ;mcu_config.c: 18: TMR0_Init();
  5714  0012EE  EC75  F008         	call	_TMR0_Init	;wreg free
  5715                           
  5716                           ;mcu_config.c: 20: INT0_Init();
  5717  0012F2  EC19  F00A         	call	_INT0_Init	;wreg free
  5718  0012F6  0012               	return		;funcret
  5719  0012F8                     __end_of_CONFIG_mcu:
  5720                           	opt stack 0
  5721                           tosu	equ	0xFFF
  5722                           tosh	equ	0xFFE
  5723                           tosl	equ	0xFFD
  5724                           pclath	equ	0xFFA
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodh	equ	0xFF4
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           postinc1	equ	0xFE6
  5735                           postdec1	equ	0xFE5
  5736                           fsr1h	equ	0xFE2
  5737                           fsr1l	equ	0xFE1
  5738                           indf2	equ	0xFDF
  5739                           postinc2	equ	0xFDE
  5740                           postdec2	equ	0xFDD
  5741                           fsr2h	equ	0xFDA
  5742                           fsr2l	equ	0xFD9
  5743                           status	equ	0xFD8
  5744                           
  5745 ;; *************** function _TMR0_Init *****************
  5746 ;; Defined at:
  5747 ;;		line 8 in file "mcu_tmr0.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5761 ;;      Params:         0       0       0       0       0       0       0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5763 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5764 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        2 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    5
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_CONFIG_mcu
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text53
  5776  0010EA                     __ptext53:
  5777                           	opt stack 0
  5778  0010EA                     _TMR0_Init:
  5779                           	opt stack 24
  5780                           
  5781                           ;mcu_tmr0.c: 11: T0CONbits.T0PS = 7;
  5782                           
  5783                           ;incstack = 0
  5784  0010EA  80D5               	bsf	4053,0,c	;volatile
  5785  0010EC  82D5               	bsf	4053,1,c	;volatile
  5786  0010EE  84D5               	bsf	4053,2,c	;volatile
  5787                           
  5788                           ;mcu_tmr0.c: 12: T0CONbits.PSA = 0;
  5789  0010F0  96D5               	bcf	4053,3,c	;volatile
  5790                           
  5791                           ;mcu_tmr0.c: 13: T0CONbits.T0CS = 0;
  5792  0010F2  9AD5               	bcf	4053,5,c	;volatile
  5793                           
  5794                           ;mcu_tmr0.c: 14: T0CONbits.T08BIT = 0;
  5795  0010F4  9CD5               	bcf	4053,6,c	;volatile
  5796                           
  5797                           ;mcu_tmr0.c: 15: T0CONbits.TMR0ON = 0;
  5798  0010F6  9ED5               	bcf	4053,7,c	;volatile
  5799                           
  5800                           ;mcu_tmr0.c: 18: TMR1H = 0x00;
  5801  0010F8  0E00               	movlw	0
  5802  0010FA  6ECF               	movwf	4047,c	;volatile
  5803                           
  5804                           ;mcu_tmr0.c: 19: TMR0L = 0x00;
  5805  0010FC  0E00               	movlw	0
  5806  0010FE  6ED6               	movwf	4054,c	;volatile
  5807                           
  5808                           ;mcu_tmr0.c: 22: timer0ReloadVal=(TMR0H << 8) | TMR0L;
  5809  001100  50D6               	movf	4054,w,c	;volatile
  5810  001102  CFD7 F01F          	movff	4055,??_TMR0_Init	;volatile
  5811  001106  6A20               	clrf	(??_TMR0_Init+1)& (0+255),c
  5812  001108  C01F  F020         	movff	??_TMR0_Init,??_TMR0_Init+1
  5813  00110C  6A1F               	clrf	??_TMR0_Init,c
  5814  00110E  101F               	iorwf	??_TMR0_Init,w,c
  5815  001110  6E38               	movwf	_timer0ReloadVal,c	;volatile
  5816  001112  5020               	movf	??_TMR0_Init+1,w,c
  5817  001114  6E39               	movwf	_timer0ReloadVal+1,c	;volatile
  5818                           
  5819                           ;mcu_tmr0.c: 24: timer0ReloadVal = TMR0L;
  5820  001116  CFD6 F038          	movff	4054,_timer0ReloadVal	;volatile
  5821  00111A  6A39               	clrf	_timer0ReloadVal+1,c	;volatile
  5822                           
  5823                           ;mcu_tmr0.c: 26: INTCONbits.TMR0IF = 0;
  5824  00111C  94F2               	bcf	intcon,2,c	;volatile
  5825  00111E  0012               	return		;funcret
  5826  001120                     __end_of_TMR0_Init:
  5827                           	opt stack 0
  5828                           tosu	equ	0xFFF
  5829                           tosh	equ	0xFFE
  5830                           tosl	equ	0xFFD
  5831                           pclath	equ	0xFFA
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           postinc1	equ	0xFE6
  5842                           postdec1	equ	0xFE5
  5843                           fsr1h	equ	0xFE2
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _PORTS_Init *****************
  5853 ;; Defined at:
  5854 ;;		line 4 in file "mcu_ports.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;		None
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;		None
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      void 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0
  5869 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5871 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5872 ;;Total ram usage:        0 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    5
  5875 ;; This function calls:
  5876 ;;		Nothing
  5877 ;; This function is called by:
  5878 ;;		_CONFIG_mcu
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text54
  5883  001120                     __ptext54:
  5884                           	opt stack 0
  5885  001120                     _PORTS_Init:
  5886                           	opt stack 24
  5887                           
  5888                           ;mcu_ports.c: 6: TRISA = 0xFF;
  5889                           
  5890                           ;incstack = 0
  5891  001120  6892               	setf	3986,c	;volatile
  5892                           
  5893                           ;mcu_ports.c: 7: TRISB = 0xFF;
  5894  001122  6893               	setf	3987,c	;volatile
  5895                           
  5896                           ;mcu_ports.c: 8: TRISC = 0xFF;
  5897  001124  6894               	setf	3988,c	;volatile
  5898                           
  5899                           ;mcu_ports.c: 9: TRISD = 0xFF;
  5900  001126  6895               	setf	3989,c	;volatile
  5901                           
  5902                           ;mcu_ports.c: 10: TRISE = 0xFF;
  5903  001128  6896               	setf	3990,c	;volatile
  5904                           
  5905                           ;mcu_ports.c: 12: LATA = 0x00;
  5906  00112A  0E00               	movlw	0
  5907  00112C  6E89               	movwf	3977,c	;volatile
  5908                           
  5909                           ;mcu_ports.c: 13: LATB = 0x00;
  5910  00112E  0E00               	movlw	0
  5911  001130  6E8A               	movwf	3978,c	;volatile
  5912                           
  5913                           ;mcu_ports.c: 14: LATC = 0x00;
  5914  001132  0E00               	movlw	0
  5915  001134  6E8B               	movwf	3979,c	;volatile
  5916                           
  5917                           ;mcu_ports.c: 15: LATD = 0x00;
  5918  001136  0E00               	movlw	0
  5919  001138  6E8C               	movwf	3980,c	;volatile
  5920                           
  5921                           ;mcu_ports.c: 16: LATE = 0x00;
  5922  00113A  0E00               	movlw	0
  5923  00113C  6E8D               	movwf	3981,c	;volatile
  5924                           
  5925                           ;mcu_ports.c: 18: ADCON1bits.PCFG = 0xF;
  5926  00113E  80C1               	bsf	4033,0,c	;volatile
  5927  001140  82C1               	bsf	4033,1,c	;volatile
  5928  001142  84C1               	bsf	4033,2,c	;volatile
  5929  001144  86C1               	bsf	4033,3,c	;volatile
  5930  001146  0012               	return		;funcret
  5931  001148                     __end_of_PORTS_Init:
  5932                           	opt stack 0
  5933                           tosu	equ	0xFFF
  5934                           tosh	equ	0xFFE
  5935                           tosl	equ	0xFFD
  5936                           pclath	equ	0xFFA
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           intcon	equ	0xFF2
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           postinc1	equ	0xFE6
  5947                           postdec1	equ	0xFE5
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           indf2	equ	0xFDF
  5951                           postinc2	equ	0xFDE
  5952                           postdec2	equ	0xFDD
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _OSCILLATOR_Init *****************
  5958 ;; Defined at:
  5959 ;;		line 5 in file "mcu_oscillator.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, status,2
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5973 ;;      Params:         0       0       0       0       0       0       0       0       0
  5974 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5976 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    5
  5980 ;; This function calls:
  5981 ;;		Nothing
  5982 ;; This function is called by:
  5983 ;;		_CONFIG_mcu
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text55
  5988  001426                     __ptext55:
  5989                           	opt stack 0
  5990  001426                     _OSCILLATOR_Init:
  5991                           	opt stack 24
  5992                           
  5993                           ;mcu_oscillator.c: 11: OSCCONbits.IDLEN = 0;
  5994                           
  5995                           ;incstack = 0
  5996  001426  9ED3               	bcf	4051,7,c	;volatile
  5997                           
  5998                           ;mcu_oscillator.c: 12: OSCCONbits.SCS = 0;
  5999  001428  0EFC               	movlw	-4
  6000  00142A  16D3               	andwf	4051,f,c	;volatile
  6001  00142C  B6D3               	btfsc	4051,3,c	;volatile
  6002  00142E  0012               	return	
  6003  001430  D7FD               	goto	l107
  6004  001432                     __end_of_OSCILLATOR_Init:
  6005                           	opt stack 0
  6006                           tosu	equ	0xFFF
  6007                           tosh	equ	0xFFE
  6008                           tosl	equ	0xFFD
  6009                           pclath	equ	0xFFA
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           postinc0	equ	0xFEE
  6018                           wreg	equ	0xFE8
  6019                           postinc1	equ	0xFE6
  6020                           postdec1	equ	0xFE5
  6021                           fsr1h	equ	0xFE2
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _INTERRUPT_Init *****************
  6031 ;; Defined at:
  6032 ;;		line 14 in file "mcu_interrupt.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;		None
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      void 
  6039 ;; Registers used:
  6040 ;;		wreg, status,2
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6046 ;;      Params:         0       0       0       0       0       0       0       0       0
  6047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6049 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6050 ;;Total ram usage:        0 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    5
  6053 ;; This function calls:
  6054 ;;		Nothing
  6055 ;; This function is called by:
  6056 ;;		_CONFIG_mcu
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text56
  6061  000CC4                     __ptext56:
  6062                           	opt stack 0
  6063  000CC4                     _INTERRUPT_Init:
  6064                           	opt stack 24
  6065                           
  6066                           ;mcu_interrupt.c: 18: PIR1bits.TMR1IF = 0;
  6067                           
  6068                           ;incstack = 0
  6069  000CC4  909E               	bcf	3998,0,c	;volatile
  6070                           
  6071                           ;mcu_interrupt.c: 19: PIR1bits.TMR2IF = 0;
  6072  000CC6  929E               	bcf	3998,1,c	;volatile
  6073                           
  6074                           ;mcu_interrupt.c: 20: PIR1bits.CCP1IF = 0;
  6075  000CC8  949E               	bcf	3998,2,c	;volatile
  6076                           
  6077                           ;mcu_interrupt.c: 21: PIR1bits.SSPIF = 0;
  6078  000CCA  969E               	bcf	3998,3,c	;volatile
  6079                           
  6080                           ;mcu_interrupt.c: 22: PIR1bits.TXIF = 0;
  6081  000CCC  989E               	bcf	3998,4,c	;volatile
  6082                           
  6083                           ;mcu_interrupt.c: 23: PIR1bits.RCIF = 0;
  6084  000CCE  9A9E               	bcf	3998,5,c	;volatile
  6085                           
  6086                           ;mcu_interrupt.c: 24: PIR1bits.ADIF = 0;
  6087  000CD0  9C9E               	bcf	3998,6,c	;volatile
  6088                           
  6089                           ;mcu_interrupt.c: 25: PIR1bits.SPPIF = 0;
  6090  000CD2  9E9E               	bcf	3998,7,c	;volatile
  6091                           
  6092                           ;mcu_interrupt.c: 28: PIR2 = 0x00;
  6093  000CD4  0E00               	movlw	0
  6094  000CD6  6EA1               	movwf	4001,c	;volatile
  6095                           
  6096                           ;mcu_interrupt.c: 31: PIE1bits.TMR1IE = 0;
  6097  000CD8  909D               	bcf	3997,0,c	;volatile
  6098                           
  6099                           ;mcu_interrupt.c: 32: PIE1bits.TMR2IE = 0;
  6100  000CDA  929D               	bcf	3997,1,c	;volatile
  6101                           
  6102                           ;mcu_interrupt.c: 33: PIE1bits.CCP1IE = 0;
  6103  000CDC  949D               	bcf	3997,2,c	;volatile
  6104                           
  6105                           ;mcu_interrupt.c: 34: PIE1bits.SSPIE = 0;
  6106  000CDE  969D               	bcf	3997,3,c	;volatile
  6107                           
  6108                           ;mcu_interrupt.c: 35: PIE1bits.TXIE = 0;
  6109  000CE0  989D               	bcf	3997,4,c	;volatile
  6110                           
  6111                           ;mcu_interrupt.c: 36: PIE1bits.RCIE = 0;
  6112  000CE2  9A9D               	bcf	3997,5,c	;volatile
  6113                           
  6114                           ;mcu_interrupt.c: 37: PIE1bits.ADIE = 0;
  6115  000CE4  9C9D               	bcf	3997,6,c	;volatile
  6116                           
  6117                           ;mcu_interrupt.c: 38: PIE1bits.SPPIE = 0;
  6118  000CE6  9E9D               	bcf	3997,7,c	;volatile
  6119                           
  6120                           ;mcu_interrupt.c: 41: PIE2 = 0x00;
  6121  000CE8  0E00               	movlw	0
  6122  000CEA  6EA0               	movwf	4000,c	;volatile
  6123                           
  6124                           ;mcu_interrupt.c: 44: IPR1bits.TMR1IP = 0;
  6125  000CEC  909F               	bcf	3999,0,c	;volatile
  6126                           
  6127                           ;mcu_interrupt.c: 45: IPR1bits.TMR2IP = 0;
  6128  000CEE  929F               	bcf	3999,1,c	;volatile
  6129                           
  6130                           ;mcu_interrupt.c: 46: IPR1bits.CCP1IP = 0;
  6131  000CF0  949F               	bcf	3999,2,c	;volatile
  6132                           
  6133                           ;mcu_interrupt.c: 47: IPR1bits.SSPIP = 0;
  6134  000CF2  969F               	bcf	3999,3,c	;volatile
  6135                           
  6136                           ;mcu_interrupt.c: 48: IPR1bits.TXIP = 0;
  6137  000CF4  989F               	bcf	3999,4,c	;volatile
  6138                           
  6139                           ;mcu_interrupt.c: 49: IPR1bits.RCIP = 0;
  6140  000CF6  9A9F               	bcf	3999,5,c	;volatile
  6141                           
  6142                           ;mcu_interrupt.c: 50: IPR1bits.ADIP = 0;
  6143  000CF8  9C9F               	bcf	3999,6,c	;volatile
  6144                           
  6145                           ;mcu_interrupt.c: 51: IPR1bits.SPPIP = 0;
  6146  000CFA  9E9F               	bcf	3999,7,c	;volatile
  6147                           
  6148                           ;mcu_interrupt.c: 54: IPR2 = 0x00;
  6149  000CFC  0E00               	movlw	0
  6150  000CFE  6EA2               	movwf	4002,c	;volatile
  6151                           
  6152                           ;mcu_interrupt.c: 57: INTCON3bits.INT1F = 0;
  6153  000D00  90F0               	bcf	intcon3,0,c	;volatile
  6154                           
  6155                           ;mcu_interrupt.c: 58: INTCON3bits.INT2F = 0;
  6156  000D02  92F0               	bcf	intcon3,1,c	;volatile
  6157                           
  6158                           ;mcu_interrupt.c: 59: INTCON3bits.INT1E = 0;
  6159  000D04  96F0               	bcf	intcon3,3,c	;volatile
  6160                           
  6161                           ;mcu_interrupt.c: 60: INTCON3bits.INT2E = 0;
  6162  000D06  98F0               	bcf	intcon3,4,c	;volatile
  6163                           
  6164                           ;mcu_interrupt.c: 61: INTCON3bits.INT1P = 0;
  6165  000D08  9CF0               	bcf	intcon3,6,c	;volatile
  6166                           
  6167                           ;mcu_interrupt.c: 62: INTCON3bits.INT2P = 0;
  6168  000D0A  9EF0               	bcf	intcon3,7,c	;volatile
  6169                           
  6170                           ;mcu_interrupt.c: 65: INTCON2bits.NOT_RBPU = 0;
  6171  000D0C  9EF1               	bcf	intcon2,7,c	;volatile
  6172                           
  6173                           ;mcu_interrupt.c: 66: INTCON2bits.INTEDG0 = 0;
  6174  000D0E  9CF1               	bcf	intcon2,6,c	;volatile
  6175                           
  6176                           ;mcu_interrupt.c: 67: INTCON2bits.INTEDG1 = 0;
  6177  000D10  9AF1               	bcf	intcon2,5,c	;volatile
  6178                           
  6179                           ;mcu_interrupt.c: 68: INTCON2bits.INTEDG2 = 0;
  6180  000D12  98F1               	bcf	intcon2,4,c	;volatile
  6181                           
  6182                           ;mcu_interrupt.c: 69: INTCON2bits.TMR0IP = 0;
  6183  000D14  94F1               	bcf	intcon2,2,c	;volatile
  6184                           
  6185                           ;mcu_interrupt.c: 70: INTCON2bits.RBIP = 0;
  6186  000D16  90F1               	bcf	intcon2,0,c	;volatile
  6187                           
  6188                           ;mcu_interrupt.c: 74: INTCONbits.RBIF = 0;
  6189  000D18  90F2               	bcf	intcon,0,c	;volatile
  6190                           
  6191                           ;mcu_interrupt.c: 75: INTCONbits.INT0IF = 0;
  6192  000D1A  92F2               	bcf	intcon,1,c	;volatile
  6193                           
  6194                           ;mcu_interrupt.c: 76: INTCONbits.TMR0IF = 0;
  6195  000D1C  94F2               	bcf	intcon,2,c	;volatile
  6196                           
  6197                           ;mcu_interrupt.c: 77: INTCONbits.RBIE = 0;
  6198  000D1E  96F2               	bcf	intcon,3,c	;volatile
  6199                           
  6200                           ;mcu_interrupt.c: 78: INTCONbits.INT0IE = 0;
  6201  000D20  98F2               	bcf	intcon,4,c	;volatile
  6202                           
  6203                           ;mcu_interrupt.c: 79: INTCONbits.TMR0IE = 0;
  6204  000D22  9AF2               	bcf	intcon,5,c	;volatile
  6205                           
  6206                           ;mcu_interrupt.c: 80: INTCONbits.PEIE = 0;
  6207  000D24  9CF2               	bcf	intcon,6,c	;volatile
  6208                           
  6209                           ;mcu_interrupt.c: 81: INTCONbits.GIE = 0;
  6210  000D26  9EF2               	bcf	intcon,7,c	;volatile
  6211                           
  6212                           ;mcu_interrupt.c: 84: RCONbits.IPEN = 1;
  6213  000D28  8ED0               	bsf	4048,7,c	;volatile
  6214  000D2A  0012               	return		;funcret
  6215  000D2C                     __end_of_INTERRUPT_Init:
  6216                           	opt stack 0
  6217                           tosu	equ	0xFFF
  6218                           tosh	equ	0xFFE
  6219                           tosl	equ	0xFFD
  6220                           pclath	equ	0xFFA
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodh	equ	0xFF4
  6226                           prodl	equ	0xFF3
  6227                           intcon	equ	0xFF2
  6228                           intcon2	equ	0xFF1
  6229                           intcon3	equ	0xFF0
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           postinc1	equ	0xFE6
  6233                           postdec1	equ	0xFE5
  6234                           fsr1h	equ	0xFE2
  6235                           fsr1l	equ	0xFE1
  6236                           indf2	equ	0xFDF
  6237                           postinc2	equ	0xFDE
  6238                           postdec2	equ	0xFDD
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function _INT0_Init *****************
  6244 ;; Defined at:
  6245 ;;		line 5 in file "mcu_int0.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    6
  6266 ;; This function calls:
  6267 ;;		_INT0_FallingEdge
  6268 ;; This function is called by:
  6269 ;;		_CONFIG_mcu
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text57
  6274  001432                     __ptext57:
  6275                           	opt stack 0
  6276  001432                     _INT0_Init:
  6277                           	opt stack 23
  6278                           
  6279                           ;mcu_int0.c: 7: INTCONbits.INT0IF = 0;
  6280                           
  6281                           ;incstack = 0
  6282  001432  92F2               	bcf	intcon,1,c	;volatile
  6283                           
  6284                           ;mcu_int0.c: 9: INTCONbits.INT0IE = 0;
  6285  001434  98F2               	bcf	intcon,4,c	;volatile
  6286                           
  6287                           ;mcu_int0.c: 11: INT0_FallingEdge();
  6288  001436  EC41  F00A         	call	_INT0_FallingEdge	;wreg free
  6289  00143A  0012               	return		;funcret
  6290  00143C                     __end_of_INT0_Init:
  6291                           	opt stack 0
  6292                           tosu	equ	0xFFF
  6293                           tosh	equ	0xFFE
  6294                           tosl	equ	0xFFD
  6295                           pclath	equ	0xFFA
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           intcon2	equ	0xFF1
  6304                           intcon3	equ	0xFF0
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postinc1	equ	0xFE6
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _INT0_FallingEdge *****************
  6319 ;; Defined at:
  6320 ;;		line 27 in file "mcu_int0.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		None
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6337 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    5
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_INT0_Init
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text58
  6349  001482                     __ptext58:
  6350                           	opt stack 0
  6351  001482                     _INT0_FallingEdge:
  6352                           	opt stack 23
  6353                           
  6354                           ;mcu_int0.c: 29: INTCON2bits.INTEDG0 = 0;
  6355                           
  6356                           ;incstack = 0
  6357  001482  9CF1               	bcf	intcon2,6,c	;volatile
  6358  001484  0012               	return		;funcret
  6359  001486                     __end_of_INT0_FallingEdge:
  6360                           	opt stack 0
  6361                           tosu	equ	0xFFF
  6362                           tosh	equ	0xFFE
  6363                           tosl	equ	0xFFD
  6364                           pclath	equ	0xFFA
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           intcon2	equ	0xFF1
  6373                           intcon3	equ	0xFF0
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           postinc1	equ	0xFE6
  6377                           postdec1	equ	0xFE5
  6378                           fsr1h	equ	0xFE2
  6379                           fsr1l	equ	0xFE1
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _CLOCK_Enable *****************
  6388 ;; Defined at:
  6389 ;;		line 42 in file "clock.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6403 ;;      Params:         0       0       0       0       0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6406 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6407 ;;Total ram usage:        0 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    6
  6410 ;; This function calls:
  6411 ;;		_TMR0_Enable
  6412 ;; This function is called by:
  6413 ;;		_main
  6414 ;;		_CLOCK_Time_100us
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text59
  6419  00146A                     __ptext59:
  6420                           	opt stack 0
  6421  00146A                     _CLOCK_Enable:
  6422                           	opt stack 24
  6423                           
  6424                           ;clock.c: 44: TMR0_Enable();
  6425                           
  6426                           ;incstack = 0
  6427  00146A  EC43  F00A         	call	_TMR0_Enable	;wreg free
  6428  00146E  0012               	return		;funcret
  6429  001470                     __end_of_CLOCK_Enable:
  6430                           	opt stack 0
  6431                           tosu	equ	0xFFF
  6432                           tosh	equ	0xFFE
  6433                           tosl	equ	0xFFD
  6434                           pclath	equ	0xFFA
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           intcon2	equ	0xFF1
  6443                           intcon3	equ	0xFF0
  6444                           postinc0	equ	0xFEE
  6445                           wreg	equ	0xFE8
  6446                           postinc1	equ	0xFE6
  6447                           postdec1	equ	0xFE5
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _TMR0_Enable *****************
  6458 ;; Defined at:
  6459 ;;		line 30 in file "mcu_tmr0.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		None
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6476 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    5
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_CLOCK_Enable
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text60
  6488  001486                     __ptext60:
  6489                           	opt stack 0
  6490  001486                     _TMR0_Enable:
  6491                           	opt stack 24
  6492                           
  6493                           ;mcu_tmr0.c: 33: T0CONbits.TMR0ON = 1;
  6494                           
  6495                           ;incstack = 0
  6496  001486  8ED5               	bsf	4053,7,c	;volatile
  6497  001488  0012               	return		;funcret
  6498  00148A                     __end_of_TMR0_Enable:
  6499                           	opt stack 0
  6500                           tosu	equ	0xFFF
  6501                           tosh	equ	0xFFE
  6502                           tosl	equ	0xFFD
  6503                           pclath	equ	0xFFA
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon2	equ	0xFF1
  6512                           intcon3	equ	0xFF0
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           postinc1	equ	0xFE6
  6516                           postdec1	equ	0xFE5
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _LowISR *****************
  6527 ;; Defined at:
  6528 ;;		line 37 in file "isr.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		None
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6542 ;;      Params:         0       0       0       0       0       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6544 ;;      Temps:          0      21       0       0       0       0       0       0       0
  6545 ;;      Totals:         0      21       0       0       0       0       0       0       0
  6546 ;;Total ram usage:       21 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    4
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		Interrupt level 1
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	intcodelo
  6557  000018                     __pintcodelo:
  6558                           	opt stack 0
  6559  000018                     _LowISR:
  6560                           	opt stack 21
  6561                           
  6562                           ;incstack = 0
  6563  000018  8041               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6564  00001A  CFD8 F0AC          	movff	status,??_LowISR
  6565  00001E  CFE8 F0AD          	movff	wreg,??_LowISR+1
  6566  000022  CFE0 F0AE          	movff	bsr,??_LowISR+2
  6567  000026  CFFA F0AF          	movff	pclath,??_LowISR+3
  6568  00002A  CFFB F0B0          	movff	pclatu,??_LowISR+4
  6569  00002E  CFE9 F0B1          	movff	fsr0l,??_LowISR+5
  6570  000032  CFEA F0B2          	movff	fsr0h,??_LowISR+6
  6571  000036  CFE1 F0B3          	movff	fsr1l,??_LowISR+7
  6572  00003A  CFE2 F0B4          	movff	fsr1h,??_LowISR+8
  6573  00003E  CFD9 F0B5          	movff	fsr2l,??_LowISR+9
  6574  000042  CFDA F0B6          	movff	fsr2h,??_LowISR+10
  6575  000046  CFF3 F0B7          	movff	prodl,??_LowISR+11
  6576  00004A  CFF4 F0B8          	movff	prodh,??_LowISR+12
  6577  00004E  CFF6 F0B9          	movff	tblptrl,??_LowISR+13
  6578  000052  CFF7 F0BA          	movff	tblptrh,??_LowISR+14
  6579  000056  CFF8 F0BB          	movff	tblptru,??_LowISR+15
  6580  00005A  CFF5 F0BC          	movff	tablat,??_LowISR+16
  6581  00005E  C041  F0BD         	movff	btemp,??_LowISR+17
  6582  000062  C042  F0BE         	movff	btemp+1,??_LowISR+18
  6583  000066  C043  F0BF         	movff	btemp+2,??_LowISR+19
  6584  00006A  C044  F0C0         	movff	btemp+3,??_LowISR+20
  6585  00006E  C0C0  F044         	movff	??_LowISR+20,btemp+3
  6586  000072  C0BF  F043         	movff	??_LowISR+19,btemp+2
  6587  000076  C0BE  F042         	movff	??_LowISR+18,btemp+1
  6588  00007A  C0BD  F041         	movff	??_LowISR+17,btemp
  6589  00007E  C0BC  FFF5         	movff	??_LowISR+16,tablat
  6590  000082  C0BB  FFF8         	movff	??_LowISR+15,tblptru
  6591  000086  C0BA  FFF7         	movff	??_LowISR+14,tblptrh
  6592  00008A  C0B9  FFF6         	movff	??_LowISR+13,tblptrl
  6593  00008E  C0B8  FFF4         	movff	??_LowISR+12,prodh
  6594  000092  C0B7  FFF3         	movff	??_LowISR+11,prodl
  6595  000096  C0B6  FFDA         	movff	??_LowISR+10,fsr2h
  6596  00009A  C0B5  FFD9         	movff	??_LowISR+9,fsr2l
  6597  00009E  C0B4  FFE2         	movff	??_LowISR+8,fsr1h
  6598  0000A2  C0B3  FFE1         	movff	??_LowISR+7,fsr1l
  6599  0000A6  C0B2  FFEA         	movff	??_LowISR+6,fsr0h
  6600  0000AA  C0B1  FFE9         	movff	??_LowISR+5,fsr0l
  6601  0000AE  C0B0  FFFB         	movff	??_LowISR+4,pclatu
  6602  0000B2  C0AF  FFFA         	movff	??_LowISR+3,pclath
  6603  0000B6  C0AE  FFE0         	movff	??_LowISR+2,bsr
  6604  0000BA  C0AD  FFE8         	movff	??_LowISR+1,wreg
  6605  0000BE  C0AC  FFD8         	movff	??_LowISR,status
  6606  0000C2  9041               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6607  0000C4  0010               	retfie	
  6608  0000C6                     __end_of_LowISR:
  6609                           	opt stack 0
  6610                           tosu	equ	0xFFF
  6611                           tosh	equ	0xFFE
  6612                           tosl	equ	0xFFD
  6613                           pclatu	equ	0xFFB
  6614                           pclath	equ	0xFFA
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           intcon	equ	0xFF2
  6622                           intcon2	equ	0xFF1
  6623                           intcon3	equ	0xFF0
  6624                           postinc0	equ	0xFEE
  6625                           fsr0h	equ	0xFEA
  6626                           fsr0l	equ	0xFE9
  6627                           wreg	equ	0xFE8
  6628                           postinc1	equ	0xFE6
  6629                           postdec1	equ	0xFE5
  6630                           fsr1h	equ	0xFE2
  6631                           fsr1l	equ	0xFE1
  6632                           bsr	equ	0xFE0
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _HighISR *****************
  6641 ;; Defined at:
  6642 ;;		line 11 in file "isr.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6658 ;;      Temps:         18       0       0       0       0       0       0       0       0
  6659 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6660 ;;Total ram usage:       18 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    3
  6663 ;; This function calls:
  6664 ;;		_CLOCK_Time_Tick
  6665 ;;		_INT0_RisingEdge
  6666 ;;		_IR_handle
  6667 ;;		_LED_Off
  6668 ;;		_LED_On
  6669 ;;		_SEMA_SetIRdetect
  6670 ;;		i2_INT0_FallingEdge
  6671 ;; This function is called by:
  6672 ;;		Interrupt level 2
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	intcode
  6677  000008                     __pintcode:
  6678                           	opt stack 0
  6679  000008                     _HighISR:
  6680                           	opt stack 21
  6681                           
  6682                           ;incstack = 0
  6683  000008  8241               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6684  00000A  ED0D  F004         	call	int_func,f	;refresh shadow registers
  6685                           tosu	equ	0xFFF
  6686                           tosh	equ	0xFFE
  6687                           tosl	equ	0xFFD
  6688                           pclatu	equ	0xFFB
  6689                           pclath	equ	0xFFA
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           intcon2	equ	0xFF1
  6698                           intcon3	equ	0xFF0
  6699                           postinc0	equ	0xFEE
  6700                           fsr0h	equ	0xFEA
  6701                           fsr0l	equ	0xFE9
  6702                           wreg	equ	0xFE8
  6703                           postinc1	equ	0xFE6
  6704                           postdec1	equ	0xFE5
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           bsr	equ	0xFE0
  6708                           indf2	equ	0xFDF
  6709                           postinc2	equ	0xFDE
  6710                           postdec2	equ	0xFDD
  6711                           fsr2h	equ	0xFDA
  6712                           fsr2l	equ	0xFD9
  6713                           status	equ	0xFD8
  6714                           
  6715                           	psect	intcode_body
  6716  00081A                     __pintcode_body:
  6717                           	opt stack 21
  6718  00081A                     int_func:
  6719                           	opt stack 21
  6720  00081A  0006               	pop		; remove dummy address from shadow register refresh
  6721  00081C  CFFA F00D          	movff	pclath,??_HighISR
  6722  000820  CFFB F00E          	movff	pclatu,??_HighISR+1
  6723  000824  CFE9 F00F          	movff	fsr0l,??_HighISR+2
  6724  000828  CFEA F010          	movff	fsr0h,??_HighISR+3
  6725  00082C  CFE1 F011          	movff	fsr1l,??_HighISR+4
  6726  000830  CFE2 F012          	movff	fsr1h,??_HighISR+5
  6727  000834  CFD9 F013          	movff	fsr2l,??_HighISR+6
  6728  000838  CFDA F014          	movff	fsr2h,??_HighISR+7
  6729  00083C  CFF3 F015          	movff	prodl,??_HighISR+8
  6730  000840  CFF4 F016          	movff	prodh,??_HighISR+9
  6731  000844  CFF6 F017          	movff	tblptrl,??_HighISR+10
  6732  000848  CFF7 F018          	movff	tblptrh,??_HighISR+11
  6733  00084C  CFF8 F019          	movff	tblptru,??_HighISR+12
  6734  000850  CFF5 F01A          	movff	tablat,??_HighISR+13
  6735  000854  C041  F01B         	movff	btemp,??_HighISR+14
  6736  000858  C042  F01C         	movff	btemp+1,??_HighISR+15
  6737  00085C  C043  F01D         	movff	btemp+2,??_HighISR+16
  6738  000860  C044  F01E         	movff	btemp+3,??_HighISR+17
  6739                           
  6740                           ;isr.c: 13: if(INTCONbits.INT0IF)
  6741  000864  A2F2               	btfss	intcon,1,c	;volatile
  6742  000866  D028               	goto	i2l353
  6743                           
  6744                           ;isr.c: 14: {
  6745                           ;isr.c: 15: if(PORTBbits.RB0 == 0)
  6746  000868  B081               	btfsc	3969,0,c	;volatile
  6747  00086A  D005               	goto	i2l354
  6748                           
  6749                           ;isr.c: 16: {
  6750                           ;isr.c: 17: INT0_RisingEdge();
  6751  00086C  EC4B  F00A         	call	_INT0_RisingEdge	;wreg free
  6752                           
  6753                           ;isr.c: 18: LED_On();
  6754  000870  EC47  F00A         	call	_LED_On	;wreg free
  6755                           
  6756                           ;isr.c: 19: }
  6757  000874  D004               	goto	i2l355
  6758  000876                     i2l354:
  6759                           
  6760                           ;isr.c: 20: else
  6761                           ;isr.c: 21: {
  6762                           ;isr.c: 22: INT0_FallingEdge();
  6763  000876  EC45  F00A         	call	i2_INT0_FallingEdge	;wreg free
  6764                           
  6765                           ;isr.c: 23: LED_Off();
  6766  00087A  EC49  F00A         	call	_LED_Off	;wreg free
  6767  00087E                     i2l355:
  6768                           
  6769                           ;isr.c: 24: }
  6770                           ;isr.c: 26: IR_handle()->level = PORTBbits.RB0;
  6771  00087E  EC1E  F00A         	call	_IR_handle	;wreg free
  6772  000882  0E02               	movlw	2
  6773  000884  2401               	addwf	?_IR_handle,w,c
  6774  000886  6ED9               	movwf	fsr2l,c
  6775  000888  0E00               	movlw	0
  6776  00088A  2002               	addwfc	?_IR_handle+1,w,c
  6777  00088C  6EDA               	movwf	fsr2h,c
  6778  00088E  A081               	btfss	3969,0,c	;volatile
  6779  000890  D002               	goto	i2u109_40
  6780  000892  0E01               	movlw	1
  6781  000894  D001               	goto	i2u109_46
  6782  000896                     i2u109_40:
  6783  000896  0E00               	movlw	0
  6784  000898                     i2u109_46:
  6785  000898  6EDF               	movwf	indf2,c
  6786                           
  6787                           ;isr.c: 27: IR_handle()->dtime = CLOCK_Time_Tick();
  6788  00089A  EC1E  F00A         	call	_IR_handle	;wreg free
  6789  00089E  C001  FFD9         	movff	?_IR_handle,fsr2l
  6790  0008A2  C002  FFDA         	movff	?_IR_handle+1,fsr2h
  6791  0008A6  ECB6  F008         	call	_CLOCK_Time_Tick	;wreg free
  6792  0008AA  C009  FFDE         	movff	?_CLOCK_Time_Tick,postinc2
  6793  0008AE  C00A  FFDD         	movff	?_CLOCK_Time_Tick+1,postdec2
  6794                           
  6795                           ;isr.c: 29: SEMA_SetIRdetect();
  6796  0008B2  EC05  F00A         	call	_SEMA_SetIRdetect	;wreg free
  6797                           
  6798                           ;isr.c: 33: INTCONbits.INT0IF = 0;
  6799  0008B6  92F2               	bcf	intcon,1,c	;volatile
  6800  0008B8                     i2l353:
  6801  0008B8  C01E  F044         	movff	??_HighISR+17,btemp+3
  6802  0008BC  C01D  F043         	movff	??_HighISR+16,btemp+2
  6803  0008C0  C01C  F042         	movff	??_HighISR+15,btemp+1
  6804  0008C4  C01B  F041         	movff	??_HighISR+14,btemp
  6805  0008C8  C01A  FFF5         	movff	??_HighISR+13,tablat
  6806  0008CC  C019  FFF8         	movff	??_HighISR+12,tblptru
  6807  0008D0  C018  FFF7         	movff	??_HighISR+11,tblptrh
  6808  0008D4  C017  FFF6         	movff	??_HighISR+10,tblptrl
  6809  0008D8  C016  FFF4         	movff	??_HighISR+9,prodh
  6810  0008DC  C015  FFF3         	movff	??_HighISR+8,prodl
  6811  0008E0  C014  FFDA         	movff	??_HighISR+7,fsr2h
  6812  0008E4  C013  FFD9         	movff	??_HighISR+6,fsr2l
  6813  0008E8  C012  FFE2         	movff	??_HighISR+5,fsr1h
  6814  0008EC  C011  FFE1         	movff	??_HighISR+4,fsr1l
  6815  0008F0  C010  FFEA         	movff	??_HighISR+3,fsr0h
  6816  0008F4  C00F  FFE9         	movff	??_HighISR+2,fsr0l
  6817  0008F8  C00E  FFFB         	movff	??_HighISR+1,pclatu
  6818  0008FC  C00D  FFFA         	movff	??_HighISR,pclath
  6819  000900  9241               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6820  000902  0011               	retfie		f
  6821  000904                     __end_of_HighISR:
  6822                           	opt stack 0
  6823                           tosu	equ	0xFFF
  6824                           tosh	equ	0xFFE
  6825                           tosl	equ	0xFFD
  6826                           pclatu	equ	0xFFB
  6827                           pclath	equ	0xFFA
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           intcon2	equ	0xFF1
  6836                           intcon3	equ	0xFF0
  6837                           postinc0	equ	0xFEE
  6838                           fsr0h	equ	0xFEA
  6839                           fsr0l	equ	0xFE9
  6840                           wreg	equ	0xFE8
  6841                           postinc1	equ	0xFE6
  6842                           postdec1	equ	0xFE5
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           bsr	equ	0xFE0
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function i2_INT0_FallingEdge *****************
  6854 ;; Defined at:
  6855 ;;		line 27 in file "mcu_int0.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		None
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6872 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6873 ;;Total ram usage:        0 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; This function calls:
  6876 ;;		Nothing
  6877 ;; This function is called by:
  6878 ;;		_HighISR
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           	psect	text63
  6883  00148A                     __ptext63:
  6884                           	opt stack 0
  6885  00148A                     i2_INT0_FallingEdge:
  6886                           	opt stack 23
  6887                           
  6888                           ;mcu_int0.c: 29: INTCON2bits.INTEDG0 = 0;
  6889                           
  6890                           ;incstack = 0
  6891  00148A  9CF1               	bcf	intcon2,6,c	;volatile
  6892  00148C  0012               	return		;funcret
  6893  00148E                     __end_ofi2_INT0_FallingEdge:
  6894                           	opt stack 0
  6895                           tosu	equ	0xFFF
  6896                           tosh	equ	0xFFE
  6897                           tosl	equ	0xFFD
  6898                           pclatu	equ	0xFFB
  6899                           pclath	equ	0xFFA
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           intcon	equ	0xFF2
  6907                           intcon2	equ	0xFF1
  6908                           intcon3	equ	0xFF0
  6909                           postinc0	equ	0xFEE
  6910                           fsr0h	equ	0xFEA
  6911                           fsr0l	equ	0xFE9
  6912                           wreg	equ	0xFE8
  6913                           postinc1	equ	0xFE6
  6914                           postdec1	equ	0xFE5
  6915                           fsr1h	equ	0xFE2
  6916                           fsr1l	equ	0xFE1
  6917                           bsr	equ	0xFE0
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           fsr2h	equ	0xFDA
  6922                           fsr2l	equ	0xFD9
  6923                           status	equ	0xFD8
  6924                           
  6925 ;; *************** function _SEMA_SetIRdetect *****************
  6926 ;; Defined at:
  6927 ;;		line 12 in file "sema.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      void 
  6934 ;; Registers used:
  6935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6944 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6945 ;;Total ram usage:        0 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    1
  6948 ;; This function calls:
  6949 ;;		i2_OS_Signal
  6950 ;; This function is called by:
  6951 ;;		_HighISR
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           	psect	text64
  6956  00140A                     __ptext64:
  6957                           	opt stack 0
  6958  00140A                     _SEMA_SetIRdetect:
  6959                           	opt stack 22
  6960                           
  6961                           ;sema.c: 14: OS_Signal(&sema_irdetect);
  6962                           
  6963                           ;incstack = 0
  6964  00140A  0E40               	movlw	low _sema_irdetect
  6965  00140C  6E01               	movwf	i2OS_Signal@semaPt,c
  6966  00140E  0E00               	movlw	high _sema_irdetect
  6967  001410  6E02               	movwf	i2OS_Signal@semaPt+1,c
  6968  001412  ECE0  F005         	call	i2_OS_Signal	;wreg free
  6969  001416  0012               	return		;funcret
  6970  001418                     __end_of_SEMA_SetIRdetect:
  6971                           	opt stack 0
  6972                           tosu	equ	0xFFF
  6973                           tosh	equ	0xFFE
  6974                           tosl	equ	0xFFD
  6975                           pclatu	equ	0xFFB
  6976                           pclath	equ	0xFFA
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           intcon2	equ	0xFF1
  6985                           intcon3	equ	0xFF0
  6986                           postinc0	equ	0xFEE
  6987                           fsr0h	equ	0xFEA
  6988                           fsr0l	equ	0xFE9
  6989                           wreg	equ	0xFE8
  6990                           postinc1	equ	0xFE6
  6991                           postdec1	equ	0xFE5
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           bsr	equ	0xFE0
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function i2_OS_Signal *****************
  7003 ;; Defined at:
  7004 ;;		line 143 in file "os.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  semaPt          2    0[COMRAM] PTR char 
  7007 ;;		 -> sema_Task4(1), sema_Task3(1), sema_Task2(1), sema_clock(1), 
  7008 ;;		 -> sema_picbot(1), sema_irdetect(1), 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  OS_Signal       2    6[COMRAM] PTR struct tcb
  7011 ;;		 -> tcbs(24), 
  7012 ;;  OS_Signal       2    4[COMRAM] PTR struct tcb
  7013 ;;		 -> NULL(0), tcbs(24), 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7023 ;;      Params:         2       0       0       0       0       0       0       0       0
  7024 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7025 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7026 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7027 ;;Total ram usage:        8 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_SEMA_SetIRdetect
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text65
  7037  000BC0                     __ptext65:
  7038                           	opt stack 0
  7039  000BC0                     i2_OS_Signal:
  7040                           	opt stack 22
  7041                           
  7042                           ;os.c: 145: tcbType *pt;
  7043                           ;os.c: 146: tcbType *PrvPt;
  7044                           ;os.c: 152: PrvPt = RunPt;
  7045                           
  7046                           ;incstack = 0
  7047  000BC0  C084  F005         	movff	_RunPt,i2OS_Signal@PrvPt
  7048  000BC4  C085  F006         	movff	_RunPt+1,i2OS_Signal@PrvPt+1
  7049                           
  7050                           ;os.c: 154: pt = RunPt->next;
  7051  000BC8  0100               	movlb	0	; () banked
  7052  000BCA  EE20 F002          	lfsr	2,2
  7053  000BCE  5184               	movf	_RunPt& (0+255),w,b
  7054  000BD0  26D9               	addwf	fsr2l,f,c
  7055  000BD2  5185               	movf	(_RunPt+1)& (0+255),w,b
  7056  000BD4  22DA               	addwfc	fsr2h,f,c
  7057  000BD6  CFDE F007          	movff	postinc2,i2OS_Signal@pt
  7058  000BDA  CFDD F008          	movff	postdec2,i2OS_Signal@pt+1
  7059                           
  7060                           ;os.c: 156: while(!(pt->blocked == semaPt))
  7061  000BDE  D01E               	goto	i2l83
  7062  000BE0                     i2l2439:
  7063                           
  7064                           ;os.c: 157: {
  7065                           ;os.c: 160: pt= pt->next;
  7066  000BE0  EE20 F002          	lfsr	2,2
  7067  000BE4  5007               	movf	i2OS_Signal@pt,w,c
  7068  000BE6  26D9               	addwf	fsr2l,f,c
  7069  000BE8  5008               	movf	i2OS_Signal@pt+1,w,c
  7070  000BEA  22DA               	addwfc	fsr2h,f,c
  7071  000BEC  CFDE F007          	movff	postinc2,i2OS_Signal@pt
  7072  000BF0  CFDD F008          	movff	postdec2,i2OS_Signal@pt+1
  7073                           
  7074                           ;os.c: 162: if (pt == PrvPt)
  7075  000BF4  5005               	movf	i2OS_Signal@PrvPt,w,c
  7076  000BF6  1807               	xorwf	i2OS_Signal@pt,w,c
  7077  000BF8  E111               	bnz	i2l2447
  7078  000BFA  5006               	movf	i2OS_Signal@PrvPt+1,w,c
  7079  000BFC  1808               	xorwf	i2OS_Signal@pt+1,w,c
  7080  000BFE  A4D8               	btfss	status,2,c
  7081  000C00  D00D               	goto	i2l83
  7082                           
  7083                           ;os.c: 163: {
  7084                           ;os.c: 164: if(!(pt->blocked == semaPt))
  7085  000C02  EE20 F004          	lfsr	2,4
  7086  000C06  5007               	movf	i2OS_Signal@pt,w,c
  7087  000C08  26D9               	addwf	fsr2l,f,c
  7088  000C0A  5008               	movf	i2OS_Signal@pt+1,w,c
  7089  000C0C  22DA               	addwfc	fsr2h,f,c
  7090  000C0E  5001               	movf	i2OS_Signal@semaPt,w,c
  7091  000C10  18DE               	xorwf	postinc2,w,c
  7092  000C12  E111               	bnz	i2l2449
  7093  000C14  5002               	movf	i2OS_Signal@semaPt+1,w,c
  7094  000C16  18DE               	xorwf	postinc2,w,c
  7095  000C18  A4D8               	btfss	status,2,c
  7096  000C1A  D00D               	goto	i2u100_40
  7097  000C1C                     i2l83:
  7098  000C1C                     i2l2447:
  7099  000C1C  EE20 F004          	lfsr	2,4
  7100  000C20  5007               	movf	i2OS_Signal@pt,w,c
  7101  000C22  26D9               	addwf	fsr2l,f,c
  7102  000C24  5008               	movf	i2OS_Signal@pt+1,w,c
  7103  000C26  22DA               	addwfc	fsr2h,f,c
  7104  000C28  5001               	movf	i2OS_Signal@semaPt,w,c
  7105  000C2A  18DE               	xorwf	postinc2,w,c
  7106  000C2C  E1D9               	bnz	i2l2439
  7107  000C2E  5002               	movf	i2OS_Signal@semaPt+1,w,c
  7108  000C30  18DE               	xorwf	postinc2,w,c
  7109  000C32  A4D8               	btfss	status,2,c
  7110  000C34  D7D5               	goto	i2l81
  7111  000C36                     i2u100_40:
  7112  000C36                     i2l2449:
  7113                           
  7114                           ;os.c: 168: }
  7115                           ;os.c: 169: }
  7116                           ;os.c: 170: }
  7117                           ;os.c: 171: pt->blocked = 0;
  7118  000C36  EE20 F004          	lfsr	2,4
  7119  000C3A  5007               	movf	i2OS_Signal@pt,w,c
  7120  000C3C  26D9               	addwf	fsr2l,f,c
  7121  000C3E  5008               	movf	i2OS_Signal@pt+1,w,c
  7122  000C40  22DA               	addwfc	fsr2h,f,c
  7123  000C42  0E00               	movlw	0
  7124  000C44  6EDE               	movwf	postinc2,c
  7125  000C46  0E00               	movlw	0
  7126  000C48  6EDD               	movwf	postdec2,c
  7127                           
  7128                           ;os.c: 174: *semaPt = 1;
  7129  000C4A  C001  FFD9         	movff	i2OS_Signal@semaPt,fsr2l
  7130  000C4E  C002  FFDA         	movff	i2OS_Signal@semaPt+1,fsr2h
  7131  000C52  0E01               	movlw	1
  7132  000C54  6EDF               	movwf	indf2,c
  7133  000C56  0012               	return	
  7134  000C58                     __end_ofi2_OS_Signal:
  7135                           	opt stack 0
  7136                           tosu	equ	0xFFF
  7137                           tosh	equ	0xFFE
  7138                           tosl	equ	0xFFD
  7139                           pclatu	equ	0xFFB
  7140                           pclath	equ	0xFFA
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           intcon2	equ	0xFF1
  7149                           intcon3	equ	0xFF0
  7150                           postinc0	equ	0xFEE
  7151                           fsr0h	equ	0xFEA
  7152                           fsr0l	equ	0xFE9
  7153                           wreg	equ	0xFE8
  7154                           postinc1	equ	0xFE6
  7155                           postdec1	equ	0xFE5
  7156                           fsr1h	equ	0xFE2
  7157                           fsr1l	equ	0xFE1
  7158                           bsr	equ	0xFE0
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _LED_On *****************
  7167 ;; Defined at:
  7168 ;;		line 11 in file "led.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		None
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7182 ;;      Params:         0       0       0       0       0       0       0       0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7185 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7186 ;;Total ram usage:        0 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_HighISR
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	text66
  7196  00148E                     __ptext66:
  7197                           	opt stack 0
  7198  00148E                     _LED_On:
  7199                           	opt stack 23
  7200                           
  7201                           ;led.c: 13: LATEbits.LATE2 = 1;
  7202                           
  7203                           ;incstack = 0
  7204  00148E  848D               	bsf	3981,2,c	;volatile
  7205  001490  0012               	return		;funcret
  7206  001492                     __end_of_LED_On:
  7207                           	opt stack 0
  7208                           tosu	equ	0xFFF
  7209                           tosh	equ	0xFFE
  7210                           tosl	equ	0xFFD
  7211                           pclatu	equ	0xFFB
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           intcon3	equ	0xFF0
  7222                           postinc0	equ	0xFEE
  7223                           fsr0h	equ	0xFEA
  7224                           fsr0l	equ	0xFE9
  7225                           wreg	equ	0xFE8
  7226                           postinc1	equ	0xFE6
  7227                           postdec1	equ	0xFE5
  7228                           fsr1h	equ	0xFE2
  7229                           fsr1l	equ	0xFE1
  7230                           bsr	equ	0xFE0
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           fsr2h	equ	0xFDA
  7235                           fsr2l	equ	0xFD9
  7236                           status	equ	0xFD8
  7237                           
  7238 ;; *************** function _LED_Off *****************
  7239 ;; Defined at:
  7240 ;;		line 16 in file "led.c"
  7241 ;; Parameters:    Size  Location     Type
  7242 ;;		None
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;		None
  7245 ;; Return value:  Size  Location     Type
  7246 ;;                  1    wreg      void 
  7247 ;; Registers used:
  7248 ;;		None
  7249 ;; Tracked objects:
  7250 ;;		On entry : 0/0
  7251 ;;		On exit  : 0/0
  7252 ;;		Unchanged: 0/0
  7253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7254 ;;      Params:         0       0       0       0       0       0       0       0       0
  7255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7257 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7258 ;;Total ram usage:        0 bytes
  7259 ;; Hardware stack levels used:    1
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_HighISR
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text67
  7268  001492                     __ptext67:
  7269                           	opt stack 0
  7270  001492                     _LED_Off:
  7271                           	opt stack 23
  7272                           
  7273                           ;led.c: 18: LATEbits.LATE2 = 0;
  7274                           
  7275                           ;incstack = 0
  7276  001492  948D               	bcf	3981,2,c	;volatile
  7277  001494  0012               	return		;funcret
  7278  001496                     __end_of_LED_Off:
  7279                           	opt stack 0
  7280                           tosu	equ	0xFFF
  7281                           tosh	equ	0xFFE
  7282                           tosl	equ	0xFFD
  7283                           pclatu	equ	0xFFB
  7284                           pclath	equ	0xFFA
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           intcon2	equ	0xFF1
  7293                           intcon3	equ	0xFF0
  7294                           postinc0	equ	0xFEE
  7295                           fsr0h	equ	0xFEA
  7296                           fsr0l	equ	0xFE9
  7297                           wreg	equ	0xFE8
  7298                           postinc1	equ	0xFE6
  7299                           postdec1	equ	0xFE5
  7300                           fsr1h	equ	0xFE2
  7301                           fsr1l	equ	0xFE1
  7302                           bsr	equ	0xFE0
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _IR_handle *****************
  7311 ;; Defined at:
  7312 ;;		line 118 in file "irdetect.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  2    0[COMRAM] PTR struct .
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7326 ;;      Params:         2       0       0       0       0       0       0       0       0
  7327 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7329 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7330 ;;Total ram usage:        2 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_HighISR
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text68
  7340  00143C                     __ptext68:
  7341                           	opt stack 0
  7342  00143C                     _IR_handle:
  7343                           	opt stack 23
  7344                           
  7345                           ;irdetect.c: 120: return(&irhandle);
  7346                           
  7347                           ;incstack = 0
  7348  00143C  0EA4               	movlw	low _irhandle
  7349  00143E  6E01               	movwf	?_IR_handle,c
  7350  001440  0E00               	movlw	high _irhandle
  7351  001442  6E02               	movwf	?_IR_handle+1,c
  7352  001444  0012               	return	
  7353  001446                     __end_of_IR_handle:
  7354                           	opt stack 0
  7355                           tosu	equ	0xFFF
  7356                           tosh	equ	0xFFE
  7357                           tosl	equ	0xFFD
  7358                           pclatu	equ	0xFFB
  7359                           pclath	equ	0xFFA
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           intcon	equ	0xFF2
  7367                           intcon2	equ	0xFF1
  7368                           intcon3	equ	0xFF0
  7369                           postinc0	equ	0xFEE
  7370                           fsr0h	equ	0xFEA
  7371                           fsr0l	equ	0xFE9
  7372                           wreg	equ	0xFE8
  7373                           postinc1	equ	0xFE6
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           bsr	equ	0xFE0
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _INT0_RisingEdge *****************
  7386 ;; Defined at:
  7387 ;;		line 22 in file "mcu_int0.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		None
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7404 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7405 ;;Total ram usage:        0 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		_HighISR
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text69
  7415  001496                     __ptext69:
  7416                           	opt stack 0
  7417  001496                     _INT0_RisingEdge:
  7418                           	opt stack 23
  7419                           
  7420                           ;mcu_int0.c: 24: INTCON2bits.INTEDG0 = 1;
  7421                           
  7422                           ;incstack = 0
  7423  001496  8CF1               	bsf	intcon2,6,c	;volatile
  7424  001498  0012               	return		;funcret
  7425  00149A                     __end_of_INT0_RisingEdge:
  7426                           	opt stack 0
  7427                           tosu	equ	0xFFF
  7428                           tosh	equ	0xFFE
  7429                           tosl	equ	0xFFD
  7430                           pclatu	equ	0xFFB
  7431                           pclath	equ	0xFFA
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon	equ	0xFF2
  7439                           intcon2	equ	0xFF1
  7440                           intcon3	equ	0xFF0
  7441                           postinc0	equ	0xFEE
  7442                           fsr0h	equ	0xFEA
  7443                           fsr0l	equ	0xFE9
  7444                           wreg	equ	0xFE8
  7445                           postinc1	equ	0xFE6
  7446                           postdec1	equ	0xFE5
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           bsr	equ	0xFE0
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _CLOCK_Time_Tick *****************
  7458 ;; Defined at:
  7459 ;;		line 69 in file "clock.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  tick_time       2   10[COMRAM] unsigned int 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  2    8[COMRAM] unsigned int 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7473 ;;      Params:         2       0       0       0       0       0       0       0       0
  7474 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7476 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7477 ;;Total ram usage:        4 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    2
  7480 ;; This function calls:
  7481 ;;		_CLOCK_Disable
  7482 ;;		_CLOCK_Reload
  7483 ;;		i2_CLOCK_Enable
  7484 ;;		i2_CLOCK_ReadTimer
  7485 ;; This function is called by:
  7486 ;;		_HighISR
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text70
  7491  00116C                     __ptext70:
  7492                           	opt stack 0
  7493  00116C                     _CLOCK_Time_Tick:
  7494                           	opt stack 21
  7495                           
  7496                           ;clock.c: 71: uint16_t tick_time;
  7497                           ;clock.c: 72: CLOCK_Disable();
  7498                           
  7499                           ;incstack = 0
  7500  00116C  EC3E  F00A         	call	_CLOCK_Disable	;wreg free
  7501                           
  7502                           ;clock.c: 73: tick_time = CLOCK_ReadTimer();
  7503  001170  EC0C  F00A         	call	i2_CLOCK_ReadTimer	;wreg free
  7504  001174  C007  F00B         	movff	?i2_CLOCK_ReadTimer,CLOCK_Time_Tick@tick_time
  7505  001178  C008  F00C         	movff	?i2_CLOCK_ReadTimer+1,CLOCK_Time_Tick@tick_time+1
  7506                           
  7507                           ;clock.c: 75: INTCONbits.TMR0IF = 0;
  7508  00117C  94F2               	bcf	intcon,2,c	;volatile
  7509                           
  7510                           ;clock.c: 76: CLOCK_Reload();
  7511  00117E  EC3B  F00A         	call	_CLOCK_Reload	;wreg free
  7512                           
  7513                           ;clock.c: 77: CLOCK_Enable();
  7514  001182  EC38  F00A         	call	i2_CLOCK_Enable	;wreg free
  7515                           
  7516                           ;clock.c: 79: return(tick_time);
  7517  001186  C00B  F009         	movff	CLOCK_Time_Tick@tick_time,?_CLOCK_Time_Tick
  7518  00118A  C00C  F00A         	movff	CLOCK_Time_Tick@tick_time+1,?_CLOCK_Time_Tick+1
  7519  00118E  0012               	return	
  7520  001190                     __end_of_CLOCK_Time_Tick:
  7521                           	opt stack 0
  7522                           tosu	equ	0xFFF
  7523                           tosh	equ	0xFFE
  7524                           tosl	equ	0xFFD
  7525                           pclatu	equ	0xFFB
  7526                           pclath	equ	0xFFA
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           intcon2	equ	0xFF1
  7535                           intcon3	equ	0xFF0
  7536                           postinc0	equ	0xFEE
  7537                           fsr0h	equ	0xFEA
  7538                           fsr0l	equ	0xFE9
  7539                           wreg	equ	0xFE8
  7540                           postinc1	equ	0xFE6
  7541                           postdec1	equ	0xFE5
  7542                           fsr1h	equ	0xFE2
  7543                           fsr1l	equ	0xFE1
  7544                           bsr	equ	0xFE0
  7545                           indf2	equ	0xFDF
  7546                           postinc2	equ	0xFDE
  7547                           postdec2	equ	0xFDD
  7548                           fsr2h	equ	0xFDA
  7549                           fsr2l	equ	0xFD9
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function i2_CLOCK_ReadTimer *****************
  7553 ;; Defined at:
  7554 ;;		line 58 in file "clock.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  2    6[COMRAM] unsigned int 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7568 ;;      Params:         2       0       0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7571 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7572 ;;Total ram usage:        2 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    1
  7575 ;; This function calls:
  7576 ;;		i2_TMR0_ReadTimer
  7577 ;; This function is called by:
  7578 ;;		_CLOCK_Time_Tick
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text71
  7583  001418                     __ptext71:
  7584                           	opt stack 0
  7585  001418                     i2_CLOCK_ReadTimer:
  7586                           	opt stack 21
  7587                           
  7588                           ;clock.c: 60: return(TMR0_ReadTimer());
  7589                           
  7590                           ;incstack = 0
  7591  001418  ECE8  F008         	call	i2_TMR0_ReadTimer	;wreg free
  7592  00141C  C001  F007         	movff	?i2_TMR0_ReadTimer,?i2_CLOCK_ReadTimer
  7593  001420  C002  F008         	movff	?i2_TMR0_ReadTimer+1,?i2_CLOCK_ReadTimer+1
  7594  001424  0012               	return	
  7595  001426                     __end_ofi2_CLOCK_ReadTimer:
  7596                           	opt stack 0
  7597                           tosu	equ	0xFFF
  7598                           tosh	equ	0xFFE
  7599                           tosl	equ	0xFFD
  7600                           pclatu	equ	0xFFB
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           intcon2	equ	0xFF1
  7610                           intcon3	equ	0xFF0
  7611                           postinc0	equ	0xFEE
  7612                           fsr0h	equ	0xFEA
  7613                           fsr0l	equ	0xFE9
  7614                           wreg	equ	0xFE8
  7615                           postinc1	equ	0xFE6
  7616                           postdec1	equ	0xFE5
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           bsr	equ	0xFE0
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           fsr2h	equ	0xFDA
  7624                           fsr2l	equ	0xFD9
  7625                           status	equ	0xFD8
  7626                           
  7627 ;; *************** function i2_TMR0_ReadTimer *****************
  7628 ;; Defined at:
  7629 ;;		line 42 in file "mcu_tmr0.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;		None
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  TMR0_ReadTim    2    4[COMRAM] unsigned int 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  2    0[COMRAM] unsigned int 
  7636 ;; Registers used:
  7637 ;;		wreg, status,2, status,0
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7643 ;;      Params:         2       0       0       0       0       0       0       0       0
  7644 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7645 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7646 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7647 ;;Total ram usage:        6 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; This function calls:
  7650 ;;		Nothing
  7651 ;; This function is called by:
  7652 ;;		i2_CLOCK_ReadTimer
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text72
  7657  0011D0                     __ptext72:
  7658                           	opt stack 0
  7659  0011D0                     i2_TMR0_ReadTimer:
  7660                           	opt stack 21
  7661                           
  7662                           ;mcu_tmr0.c: 44: uint16_t readVal;
  7663                           ;mcu_tmr0.c: 46: readVal = (TMR0H << 8) | TMR0L;
  7664                           
  7665                           ;incstack = 0
  7666  0011D0  50D6               	movf	4054,w,c	;volatile
  7667  0011D2  CFD7 F003          	movff	4055,??i2_TMR0_ReadTimer	;volatile
  7668  0011D6  6A04               	clrf	(??i2_TMR0_ReadTimer+1)& (0+255),c
  7669  0011D8  C003  F004         	movff	??i2_TMR0_ReadTimer,??i2_TMR0_ReadTimer+1
  7670  0011DC  6A03               	clrf	??i2_TMR0_ReadTimer,c
  7671  0011DE  1003               	iorwf	??i2_TMR0_ReadTimer,w,c
  7672  0011E0  6E05               	movwf	i2TMR0_ReadTimer@readVal,c
  7673  0011E2  5004               	movf	??i2_TMR0_ReadTimer+1,w,c
  7674  0011E4  6E06               	movwf	i2TMR0_ReadTimer@readVal+1,c
  7675                           
  7676                           ;mcu_tmr0.c: 48: return readVal;
  7677  0011E6  C005  F001         	movff	i2TMR0_ReadTimer@readVal,?i2_TMR0_ReadTimer
  7678  0011EA  C006  F002         	movff	i2TMR0_ReadTimer@readVal+1,?i2_TMR0_ReadTimer+1
  7679  0011EE  0012               	return	
  7680  0011F0                     __end_ofi2_TMR0_ReadTimer:
  7681                           	opt stack 0
  7682                           tosu	equ	0xFFF
  7683                           tosh	equ	0xFFE
  7684                           tosl	equ	0xFFD
  7685                           pclatu	equ	0xFFB
  7686                           pclath	equ	0xFFA
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           intcon2	equ	0xFF1
  7695                           intcon3	equ	0xFF0
  7696                           postinc0	equ	0xFEE
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           postinc1	equ	0xFE6
  7701                           postdec1	equ	0xFE5
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           bsr	equ	0xFE0
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712 ;; *************** function i2_CLOCK_Enable *****************
  7713 ;; Defined at:
  7714 ;;		line 42 in file "clock.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7728 ;;      Params:         0       0       0       0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7731 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7732 ;;Total ram usage:        0 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    1
  7735 ;; This function calls:
  7736 ;;		i2_TMR0_Enable
  7737 ;; This function is called by:
  7738 ;;		_CLOCK_Time_Tick
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text73
  7743  001470                     __ptext73:
  7744                           	opt stack 0
  7745  001470                     i2_CLOCK_Enable:
  7746                           	opt stack 21
  7747                           
  7748                           ;clock.c: 44: TMR0_Enable();
  7749                           
  7750                           ;incstack = 0
  7751  001470  EC4D  F00A         	call	i2_TMR0_Enable	;wreg free
  7752  001474  0012               	return		;funcret
  7753  001476                     __end_ofi2_CLOCK_Enable:
  7754                           	opt stack 0
  7755                           tosu	equ	0xFFF
  7756                           tosh	equ	0xFFE
  7757                           tosl	equ	0xFFD
  7758                           pclatu	equ	0xFFB
  7759                           pclath	equ	0xFFA
  7760                           tblptru	equ	0xFF8
  7761                           tblptrh	equ	0xFF7
  7762                           tblptrl	equ	0xFF6
  7763                           tablat	equ	0xFF5
  7764                           prodh	equ	0xFF4
  7765                           prodl	equ	0xFF3
  7766                           intcon	equ	0xFF2
  7767                           intcon2	equ	0xFF1
  7768                           intcon3	equ	0xFF0
  7769                           postinc0	equ	0xFEE
  7770                           fsr0h	equ	0xFEA
  7771                           fsr0l	equ	0xFE9
  7772                           wreg	equ	0xFE8
  7773                           postinc1	equ	0xFE6
  7774                           postdec1	equ	0xFE5
  7775                           fsr1h	equ	0xFE2
  7776                           fsr1l	equ	0xFE1
  7777                           bsr	equ	0xFE0
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function i2_TMR0_Enable *****************
  7786 ;; Defined at:
  7787 ;;		line 30 in file "mcu_tmr0.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		None
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7801 ;;      Params:         0       0       0       0       0       0       0       0       0
  7802 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7804 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7805 ;;Total ram usage:        0 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		i2_CLOCK_Enable
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text74
  7815  00149A                     __ptext74:
  7816                           	opt stack 0
  7817  00149A                     i2_TMR0_Enable:
  7818                           	opt stack 21
  7819                           
  7820                           ;mcu_tmr0.c: 33: T0CONbits.TMR0ON = 1;
  7821                           
  7822                           ;incstack = 0
  7823  00149A  8ED5               	bsf	4053,7,c	;volatile
  7824  00149C  0012               	return		;funcret
  7825  00149E                     __end_ofi2_TMR0_Enable:
  7826                           	opt stack 0
  7827                           tosu	equ	0xFFF
  7828                           tosh	equ	0xFFE
  7829                           tosl	equ	0xFFD
  7830                           pclatu	equ	0xFFB
  7831                           pclath	equ	0xFFA
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           prodh	equ	0xFF4
  7837                           prodl	equ	0xFF3
  7838                           intcon	equ	0xFF2
  7839                           intcon2	equ	0xFF1
  7840                           intcon3	equ	0xFF0
  7841                           postinc0	equ	0xFEE
  7842                           fsr0h	equ	0xFEA
  7843                           fsr0l	equ	0xFE9
  7844                           wreg	equ	0xFE8
  7845                           postinc1	equ	0xFE6
  7846                           postdec1	equ	0xFE5
  7847                           fsr1h	equ	0xFE2
  7848                           fsr1l	equ	0xFE1
  7849                           bsr	equ	0xFE0
  7850                           indf2	equ	0xFDF
  7851                           postinc2	equ	0xFDE
  7852                           postdec2	equ	0xFDD
  7853                           fsr2h	equ	0xFDA
  7854                           fsr2l	equ	0xFD9
  7855                           status	equ	0xFD8
  7856                           
  7857 ;; *************** function _CLOCK_Reload *****************
  7858 ;; Defined at:
  7859 ;;		line 52 in file "clock.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;		None
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;		None
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  1    wreg      void 
  7866 ;; Registers used:
  7867 ;;		wreg, status,2, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7873 ;;      Params:         0       0       0       0       0       0       0       0       0
  7874 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7876 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7877 ;;Total ram usage:        0 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    1
  7880 ;; This function calls:
  7881 ;;		_TMR0_Reload
  7882 ;; This function is called by:
  7883 ;;		_CLOCK_Time_Tick
  7884 ;;		_CLOCK_Time_100us
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text75
  7889  001476                     __ptext75:
  7890                           	opt stack 0
  7891  001476                     _CLOCK_Reload:
  7892                           	opt stack 21
  7893                           
  7894                           ;clock.c: 54: TMR0_Reload();
  7895                           
  7896                           ;incstack = 0
  7897  001476  EC23  F00A         	call	_TMR0_Reload	;wreg free
  7898  00147A  0012               	return		;funcret
  7899  00147C                     __end_of_CLOCK_Reload:
  7900                           	opt stack 0
  7901                           tosu	equ	0xFFF
  7902                           tosh	equ	0xFFE
  7903                           tosl	equ	0xFFD
  7904                           pclatu	equ	0xFFB
  7905                           pclath	equ	0xFFA
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           intcon	equ	0xFF2
  7913                           intcon2	equ	0xFF1
  7914                           intcon3	equ	0xFF0
  7915                           postinc0	equ	0xFEE
  7916                           fsr0h	equ	0xFEA
  7917                           fsr0l	equ	0xFE9
  7918                           wreg	equ	0xFE8
  7919                           postinc1	equ	0xFE6
  7920                           postdec1	equ	0xFE5
  7921                           fsr1h	equ	0xFE2
  7922                           fsr1l	equ	0xFE1
  7923                           bsr	equ	0xFE0
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931 ;; *************** function _TMR0_Reload *****************
  7932 ;; Defined at:
  7933 ;;		line 53 in file "mcu_tmr0.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;		None
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, status,2
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7947 ;;      Params:         0       0       0       0       0       0       0       0       0
  7948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7950 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7951 ;;Total ram usage:        0 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; This function calls:
  7954 ;;		Nothing
  7955 ;; This function is called by:
  7956 ;;		_CLOCK_Reload
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text76
  7961  001446                     __ptext76:
  7962                           	opt stack 0
  7963  001446                     _TMR0_Reload:
  7964                           	opt stack 21
  7965                           
  7966                           ;mcu_tmr0.c: 56: TMR0H = (timer0ReloadVal >> 8);
  7967                           
  7968                           ;incstack = 0
  7969  001446  5039               	movf	_timer0ReloadVal+1,w,c	;volatile
  7970  001448  6ED7               	movwf	4055,c	;volatile
  7971                           
  7972                           ;mcu_tmr0.c: 57: TMR0L = timer0ReloadVal;
  7973  00144A  C038  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7974  00144E  0012               	return		;funcret
  7975  001450                     __end_of_TMR0_Reload:
  7976                           	opt stack 0
  7977                           tosu	equ	0xFFF
  7978                           tosh	equ	0xFFE
  7979                           tosl	equ	0xFFD
  7980                           pclatu	equ	0xFFB
  7981                           pclath	equ	0xFFA
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           intcon3	equ	0xFF0
  7991                           postinc0	equ	0xFEE
  7992                           fsr0h	equ	0xFEA
  7993                           fsr0l	equ	0xFE9
  7994                           wreg	equ	0xFE8
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           bsr	equ	0xFE0
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _CLOCK_Disable *****************
  8008 ;; Defined at:
  8009 ;;		line 47 in file "clock.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8026 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8027 ;;Total ram usage:        0 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    1
  8030 ;; This function calls:
  8031 ;;		_TMR0_Disable
  8032 ;; This function is called by:
  8033 ;;		_CLOCK_Time_Tick
  8034 ;;		_CLOCK_Time_100us
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text77
  8039  00147C                     __ptext77:
  8040                           	opt stack 0
  8041  00147C                     _CLOCK_Disable:
  8042                           	opt stack 21
  8043                           
  8044                           ;clock.c: 49: TMR0_Disable();
  8045                           
  8046                           ;incstack = 0
  8047  00147C  EC4F  F00A         	call	_TMR0_Disable	;wreg free
  8048  001480  0012               	return		;funcret
  8049  001482                     __end_of_CLOCK_Disable:
  8050                           	opt stack 0
  8051                           tosu	equ	0xFFF
  8052                           tosh	equ	0xFFE
  8053                           tosl	equ	0xFFD
  8054                           pclatu	equ	0xFFB
  8055                           pclath	equ	0xFFA
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           intcon2	equ	0xFF1
  8064                           intcon3	equ	0xFF0
  8065                           postinc0	equ	0xFEE
  8066                           fsr0h	equ	0xFEA
  8067                           fsr0l	equ	0xFE9
  8068                           wreg	equ	0xFE8
  8069                           postinc1	equ	0xFE6
  8070                           postdec1	equ	0xFE5
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           bsr	equ	0xFE0
  8074                           indf2	equ	0xFDF
  8075                           postinc2	equ	0xFDE
  8076                           postdec2	equ	0xFDD
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _TMR0_Disable *****************
  8082 ;; Defined at:
  8083 ;;		line 36 in file "mcu_tmr0.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		None
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_CLOCK_Disable
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text78
  8111  00149E                     __ptext78:
  8112                           	opt stack 0
  8113  00149E                     _TMR0_Disable:
  8114                           	opt stack 21
  8115                           
  8116                           ;mcu_tmr0.c: 39: T0CONbits.TMR0ON = 0;
  8117                           
  8118                           ;incstack = 0
  8119  00149E  9ED5               	bcf	4053,7,c	;volatile
  8120  0014A0  0012               	return		;funcret
  8121  0014A2                     __end_of_TMR0_Disable:
  8122                           	opt stack 0
  8123                           tosu	equ	0xFFF
  8124                           tosh	equ	0xFFE
  8125                           tosl	equ	0xFFD
  8126                           pclatu	equ	0xFFB
  8127                           pclath	equ	0xFFA
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           intcon	equ	0xFF2
  8135                           intcon2	equ	0xFF1
  8136                           intcon3	equ	0xFF0
  8137                           postinc0	equ	0xFEE
  8138                           fsr0h	equ	0xFEA
  8139                           fsr0l	equ	0xFE9
  8140                           wreg	equ	0xFE8
  8141                           postinc1	equ	0xFE6
  8142                           postdec1	equ	0xFE5
  8143                           fsr1h	equ	0xFE2
  8144                           fsr1l	equ	0xFE1
  8145                           bsr	equ	0xFE0
  8146                           indf2	equ	0xFDF
  8147                           postinc2	equ	0xFDE
  8148                           postdec2	equ	0xFDD
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           tosu	equ	0xFFF
  8153                           tosh	equ	0xFFE
  8154                           tosl	equ	0xFFD
  8155                           pclatu	equ	0xFFB
  8156                           pclath	equ	0xFFA
  8157                           tblptru	equ	0xFF8
  8158                           tblptrh	equ	0xFF7
  8159                           tblptrl	equ	0xFF6
  8160                           tablat	equ	0xFF5
  8161                           prodh	equ	0xFF4
  8162                           prodl	equ	0xFF3
  8163                           intcon	equ	0xFF2
  8164                           intcon2	equ	0xFF1
  8165                           intcon3	equ	0xFF0
  8166                           postinc0	equ	0xFEE
  8167                           fsr0h	equ	0xFEA
  8168                           fsr0l	equ	0xFE9
  8169                           wreg	equ	0xFE8
  8170                           postinc1	equ	0xFE6
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           bsr	equ	0xFE0
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182                           	psect	text79
  8183  000000                     __ptext79:
  8184                           	opt stack 0
  8185                           tosu	equ	0xFFF
  8186                           tosh	equ	0xFFE
  8187                           tosl	equ	0xFFD
  8188                           pclatu	equ	0xFFB
  8189                           pclath	equ	0xFFA
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon	equ	0xFF2
  8197                           intcon2	equ	0xFF1
  8198                           intcon3	equ	0xFF0
  8199                           postinc0	equ	0xFEE
  8200                           fsr0h	equ	0xFEA
  8201                           fsr0l	equ	0xFE9
  8202                           wreg	equ	0xFE8
  8203                           postinc1	equ	0xFE6
  8204                           postdec1	equ	0xFE5
  8205                           fsr1h	equ	0xFE2
  8206                           fsr1l	equ	0xFE1
  8207                           bsr	equ	0xFE0
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215                           	psect	rparam
  8216  0000                     tosu	equ	0xFFF
  8217                           tosh	equ	0xFFE
  8218                           tosl	equ	0xFFD
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           intcon2	equ	0xFF1
  8229                           intcon3	equ	0xFF0
  8230                           postinc0	equ	0xFEE
  8231                           fsr0h	equ	0xFEA
  8232                           fsr0l	equ	0xFE9
  8233                           wreg	equ	0xFE8
  8234                           postinc1	equ	0xFE6
  8235                           postdec1	equ	0xFE5
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           bsr	equ	0xFE0
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246                           	psect	temp
  8247  000041                     btemp:
  8248                           	opt stack 0
  8249  000041                     	ds	1
  8250  0000                     int$flags	set	btemp
  8251  0000                     wtemp6	set	btemp+1
  8252                           tosu	equ	0xFFF
  8253                           tosh	equ	0xFFE
  8254                           tosl	equ	0xFFD
  8255                           pclatu	equ	0xFFB
  8256                           pclath	equ	0xFFA
  8257                           tblptru	equ	0xFF8
  8258                           tblptrh	equ	0xFF7
  8259                           tblptrl	equ	0xFF6
  8260                           tablat	equ	0xFF5
  8261                           prodh	equ	0xFF4
  8262                           prodl	equ	0xFF3
  8263                           intcon	equ	0xFF2
  8264                           intcon2	equ	0xFF1
  8265                           intcon3	equ	0xFF0
  8266                           postinc0	equ	0xFEE
  8267                           fsr0h	equ	0xFEA
  8268                           fsr0l	equ	0xFE9
  8269                           wreg	equ	0xFE8
  8270                           postinc1	equ	0xFE6
  8271                           postdec1	equ	0xFE5
  8272                           fsr1h	equ	0xFE2
  8273                           fsr1l	equ	0xFE1
  8274                           bsr	equ	0xFE0
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           fsr2h	equ	0xFDA
  8279                           fsr2l	equ	0xFD9
  8280                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    24
    Data        1
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      64
    BANK0           160     29     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Fifo_Get@datapt	PTR unsigned int  size(2) Largest target is 2
		 -> PICBOT_Task@command(COMRAM[2]), 

    sp__IR_handle	PTR struct . size(2) Largest target is 3
		 -> irhandle(BANK0[3]), 

    S913$Output_Func	PTR FTN()void  size(2) Largest target is 1
		 -> ir_terminate(), ir_bitcollect(), ir_Begin(), ir_end(), 

    IRSTATEMACHINE.Output_Func	PTR FTN()void  size(2) Largest target is 1
		 -> ir_terminate(), ir_bitcollect(), ir_Begin(), ir_end(), 

    OS_Block@semaPt	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), 

    OS_Signal@semaPt	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), 

    OS_Signal@pt.blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    OS_Signal@pt.next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    OS_Signal@pt.func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    OS_Signal@pt	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    OS_Signal@PrvPt.blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    OS_Signal@PrvPt.next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    OS_Signal@PrvPt.func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    OS_Signal@PrvPt	PTR struct tcb size(2) Largest target is 32
		 -> NULL(NULL[0]), tcbs(BANK0[24]), 

    OS_Wait@semaPt	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), 

    OS_Scheduler@PrvRunPt.blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    OS_Scheduler@PrvRunPt.next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    OS_Scheduler@PrvRunPt.func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    OS_Scheduler@PrvRunPt	PTR struct tcb size(2) Largest target is 32
		 -> NULL(NULL[0]), tcbs(BANK0[24]), 

    RunPt.blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    RunPt.next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    RunPt.func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    RunPt	PTR struct tcb size(2) Largest target is 32
		 -> NULL(NULL[0]), tcbs(BANK0[24]), 

    OS_AddThreads@func4	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), 

    OS_AddThreads@func3	PTR FTN()void  size(2) Largest target is 1
		 -> CLOCK_Task(), 

    OS_AddThreads@func2	PTR FTN()void  size(2) Largest target is 1
		 -> PICBOT_Task(), 

    S104tcb$blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    tcbs.blocked	PTR char  size(2) Largest target is 1
		 -> sema_Task4(BANK0[1]), sema_Task3(BANK0[1]), sema_Task2(BANK0[1]), sema_clock(BANK0[1]), 
		 -> sema_picbot(BANK0[1]), sema_irdetect(COMRAM[1]), NULL(NULL[0]), 

    S104tcb$next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    tcbs.next	PTR struct tcb size(2) Largest target is 32
		 -> tcbs(BANK0[24]), 

    S104tcb$func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    tcbs.func	PTR FTN()void  size(2) Largest target is 1
		 -> task4(), CLOCK_Task(), PICBOT_Task(), IR_Task(), 

    OS_AddThreads@func1	PTR FTN()void  size(2) Largest target is 1
		 -> IR_Task(), 


Critical Paths under _main in COMRAM

    _main->_OS_Scheduler
    _OS_Scheduler->_PICBOT_Task
    _OS_Launch->_PICBOT_Task
    _SEMA_WaitForTask4->_OS_Wait
    _SEMA_WaitForPICBot->_OS_Wait
    _SEMA_SetClock->_OS_Signal
    _PICBOT_rvs->_Wheel_Back_Left
    _PICBOT_rvs->_Wheel_Back_Right
    _PICBOT_rvs->_Wheel_Front_Left
    _PICBOT_rvs->_Wheel_Front_Right
    _PICBOT_rgt->_Wheel_Back_Left
    _PICBOT_rgt->_Wheel_Back_Right
    _PICBOT_rgt->_Wheel_Front_Left
    _PICBOT_rgt->_Wheel_Front_Right
    _PICBOT_lft->_Wheel_Back_Left
    _PICBOT_lft->_Wheel_Back_Right
    _PICBOT_lft->_Wheel_Front_Left
    _PICBOT_lft->_Wheel_Front_Right
    _PICBOT_fwd->_Wheel_Back_Left
    _PICBOT_fwd->_Wheel_Back_Right
    _PICBOT_fwd->_Wheel_Front_Left
    _PICBOT_fwd->_Wheel_Front_Right
    _IR_Task->_ir_bitcollect
    _ir_terminate->_Fifo_Put
    _SEMA_SetPICBot->_OS_Signal
    _ir_bitcollect->___lwdiv
    _SEMA_WaitForClock->_OS_Wait
    _PICBOT_Stop->_Wheel_Back_Left
    _PICBOT_Stop->_Wheel_Back_Right
    _PICBOT_Stop->_Wheel_Front_Left
    _PICBOT_Stop->_Wheel_Front_Right
    _Wheel_Front_Right->_Motor_Right_B_1A
    _Wheel_Front_Right->_Motor_Right_B_1B
    _Wheel_Front_Left->_Motor_Left_A_1A
    _Wheel_Front_Left->_Motor_Left_A_1B
    _Wheel_Back_Right->_Motor_Right_A_1A
    _Wheel_Back_Right->_Motor_Right_A_1B
    _Wheel_Back_Left->_Motor_Left_B_1A
    _Wheel_Back_Left->_Motor_Left_B_1B
    _CLOCK_ReadTimer->_TMR0_ReadTimer
    _IR_Init->_Fifo_Init
    _CONFIG_mcu->_TMR0_Init

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_CLOCK_Time_Tick
    _SEMA_SetIRdetect->i2_OS_Signal
    _CLOCK_Time_Tick->i2_CLOCK_ReadTimer
    i2_CLOCK_ReadTimer->i2_TMR0_ReadTimer

Critical Paths under _main in BANK0

    _main->_OS_AddThreads
    _SEMA_WaitForTask4->_OS_Wait
    _PICBOT_Task->_Fifo_Get
    _SEMA_WaitForPICBot->_OS_Wait
    _SEMA_SetClock->_OS_Signal
    _SEMA_BlockOnPICBot->_OS_Block
    _IR_Task->_CLOCK_ReadTimer
    _ir_terminate->_Fifo_Put
    _SEMA_SetPICBot->_OS_Signal
    _ir_bitcollect->___lwdiv
    _SEMA_BlockOnIRdetect->_OS_Block
    _CLOCK_Task->_CLOCK_ReadTimer
    _SEMA_WaitForClock->_OS_Wait
    _CLOCK_ReadTimer->_TMR0_ReadTimer

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   16641
                       _CLOCK_Enable
                         _CONFIG_mcu
                   _DEBUG_Pin0Enable
                        _INT0_Enable
                   _INTERRUPT_Enable
                            _IR_Init
                         _LED_Enable
                      _OS_AddThreads
                          _OS_Launch
                       _OS_Scheduler
                         _Wheel_Init
 ---------------------------------------------------------------------------------
 (1) _Wheel_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OS_Scheduler                                         5     5      0    8063
                                             41 COMRAM     2     2      0
                                             25 BANK0      3     3      0
                         _CLOCK_Task *
                            _IR_Task *
                        _PICBOT_Task *
                              _task4 *
 ---------------------------------------------------------------------------------
 (1) _OS_Launch                                            0     0      0    7992
                         _CLOCK_Task *
                            _IR_Task *
                        _PICBOT_Task *
                              _task4 *
 ---------------------------------------------------------------------------------
 (2) _task4                                                0     0      0     701
                  _SEMA_WaitForTask4
 ---------------------------------------------------------------------------------
 (3) _SEMA_WaitForTask4                                    0     0      0     701
                            _OS_Wait
 ---------------------------------------------------------------------------------
 (2) _PICBOT_Task                                          5     5      0    4179
                                             36 COMRAM     5     5      0
                   _DEBUG_Pin0Toggle
                           _Fifo_Get
                        _PICBOT_Stop
                         _PICBOT_fwd
                         _PICBOT_lft
                         _PICBOT_rgt
                         _PICBOT_rvs
                 _SEMA_BlockOnPICBot
                      _SEMA_SetClock
                 _SEMA_WaitForPICBot
 ---------------------------------------------------------------------------------
 (3) _SEMA_WaitForPICBot                                   0     0      0     701
                            _OS_Wait
 ---------------------------------------------------------------------------------
 (3) _SEMA_SetClock                                        0     0      0     793
                          _OS_Signal
 ---------------------------------------------------------------------------------
 (3) _SEMA_BlockOnPICBot                                   0     0      0     602
                           _OS_Block
 ---------------------------------------------------------------------------------
 (3) _PICBOT_rvs                                           0     0      0     372
                    _Wheel_Back_Left
                   _Wheel_Back_Right
                   _Wheel_Front_Left
                  _Wheel_Front_Right
 ---------------------------------------------------------------------------------
 (3) _PICBOT_rgt                                           0     0      0     372
                    _Wheel_Back_Left
                   _Wheel_Back_Right
                   _Wheel_Front_Left
                  _Wheel_Front_Right
 ---------------------------------------------------------------------------------
 (3) _PICBOT_lft                                           0     0      0     372
                    _Wheel_Back_Left
                   _Wheel_Back_Right
                   _Wheel_Front_Left
                  _Wheel_Front_Right
 ---------------------------------------------------------------------------------
 (3) _PICBOT_fwd                                           0     0      0     372
                    _Wheel_Back_Left
                   _Wheel_Back_Right
                   _Wheel_Front_Left
                  _Wheel_Front_Right
 ---------------------------------------------------------------------------------
 (3) _Fifo_Get                                             4     2      2     121
                                             30 COMRAM     2     2      0
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DEBUG_Pin0Toggle                                     1     1      0       0
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _IR_Task                                              2     2      0    2005
                                             37 COMRAM     2     2      0
                    _CLOCK_ReadTimer
               _SEMA_BlockOnIRdetect
                           _ir_Begin *
                      _ir_bitcollect *
                             _ir_end *
                       _ir_terminate *
 ---------------------------------------------------------------------------------
 (3) _ir_terminate                                         0     0      0     914
                           _Fifo_Put
                     _SEMA_SetPICBot
 ---------------------------------------------------------------------------------
 (4) _SEMA_SetPICBot                                       0     0      0     793
                          _OS_Signal
 ---------------------------------------------------------------------------------
 (4) _OS_Signal                                            8     6      2     793
                                             30 COMRAM     6     6      0
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Fifo_Put                                             8     6      2     121
                                             30 COMRAM     6     6      0
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ir_end                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ir_bitcollect                                        4     4      0     455
                                             33 COMRAM     4     4      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             30 COMRAM     3     3      0
                                             21 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ir_Begin                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SEMA_BlockOnIRdetect                                 0     0      0     602
                           _OS_Block
 ---------------------------------------------------------------------------------
 (4) _OS_Block                                             2     0      2     602
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Task                                           0     0      0    1107
                    _CLOCK_ReadTimer
                        _PICBOT_Stop
                  _SEMA_WaitForClock
 ---------------------------------------------------------------------------------
 (3) _SEMA_WaitForClock                                    0     0      0     701
                            _OS_Wait
 ---------------------------------------------------------------------------------
 (4) _OS_Wait                                              4     2      2     701
                                             30 COMRAM     2     2      0
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PICBOT_Stop                                          0     0      0     372
                    _Wheel_Back_Left
                   _Wheel_Back_Right
                   _Wheel_Front_Left
                  _Wheel_Front_Right
 ---------------------------------------------------------------------------------
 (4) _Wheel_Front_Right                                    1     1      0      93
                                             31 COMRAM     1     1      0
                   _Motor_Right_B_1A
                   _Motor_Right_B_1B
 ---------------------------------------------------------------------------------
 (5) _Motor_Right_B_1B                                     1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Motor_Right_B_1A                                     1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Wheel_Front_Left                                     1     1      0      93
                                             31 COMRAM     1     1      0
                    _Motor_Left_A_1A
                    _Motor_Left_A_1B
 ---------------------------------------------------------------------------------
 (5) _Motor_Left_A_1B                                      1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Motor_Left_A_1A                                      1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Wheel_Back_Right                                     1     1      0      93
                                             31 COMRAM     1     1      0
                   _Motor_Right_A_1A
                   _Motor_Right_A_1B
 ---------------------------------------------------------------------------------
 (5) _Motor_Right_A_1B                                     1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Motor_Right_A_1A                                     1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Wheel_Back_Left                                      1     1      0      93
                                             31 COMRAM     1     1      0
                    _Motor_Left_B_1A
                    _Motor_Left_B_1B
 ---------------------------------------------------------------------------------
 (5) _Motor_Left_B_1B                                      1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Motor_Left_B_1A                                      1     1      0      31
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CLOCK_ReadTimer                                      2     0      2      34
                                             23 BANK0      2     0      2
                     _TMR0_ReadTimer
 ---------------------------------------------------------------------------------
 (4) _TMR0_ReadTimer                                       6     4      2      34
                                             30 COMRAM     4     4      0
                                             21 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _OS_AddThreads                                        8     0      8     484
                                             21 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _LED_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_Init                                              0     0      0     102
                          _Fifo_Init
 ---------------------------------------------------------------------------------
 (2) _Fifo_Init                                            2     2      0     102
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INTERRUPT_Enable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INT0_Enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DEBUG_Pin0Enable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CONFIG_mcu                                           0     0      0       0
                          _INT0_Init
                     _INTERRUPT_Init
                    _OSCILLATOR_Init
                         _PORTS_Init
                          _TMR0_Init
 ---------------------------------------------------------------------------------
 (2) _TMR0_Init                                            2     2      0       0
                                             30 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _PORTS_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT0_Init                                            0     0      0       0
                   _INT0_FallingEdge
 ---------------------------------------------------------------------------------
 (3) _INT0_FallingEdge                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLOCK_Enable                                         0     0      0       0
                        _TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _TMR0_Enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                             18    18      0     273
                                             12 COMRAM    18    18      0
                    _CLOCK_Time_Tick
                    _INT0_RisingEdge
                          _IR_handle
                            _LED_Off
                             _LED_On
                   _SEMA_SetIRdetect
                 i2_INT0_FallingEdge
 ---------------------------------------------------------------------------------
 (8) i2_INT0_FallingEdge                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _SEMA_SetIRdetect                                     0     0      0     227
                        i2_OS_Signal
 ---------------------------------------------------------------------------------
 (9) i2_OS_Signal                                          8     6      2     227
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (8) _LED_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _LED_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IR_handle                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _INT0_RisingEdge                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _CLOCK_Time_Tick                                      4     2      2      46
                                              8 COMRAM     4     2      2
                      _CLOCK_Disable
                       _CLOCK_Reload
                     i2_CLOCK_Enable
                  i2_CLOCK_ReadTimer
 ---------------------------------------------------------------------------------
 (9) i2_CLOCK_ReadTimer                                    2     0      2      23
                                              6 COMRAM     2     0      2
                   i2_TMR0_ReadTimer
 ---------------------------------------------------------------------------------
 (10) i2_TMR0_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) i2_CLOCK_Enable                                       0     0      0       0
                      i2_TMR0_Enable
 ---------------------------------------------------------------------------------
 (10) i2_TMR0_Enable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CLOCK_Reload                                         0     0      0       0
                        _TMR0_Reload
 ---------------------------------------------------------------------------------
 (10) _TMR0_Reload                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CLOCK_Disable                                        0     0      0       0
                       _TMR0_Disable
 ---------------------------------------------------------------------------------
 (10) _TMR0_Disable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLOCK_Enable
     _TMR0_Enable
   _CONFIG_mcu
     _INT0_Init
       _INT0_FallingEdge
     _INTERRUPT_Init
     _OSCILLATOR_Init
     _PORTS_Init
     _TMR0_Init
   _DEBUG_Pin0Enable
   _INT0_Enable
   _INTERRUPT_Enable
   _IR_Init
     _Fifo_Init
   _LED_Enable
   _OS_AddThreads
   _OS_Launch
     _CLOCK_Task *
       _CLOCK_ReadTimer
         _TMR0_ReadTimer
       _PICBOT_Stop
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _SEMA_WaitForClock
         _OS_Wait
     _IR_Task *
       _CLOCK_ReadTimer
         _TMR0_ReadTimer
       _SEMA_BlockOnIRdetect
         _OS_Block
       _ir_Begin *
       _ir_bitcollect *
         ___lwdiv
       _ir_end *
       _ir_terminate *
         _Fifo_Put
         _SEMA_SetPICBot
           _OS_Signal
     _PICBOT_Task *
       _DEBUG_Pin0Toggle
       _Fifo_Get
       _PICBOT_Stop
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_fwd
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_lft
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_rgt
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_rvs
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _SEMA_BlockOnPICBot
         _OS_Block
       _SEMA_SetClock
         _OS_Signal
       _SEMA_WaitForPICBot
         _OS_Wait
     _task4 *
       _SEMA_WaitForTask4
         _OS_Wait
   _OS_Scheduler
     _CLOCK_Task *
       _CLOCK_ReadTimer
         _TMR0_ReadTimer
       _PICBOT_Stop
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _SEMA_WaitForClock
         _OS_Wait
     _IR_Task *
       _CLOCK_ReadTimer
         _TMR0_ReadTimer
       _SEMA_BlockOnIRdetect
         _OS_Block
       _ir_Begin *
       _ir_bitcollect *
         ___lwdiv
       _ir_end *
       _ir_terminate *
         _Fifo_Put
         _SEMA_SetPICBot
           _OS_Signal
     _PICBOT_Task *
       _DEBUG_Pin0Toggle
       _Fifo_Get
       _PICBOT_Stop
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_fwd
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_lft
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_rgt
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _PICBOT_rvs
         _Wheel_Back_Left
           _Motor_Left_B_1A
           _Motor_Left_B_1B
         _Wheel_Back_Right
           _Motor_Right_A_1A
           _Motor_Right_A_1B
         _Wheel_Front_Left
           _Motor_Left_A_1A
           _Motor_Left_A_1B
         _Wheel_Front_Right
           _Motor_Right_B_1A
           _Motor_Right_B_1B
       _SEMA_BlockOnPICBot
         _OS_Block
       _SEMA_SetClock
         _OS_Signal
       _SEMA_WaitForPICBot
         _OS_Wait
     _task4 *
       _SEMA_WaitForTask4
         _OS_Wait
   _Wheel_Init

 _LowISR (ROOT)

 _HighISR (ROOT)
   _CLOCK_Time_Tick
     _CLOCK_Disable
       _TMR0_Disable
     _CLOCK_Reload
       _TMR0_Reload
     i2_CLOCK_Enable
       i2_TMR0_Enable
     i2_CLOCK_ReadTimer
       i2_TMR0_ReadTimer
   _INT0_RisingEdge
   _IR_handle
   _LED_Off
   _LED_On
   _SEMA_SetIRdetect
     i2_OS_Signal
   i2_INT0_FallingEdge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      6A       5       66.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      40       1       68.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      20        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 17 14:33:20 2018

                            _i 003E                              _j 003C                              _k 003A  
                            _l 0086                             l45 0E26                             l81 0B48  
                           l66 0AB2                             l75 0EEE                             l83 0B84  
                           l67 0AEE                    ?_LED_Enable 0001                    __CFG_BOR$ON 000000  
                           bsr 000FE0                _timer0ReloadVal 0038                  _OS_AddThreads 0C58  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                            l107 142C                            l320 0EC8  
                          l304 092A                            l241 0E6A                            l250 0E64  
                          l242 0E2E                            l307 094E                            l309 096A  
                          l501 0A32                            l502 09FA                            l246 0E40  
                          l407 125C                            l440 1208                            l504 0A08  
                          l505 0A12                            l506 0A1C                            l507 0A26  
                          l508 0A2C                            l454 0F38                            l550 0F92  
                          l551 0F68                            l463 1082                            l561 0FBA  
                          l553 0F76                            l570 100C                            l562 0FC8  
                          l554 0F84                            l396 1224                            l574 105E  
                          l566 101A                            l558 0FD6                            l575 1034  
                          l567 0FF0                            l559 0FAC                            l577 1042  
                          l569 0FFE                            l578 1050                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                   ?_INT0_Enable 0001      __size_of_INTERRUPT_Enable 0006  
                  ?_PICBOT_fwd 0001                    ?_PICBOT_lft 0001                    ?_PICBOT_rgt 0001  
                          tosl 000FFD                            wreg 000FE8                    ?_PICBOT_rvs 0001  
            i2_CLOCK_ReadTimer 1418              ?_Wheel_Front_Left 0001             ?i2_CLOCK_ReadTimer 0007  
                 __CFG_LVP$OFF 000000                __end_of_LED_Off 1496                   __CFG_WDT$OFF 000000  
                         l1040 0DD2                           l1035 0DA8                           l1036 0DA0  
                         l1039 0DC8             ??_Wheel_Front_Left 0020                           l3119 0F28  
                         l3129 0F58                           l3411 0A84                           l3403 0A5C  
                         l3405 0A66                           l3229 0AEE                           l3407 0A70  
                         l3409 0A7A                           l2725 0B48                           l2733 0B84  
                         l2735 0B9E                           u1120 0B9E                           u1205 13DC  
                         u1206 13DE                           u1135 1396                           u1136 1398  
                         u1240 0DAC                           u1145 1388                           u1146 138A  
                         u1314 0EBA                           u1155 13B2                           u1315 0EB4  
                         u1156 13B4                           u1165 13A4                           _LATA 000F89  
                         u1166 13A6                           u1270 1230                           _LATB 000F8A  
                         u1175 13CE                           _LATC 000F8B                           u1176 13D0  
                         u1440 095A                           _LATD 000F8C                           u1185 13C0  
                         _LATE 000F8D                           u1186 13C2                           u1195 13EA  
                         u1196 13EC                           u1276 1232                           u1380 0E56  
                         u1550 0B02                           u1528 119C                           u1490 0F58  
                         u1478 09BC                           _IPR2 000FA2                           _PIE2 000FA0  
                         u1578 0B14                           _PIR2 000FA1                           i2l81 0BE0  
                         i2l83 0C1C       __size_of_Motor_Left_A_1A 000E       __size_of_Motor_Left_A_1B 000E  
     __size_of_Motor_Left_B_1A 000E       __size_of_Motor_Left_B_1B 000E          __size_of_OS_Scheduler 009A  
        CLOCK_Task@STATE_CLOCK 008B                           _GetI 0088                           _Fifo 0060  
              ?_SEMA_SetPICBot 0001                           _PutI 0089                __end_of_IR_Init 140A  
              __end_of_IR_Task 09D4                           _main 0DDC                           _tcbs 008C  
                         _secs 002C            ??i2_CLOCK_ReadTimer 0009                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0041           __end_of_CLOCK_Enable 1470                   ?_PICBOT_Task 0001  
                 ?_PICBOT_Stop 0001                           prodh 000FF4                __end_of_OS_Wait 0F18  
                         prodl 000FF3                           start 00C6             __size_of_INT0_Init 000A  
                __CFG_IESO$OFF 000000           __end_of_CLOCK_Reload 147C            __size_of_CLOCK_Task 0050  
            _Wheel_Front_Right 0F64                __end_of_HighISR 0904          __end_ofi2_TMR0_Enable 149E  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000            __size_of_CONFIG_mcu 0016  
           ?_Wheel_Front_Right 0001              ??_INT0_RisingEdge 0001    __size_ofi2_INT0_FallingEdge 0004  
                __CFG_PLLDIV$4 000000                 ?_OS_AddThreads 00C1         __size_of_ir_bitcollect 0050  
               __CFG_CCP2MX$ON 000000                          ?_main 0001            ??_Wheel_Front_Right 0020  
    __end_ofi2_CLOCK_ReadTimer 1426                __end_of___lwdiv 0DDC                          i2l353 08B8  
                        i2l354 0876                          i2l355 087E                          _TMR0H 000FD7  
                        _TMR1H 000FCF                          _TMR0L 000FD6                  __CFG_USBDIV$2 000000  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                  __CFG_PWRT$OFF 000000  
                 _OS_Scheduler 0A8E                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                        _RunPt 0084                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000             __size_of_TMR0_Init 0036                 __CFG_EBTRB$OFF 000000  
                        _mills 0030                          _task4 130A                    ?_PORTS_Init 0001  
           _SEMA_BlockOnPICBot 133E                          _usecs 0034        __size_of_INTERRUPT_Init 0068  
        __end_of_CLOCK_Disable 1482              ??_CLOCK_ReadTimer 0023               __end_of_OS_Block 116C  
                        pclath 000FFA                          tablat 000FF5             __size_of_IR_handle 000A  
    __size_ofi2_TMR0_ReadTimer 0020             _SEMA_WaitForPICBot 120C            __size_of_LED_Enable 0006  
                        status 000FD8                          wtemp6 0042      __end_of_Wheel_Front_Right 0FA8  
               __CFG_ICPRT$OFF 000000            ?_SEMA_BlockOnPICBot 0001             __size_of_OS_Launch 0020  
             __end_of_Fifo_Get 10B2               __end_of_Fifo_Put 0D88            ?_SEMA_WaitForPICBot 0001  
           __size_of_OS_Signal 0098                __initialization 10B2            __size_of_PICBOT_fwd 001A  
          __size_of_PICBOT_lft 001A            __size_of_PICBOT_rgt 001A            __size_of_PICBOT_rvs 001A  
                 __end_of_main 0E2C      __size_of_INT0_FallingEdge 0004              ??_CLOCK_Time_Tick 000B  
            ?_DEBUG_Pin0Enable 0001                         ??_main 002C             ??_DEBUG_Pin0Enable 001F  
                __activetblptr 000002             __size_of_Fifo_Init 004C           ??_SEMA_BlockOnPICBot 001F  
            ?_DEBUG_Pin0Toggle 0001                      ??_LED_Off 0001              __end_of_INT0_Init 143C  
         ??_SEMA_WaitForPICBot 0021             ??_DEBUG_Pin0Toggle 001F         Wheel_Front_Left@motion 0020  
                    ??_IR_Init 0021                      ??_IR_Task 0026                         ?_task4 0001  
                    ??_OS_Wait 001F                IR_Task@prvLevel 00C9                         _LED_On 148E  
                       i2l2439 0BE0                         i2l2447 0C1C                         i2l2449 0C36  
                 ?i2_OS_Signal 0001                  _ir_bitcollect 0E7C                      ??_HighISR 000D  
    __size_of_Wheel_Back_Right 0044                         _IRdata 0080       __end_of_Motor_Right_A_1A 13D2  
     __end_of_Motor_Right_A_1B 13C4       __end_of_Motor_Right_B_1A 139A       __end_of_Motor_Right_B_1B 138C  
                ?_ir_terminate 0001                         _LowISR 0018                   ?_TMR0_Enable 0001  
            ??_Motor_Left_A_1A 001F              ??_Motor_Left_A_1B 001F              ??_Motor_Left_B_1A 001F  
            ??_Motor_Left_B_1B 001F                 __CFG_XINST$OFF 000000               __end_of_ir_Begin 135E  
                 ?_TMR0_Reload 0001              __end_of_TMR0_Init 1120                ??_OS_AddThreads 001F  
               __CFG_STVREN$ON 000000                      ??___lwdiv 001F                     _Wheel_Init 12F8  
                       _ir_end 14A2            __size_of_PORTS_Init 0028                         clear_0 10CA  
                       clear_1 10D6              __end_of_IR_handle 1446              ?_SEMA_SetIRdetect 0001  
   __size_ofi2_CLOCK_ReadTimer 000E                   ??_CLOCK_Task 0023             ??_SEMA_SetIRdetect 0009  
             _INTERRUPT_Enable 145E              __end_of_OS_Launch 11B0                   __mediumconst 0000  
                 ??_CONFIG_mcu 0021                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8              __end_of_OS_Signal 0BC0               i2OS_Signal@PrvPt 0005  
         __size_of_INT0_Enable 0008          __size_of_CLOCK_Enable 0006                 ?_ir_bitcollect 0001  
        __size_of_CLOCK_Reload 0006                     __accesstop 0060        __end_of__initialization 10DC  
              __CFG_PBADEN$OFF 000000                 ??_ir_terminate 0025     __size_of_Wheel_Front_Right 0044  
                ___rparam_used 000001              __end_of_Fifo_Init 0F64                 ir_bitcollect@n 0025  
         __size_of_PICBOT_Task 00BA             __end_of_CLOCK_Task 0E7C           __size_of_PICBOT_Stop 001A  
     __size_of_OSCILLATOR_Init 000C                 __pcstackCOMRAM 0001                   __pidataBANK0 14A4  
           __end_of_CONFIG_mcu 12F8                  __end_of_task4 131C                   ??_LED_Enable 001F  
                i2OS_Signal@pt 0007        __size_of_TMR0_ReadTimer 0020                      ?_OS_Block 00C1  
 __end_of_SEMA_BlockOnIRdetect 137E                   _CLOCK_Enable 146A                   ??_PICBOT_fwd 0021  
                 ??_PICBOT_lft 0021                   ??_PICBOT_rgt 0021                   ??_PICBOT_rvs 0021  
                 _CLOCK_Reload 1476       __size_of_Wheel_Back_Left 0044               ??_SEMA_SetPICBot 0025  
                    ?_Fifo_Get 00C1        __size_ofi2_CLOCK_Enable 0006                      ?_Fifo_Put 00C1  
                      ??_task4 0021                 _INTERRUPT_Init 0CC4                     __pbssBANK0 0060  
                      ?_LED_On 0001               i2_TMR0_ReadTimer 11D0                _INT0_RisingEdge 1496  
           __end_of_LED_Enable 145E                        ?_LowISR 0001      __size_of_Wheel_Front_Left 0044  
           __end_of_PICBOT_fwd 12C8             __end_of_PICBOT_lft 12AE              PICBOT_Task@status 0027  
           __end_of_PICBOT_rgt 1294             __end_of_PICBOT_rvs 127A               _INT0_FallingEdge 1482  
                  ?_Wheel_Init 0001                        ?_ir_end 0001                     ??_OS_Block 001F  
              _CLOCK_ReadTimer 13EE                        _LED_Off 1492         __end_of_INTERRUPT_Init 0D2C  
       __size_of_SEMA_SetClock 0010                     ??_Fifo_Get 001F                     ??_Fifo_Put 001F  
              ??_ir_bitcollect 0022                        _IR_Init 13FC                        _IR_Task 0904  
                    ?_ir_Begin 0001                   ??_PORTS_Init 001F                        _IRdigit 008A  
                      _OS_Wait 0ECC                __size_of_LED_On 0004                __CFG_VREGEN$OFF 000000  
                      _HighISR 0008                _CLOCK_Time_Tick 116C               _Wheel_Back_Right 0FEC  
         __size_ofi2_OS_Signal 0098                  ?_TMR0_Disable 0001                        __Hparam 0000  
               OS_Signal@PrvPt 0021     __end_ofi2_INT0_FallingEdge 148E                        __Lparam 0000  
              __size_of_LowISR 00AE           __size_of_TMR0_Enable 0004                        ___lwdiv 0D88  
                 __psmallconst 0800           __size_of_TMR0_Reload 000A                __size_of_ir_end 0002  
                      __pcinit 10B2             __end_of_PORTS_Init 1148                        __ramtop 0800  
            ??_OSCILLATOR_Init 001F                        __ptext0 0DDC                        __ptext1 12F8  
                      __ptext2 0A8E                        __ptext3 1190                        __ptext4 0E2C  
                      __ptext5 09D4                        __ptext6 0904                        __ptext7 130A  
                      __ptext8 11F0                        __ptext9 120C                      _T0CONbits 000FD5  
         __end_of_ir_terminate 132E                        _irstate 0082        __end_of_INT0_RisingEdge 149A  
              ?_INTERRUPT_Init 0001         __size_ofi2_TMR0_Enable 0004                     ??_ir_Begin 001F  
                   _sema_Task2 00A9                     _sema_Task3 00A8                     _sema_Task4 00A7  
                    _INT0_Init 1432                _Motor_Left_A_1A 13A8                _Motor_Left_A_1B 139A  
              _Motor_Left_B_1A 13E0                _Motor_Left_B_1B 13D2                 __pintcode_body 081A  
         end_of_initialization 10DC      __size_of_DEBUG_Pin0Enable 0006                     _sema_clock 00AA  
            ??_Wheel_Back_Left 0020            __size_of_Wheel_Init 0012                  __Lmediumconst 0000  
                      int_func 081A      __size_of_DEBUG_Pin0Toggle 001C                 ??_TMR0_Disable 0001  
         _SEMA_BlockOnIRdetect 136E              ?_Motor_Right_A_1A 0001              ?_Motor_Right_A_1B 0001  
            ?_Motor_Right_B_1A 0001              ?_Motor_Right_B_1B 0001       __end_of_INTERRUPT_Enable 1464  
            OS_Scheduler@sleep 00C7                  _SEMA_SetClock 132E          TMR0_ReadTimer@readVal 0021  
           ??_Motor_Right_A_1A 001F             ??_Motor_Right_A_1B 001F             ??_Motor_Right_B_1A 001F  
           ??_Motor_Right_B_1B 001F                        postdec1 000FE5                        postdec2 000FDD  
      __end_of_CLOCK_ReadTimer 13FC                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                 _TMR0_ReadTimer 11B0         __size_of_CLOCK_Disable 0006  
            i2OS_Signal@semaPt 0001                      _TMR0_Init 10EA                      _PORTBbits 000F81  
  __size_of_SEMA_BlockOnPICBot 0010                      _IR_handle 143C                      _TRISAbits 000F92  
                    _TRISBbits 000F93    __size_of_SEMA_WaitForPICBot 001C                      _TRISEbits 000F96  
               i2_CLOCK_Enable 1470        __end_of_CLOCK_Time_Tick 1190                     ?_INT0_Init 0001  
                    _OS_Launch 1190      __size_of_SEMA_SetIRdetect 000E                      _OS_Signal 0B28  
               __end_of_LED_On 1492          ?_SEMA_BlockOnIRdetect 0001                 ?_SEMA_SetClock 0001  
             _Wheel_Front_Left 0FA8                  i2_TMR0_Enable 149A                 __end_of_LowISR 00C6  
       __end_of_TMR0_ReadTimer 11D0                      _Fifo_Init 0F18          __end_of_OS_AddThreads 0CC4  
     __end_ofi2_TMR0_ReadTimer 11F0                     ?_TMR0_Init 0001                 __end_of_ir_end 14A4  
       __end_ofi2_CLOCK_Enable 1476        __end_of_Motor_Left_A_1A 13B6        __end_of_Motor_Left_A_1B 13A8  
      __end_of_Motor_Left_B_1A 13EE        __end_of_Motor_Left_B_1B 13E0                  ??_INT0_Enable 001F  
                   ?_IR_handle 0001              __size_of_OS_Block 0024            start_initialization 10B2  
            _SEMA_WaitForClock 1244              _SEMA_WaitForTask4 11F0               ?_INT0_RisingEdge 0001  
           ?_SEMA_WaitForClock 0001             ?_SEMA_WaitForTask4 0001       __end_of_INT0_FallingEdge 1486  
                   ?_OS_Launch 0001              __size_of_Fifo_Get 003E              __size_of_Fifo_Put 005C  
                   ?_OS_Signal 00C1                       ??_LED_On 0001                  _CLOCK_Disable 147C  
                ??_PICBOT_Task 0025            ??_SEMA_WaitForClock 0021                  ??_PICBOT_Stop 0021  
          ??_SEMA_WaitForTask4 0021                  _sema_irdetect 0040            Motor_Right_A_1A@dir 001F  
          Motor_Right_A_1B@dir 001F            Motor_Right_B_1A@dir 001F            Motor_Right_B_1B@dir 001F  
                     ??_LowISR 00AC                 ?i2_TMR0_Enable 0001                ?_TMR0_ReadTimer 00C1  
                   ?_Fifo_Init 0001                 _IRSTATEMACHINE 0801               ?_CLOCK_ReadTimer 00C3  
                 ??_Wheel_Init 001F          __size_of_ir_terminate 0012                    __pdataBANK0 00C9  
             __CFG_LPT1OSC$OFF 000000                       ??_ir_end 001F       __end_of_Wheel_Back_Right 1030  
      Wheel_Front_Right@motion 0020         Wheel_Back_Right@motion 0020      __end_of_SEMA_WaitForClock 1260  
    __end_of_SEMA_WaitForTask4 120C                ?i2_CLOCK_Enable 0001           __end_of_TMR0_Disable 14A2  
                     ?_LED_Off 0001                  ?_OS_Scheduler 0001                    __pbssCOMRAM 002C  
                __pcstackBANK0 00AC                       ?_IR_Init 0001       CLOCK_Time_Tick@tick_time 000B  
             ?_CLOCK_Time_Tick 0009                       ?_IR_Task 0001                    ??_INT0_Init 001F  
          __end_of_INT0_Enable 1458               _DEBUG_Pin0Enable 1464                 ?_CLOCK_Disable 0001  
                     ?_OS_Wait 00C1              __size_of_ir_Begin 0010         ??_SEMA_BlockOnIRdetect 001F  
                     ?_HighISR 0001             __end_of_Wheel_Init 130A               _DEBUG_Pin0Toggle 1228  
              ??_SEMA_SetClock 0025             PICBOT_Task@command 0028           OS_Scheduler@PrvRunPt 00C5  
                 _ir_terminate 131C        i2TMR0_ReadTimer@readVal 0005                _OSCILLATOR_Init 1426  
       __end_of_IRSTATEMACHINE 0819               ___lwdiv@dividend 00C1          Wheel_Back_Left@motion 0020  
                    __pintcode 0008            __end_of_PICBOT_Task 0A8E            __end_of_PICBOT_Stop 12E2  
                  OS_Signal@pt 0023                       ?___lwdiv 00C1                    __pintcodelo 0018  
                  ??_TMR0_Init 001F               ??_INTERRUPT_Init 001F             i2_INT0_FallingEdge 148A  
               ??_OS_Scheduler 002A                    __smallconst 0800                _Wheel_Back_Left 1030  
             ?_Motor_Left_A_1A 0001               ?_Motor_Left_A_1B 0001               ?_Motor_Left_B_1A 0001  
             ?_Motor_Left_B_1B 0001                    ??_IR_handle 0003                  OS_Wait@semaPt 00C1  
           Motor_Left_A_1A@dir 001F             Motor_Left_A_1B@dir 001F             Motor_Left_B_1A@dir 001F  
           Motor_Left_B_1B@dir 001F               ___lwdiv@quotient 0020            ?i2_INT0_FallingEdge 0001  
               __size_of_task4 0012                    ??_OS_Launch 002A          __end_of_ir_bitcollect 0ECC  
                ??i2_OS_Signal 0003               _SEMA_SetIRdetect 140A                    ??_OS_Signal 001F  
                     _LATAbits 000F89                       _LATBbits 000F8A                       _LATEbits 000F8D  
              ??i2_TMR0_Enable 0001                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
      __size_of_SEMA_SetPICBot 0010                  ??_TMR0_Enable 001F                       i2u100_40 0C36  
                     i2u109_40 0896                       i2u109_46 0898              ?_INTERRUPT_Enable 0001  
                     _PIR1bits 000F9E                  ??_TMR0_Reload 0001                       _RCONbits 000FD0  
             __CFG_WDTPS$32768 000000                    ??_Fifo_Init 001F           ??i2_INT0_FallingEdge 0001  
           ??_INTERRUPT_Enable 001F                     _ADCON1bits 000FC1                       _OS_Block 1148  
   __size_of_SEMA_WaitForClock 001C     __size_of_SEMA_WaitForTask4 001C      __size_of_Motor_Right_A_1A 000E  
    __size_of_Motor_Right_A_1B 000E      __size_of_Motor_Right_B_1A 000E      __size_of_Motor_Right_B_1B 000E  
                 Fifo_Put@data 00C1                    _INT0_Enable 1450             OS_AddThreads@func1 00C1  
           OS_AddThreads@func2 00C3             OS_AddThreads@func3 00C5             OS_AddThreads@func4 00C7  
     __end_of_Wheel_Front_Left 0FEC               __size_of_LED_Off 0004                       _Fifo_Get 1074  
                     _Fifo_Put 0D2C                ??_CLOCK_Disable 0001                    _INTCON2bits 000FF1  
                  _INTCON3bits 000FF0               __size_of_IR_Init 000E               __size_of_IR_Task 00D0  
      __end_of_OSCILLATOR_Init 1432               __size_of_OS_Wait 004C               __size_of_HighISR 08FC  
                  _PICBOT_Task 09D4                    _PICBOT_Stop 12C8                       __Hrparam 0000  
          __end_ofi2_OS_Signal 0C58                       __Lrparam 0000                OS_Signal@semaPt 00C1  
      __end_of_Wheel_Back_Left 1074          __size_of_TMR0_Disable 0004            __end_of_TMR0_Enable 148A  
             __size_of___lwdiv 0054     __end_of_SEMA_BlockOnPICBot 134E            __end_of_TMR0_Reload 1450  
            ?i2_TMR0_ReadTimer 0001                  ?_CLOCK_Enable 0001     __end_of_SEMA_WaitForPICBot 1228  
                   _CLOCK_Task 0E2C             ??i2_TMR0_ReadTimer 0003                  ?_CLOCK_Reload 0001  
                   _CONFIG_mcu 12E2                ___lwdiv@divisor 00C3                ___lwdiv@counter 001F  
                     __ptext10 132E                       __ptext11 133E                       __ptext20 14A2  
                     __ptext12 1260                       __ptext21 131C                       __ptext13 127A  
                     __ptext30 12C8                       __ptext22 135E                       __ptext14 1294  
                     __ptext31 0F64                       __ptext23 0B28                       __ptext15 12AE  
                     __ptext40 1030                       __ptext32 137E                       __ptext24 0D2C  
                     __ptext16 1074                       __ptext41 13D2                       __ptext33 138C  
                     __ptext25 0D88                       __ptext17 1228                       __ptext50 1450  
                     __ptext42 13E0                       __ptext34 0FA8                       __ptext26 136E  
                     __ptext18 0E7C                       __ptext51 1464                       __ptext43 13EE  
                     __ptext35 139A                       __ptext27 1148                       __ptext19 134E  
                     __ptext60 1486                       __ptext52 12E2                       __ptext44 11B0  
                     __ptext36 13A8                       __ptext28 1244                       __ptext53 10EA  
                     __ptext45 0C58                       __ptext37 0FEC                       __ptext29 0ECC  
                     __ptext70 116C                       __ptext54 1120                       __ptext46 1458  
                     __ptext38 13B6                       __ptext71 1418                       __ptext63 148A  
                     __ptext55 1426                       __ptext47 13FC                       __ptext39 13C4  
                     __ptext72 11D0                       __ptext64 140A                       __ptext56 0CC4  
                     __ptext48 0F18                       __ptext73 1470                       __ptext65 0BC0  
                     __ptext57 1432                       __ptext49 145E                       __ptext74 149A  
                     __ptext66 148E                       __ptext58 1482                       __ptext75 1476  
                     __ptext67 1492                       __ptext59 146A                       __ptext76 1446  
                     __ptext68 143C                       __ptext77 147C                       __ptext69 1496  
                     __ptext78 149E                       __ptext79 0000                     OS_Wait@ret 0020  
                     _ir_Begin 134E              ?_INT0_FallingEdge 0001             ??_INT0_FallingEdge 001F  
                __size_of_main 0050                       _irhandle 00A4               ??_TMR0_ReadTimer 001F  
         __end_of_OS_Scheduler 0B28                   _TMR0_Disable 149E                       int$flags 0041  
             ??i2_CLOCK_Enable 0001       __end_of_DEBUG_Pin0Enable 146A                     _LED_Enable 1458  
               ??_CLOCK_Enable 001F          __CFG_CPUDIV$OSC1_PLL2 000000       __end_of_DEBUG_Pin0Toggle 1244  
            ?_Wheel_Back_Right 0001                 ??_CLOCK_Reload 0001                     _INTCONbits 000FF2  
                   _PICBOT_fwd 12AE                     _PICBOT_lft 1294                     _PICBOT_rgt 127A  
                   _PICBOT_rvs 1260             ??_Wheel_Back_Right 0020                 OS_Block@semaPt 00C1  
                  _sema_picbot 00AB                 Fifo_Get@datapt 00C1                       intlevel1 0000  
                     intlevel2 0000               ?_OSCILLATOR_Init 0001                    i2_OS_Signal 0BC0  
       __size_of_OS_AddThreads 006C       __size_of_INT0_RisingEdge 0004                 _SEMA_SetPICBot 135E  
                   _OSCCONbits 000FD3                    _TMR0_Enable 1486                     Fifo_Init@i 001F  
                  _TMR0_Reload 1446               ?_Wheel_Back_Left 0001       __end_of_SEMA_SetIRdetect 1418  
             _Motor_Right_A_1A 13C4               _Motor_Right_A_1B 13B6               _Motor_Right_B_1A 138C  
             _Motor_Right_B_1B 137E                    ?_CLOCK_Task 0001       __size_of_CLOCK_ReadTimer 000E  
                  ?_CONFIG_mcu 0001                     _PORTS_Init 1120             __CFG_FOSC$HSPLL_HS 000000  
       __end_of_SEMA_SetPICBot 136E       __size_of_CLOCK_Time_Tick 0024  __size_of_SEMA_BlockOnIRdetect 0010  
        __end_of_SEMA_SetClock 133E  
